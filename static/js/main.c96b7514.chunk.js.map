{"version":3,"sources":["logic/LogicComponent.tsx","reportWebVitals.ts","components/Sidebar.tsx","components/Component.tsx","enums/PartType.ts","util/PaperHelp.ts","Constants.ts","logic/LogicPin.tsx","components/Pin.tsx","logic/LogicState.ts","components/Connection.tsx","logic/LogicConnection.tsx","enums/GateType.ts","logic/LogicGate.tsx","logic/Bulb.tsx","components/Part.tsx","components/PartsDrawer.tsx","components/Board.tsx","logic/LogicBoard.tsx","components/App.tsx","index.tsx"],"names":["LogicFlag","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Sidebar","props","state","open","sidebarClasses","this","push","className","join","onMouseLeave","e","handleMouseExit","onMouseEnter","handleMouseEnter","content","onClick","handleMouseDown","setState","prevState","prevProps","React","Component","logicComponent","geometry","position","x","y","rotation","handlers","onGateMouseDown","onGateMouseUp","onGateContextMenu","pins","map","p","render","gate","classNames","body","selected","subtype","uuid","transform","getTransforms","d","onMouseDown","onMouseUp","onMouseMove","onGateMouseMove","onContextMenu","extraRender","PartType","LogicComponent","params","__fieldWidth","__width","__d","flags","type","scope","board","delay","inputPins","outputPins","uuidv4","width","fieldWidth","Group","Point","remove","setUpBody","pivot","applyMatrix","setUpPins","addChild","addChildren","exportSVG","getAttribute","data","logic","flag","bitMask","numBits","setUpInputPins","setUpSelectorPins","setUpOutputPins","updateGeometry","pin","postEvent","clearPins","removeComponent","getRenderParams","bind","undefined","onPinMouseDown","onPinMouseUp","onPinMouseMove","onPinContextMenu","makeAndSetupScope","paper","PaperScope","setup","PinOrientation","PinType","GLOBAL_SCOPE","OR_PATH","Pin","pathAttributes","anchor","console","log","cx","cy","r","LogicState","v","z","other","mask","Connection","i","ix","iy","o","ox","oy","ic","icx","icy","oc","ocx","ocy","end1_1","end1_2","end2_1","end2_2","fillRule","LogicConnection","source","sink","hidden","connections","delete","removeConnection","ianchor","idir","oanchor","odir","Math","min","getDistance","add","multiply","connection","GateType","LogicPin","parent","connectionAnchor","not","orientation","pinType","Map","LEFT","INPUT","operate","OUTPUT","updateNext","Error","values","inputPin","ne","setLogicState","forEach","c","clear","canConnect","isConnectedTo","disconnect","set","connectTo","has","pos","CompoundPath","Path","NOT_PATH","UP","rotate","DOWN","RIGHT","translate","subtract","logical","matrix","divide","isNot","NAND","NOR","XNOR","NOT","AND","OR","XOR","BUF","LogicGate","GATE","opFunc","opFuncs","value","unknown","zeroes","opAnd","negate","opOr","opXor","logicState","Constants","pathFromGateType","slice","offset","spacing","length","prototype","opNand","opNor","opXnor","opBuf","opNot","UNKNOWN","Bulb","on","display","bottom","bounds","Part","label","component","make","PartsDrawer","part","element","left","top","height","id","replace","draggable","onDragStart","handleDragStart","onDragEnd","handleDragEnd","viewBox","elem","document","getElementById","center","dataTransfer","setDragImage","effectAllowed","parts","renderPart","Board","ref","resizeObserer","sPoint","select","viewPort","scaleFactor","pan","drag","createRef","entries","contentRect","current","ResizeObserver","onResize","observe","patternUnits","strokeWidth","fill","stopColor","selectionBox","handleGateMouseDown","handleGateMouseUp","handleGateContextMenu","handlePinMouseDown","renderedConnections","renderedComponents","components","style","xmlns","onWheel","handleWheel","handleMouseMove","handleMouseUp","onDragEnter","handleDragEnter","onDragOver","handleDragOver","onDrop","handleDrop","preserveAspectRatio","onScroll","defs","renderGrid","vectorEffect","project","selectedItems","rect","currentTarget","getBoundingClientRect","l","t","w","h","localX","pageX","localY","pageY","dLocalX","movementX","dLocalY","movementY","viewWidth","viewHeight","viewRelativeX","viewRelativeY","rx","ry","dx","dy","stopPropagation","preventDefault","getViewCoordinates","addComponent","clearSelection","Rectangle","Size","item","selectionRect","clone","isSelected","intersects","isInside","contains","getItems","s","dp","sx","sy","segments","point","sc","forceUpdate","newScaleFactor","between","pow","deltaY","newWidth","newHeight","newViewBox","includes","shiftKey","logicPin","numOutputs","filter","makeConnection","a","b","addConnection","max","LogicBoard","App","ReactDOM","StrictMode"],"mappings":"yPAmBKA,E,iCCLUC,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,iDCuDCQ,E,kDAhDb,WAAYC,GAAgB,IAAD,8BACzB,cAAMA,IACDC,MAAQ,CACXC,MAAM,GAHiB,E,0CAO3B,WAAU,IAAD,OACHC,EAAiB,CAAC,WAItB,OAHKC,KAAKH,MAAMC,MACdC,EAAeE,KAAK,aAGlB,sBAAKC,UAAWH,EAAeI,KAAK,KAC/BC,aAAc,SAACC,GAAD,OAAO,EAAKC,gBAAgBD,IAD/C,UAGE,qBAAKH,UAAU,SACVK,aAAc,SAACF,GAAD,OAAO,EAAKG,iBAAiBH,MAEhD,qBAAKH,UAAU,kBAAf,SACGF,KAAKJ,MAAMa,UAEd,qBAAKP,UAAU,UAAf,SACE,wBAAQA,UAAU,SACVQ,QAAS,SAACL,GAAD,OAAO,EAAKM,gBAAgBN,IAD7C,sB,8BAQV,SAAiBA,GACfL,KAAKY,SAAS,CAACd,MAAM,M,6BAGvB,SAAgBO,GACdL,KAAKY,SAAS,CAACd,MAAM,M,6BAGvB,SAAgBO,GACdL,KAAKY,UAAS,SAACC,EAAWC,GACxB,MAAO,CACLhB,MAAOe,EAAUf,a,GA3CHiB,IAAMC,W,+ICiEbA,E,kDAlDX,WAAYpB,GAA6B,IAAD,8BACpC,cAAMA,IAEDC,MAAQ,GAHuB,E,iDASxC,WACI,MAAaG,KAAKJ,MAAMqB,eAAeC,SAASC,SAA3CC,EAAL,EAAKA,EAAGC,EAAR,EAAQA,EAGR,MAAO,CAFa,oBAAgBD,EAAhB,YAAqBC,EAArB,KACA,iBAAarB,KAAKJ,MAAMqB,eAAeC,SAASI,SAAhD,MACwBnB,KAAK,O,oBAGrD,WACI,MAAuEH,KAAKJ,MAAM2B,SAAvBA,GAA3D,EAAKC,gBAAL,EAAsBC,cAAtB,EAAqCC,kBAArC,kBAGIC,EADY3B,KAAKJ,MAAMqB,eAAeU,OACrBC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,OAAOP,MAEnCQ,EAAO/B,KAAKJ,MAAMqB,eAGlBe,EAAa,CAAC,aAMlB,OARWD,EAAKE,KAIPC,UACLF,EAAW/B,KAAK,YAIhB,oBAAGC,UAAW8B,EAAW7B,KAAK,KAC3B,aAAY4B,EAAKI,QACjB,YAAWJ,EAAKK,KAChBC,UAAWrC,KAAKsC,gBAHnB,UAKI,sBAAMC,EAAGR,EAAKQ,EACRC,YAAaxC,KAAKJ,MAAM2B,SAASC,gBACjCiB,UAAWzC,KAAKJ,MAAM2B,SAASE,cAC/BiB,YAAa1C,KAAKJ,MAAM2B,SAASoB,gBACjCC,cAAe5C,KAAKJ,MAAM2B,SAASG,oBAExCK,EAAKc,cACLlB,S,GA7COZ,IAAMC,Y,SHVzB/B,O,iCAAAA,I,yBAAAA,I,yBAAAA,I,+BAAAA,I,8BAAAA,I,cAAAA,I,qBAAAA,M,SIlBA6D,EJmRUC,E,WAnMb,WAAsBC,GAA+B,IAAD,6BAxB5CC,aAAuB,EAwBqB,KAvB5CC,aAuB4C,OAtB5CC,IAAc,GAsB8B,KArB5CC,WAqB4C,OAnB3ChB,UAmB2C,OAlB3CiB,UAkB2C,OAjB3ClB,aAiB2C,OAhB3CmB,WAgB2C,OAfpDC,WAeoD,OARpDC,WAQoD,OANpDvB,UAMoD,OAJpDf,cAIoD,OAHpDuC,UAAwB,GAG4B,KAFpDC,WAAyB,GAIvB1D,KAAKoC,KAAOuB,cACZ3D,KAAKsD,MAAQN,EAAOM,MACpBtD,KAAKoD,MAAQJ,EAAOI,MACpBpD,KAAKqD,KAAOL,EAAOK,KACnBrD,KAAKmC,QAAUa,EAAOb,QACtBnC,KAAKwD,MAAQ,EACbxD,KAAKkD,QAAL,UAAeF,EAAOY,aAAtB,QAA+B,EAE/B5D,KAAKuD,MAAQP,EAAOO,MAEpBvD,KAAK6D,WAAL,UAAkBb,EAAOa,kBAAzB,QAAuC,E,kDAIzC,SAAeA,GACb,MAAqB7D,KAAKsD,MAArBQ,EAAL,EAAKA,MAAOC,EAAZ,EAAYA,MACR/D,KAAKiC,MACPjC,KAAKiC,KAAK+B,SAEZhE,KAAKiC,KAAOjC,KAAKiE,UAAUJ,GAEtB7D,KAAKkB,WACRlB,KAAKkB,SAAW,IAAI4C,EACpB9D,KAAKkB,SAASgD,MAAQ,IAAIH,EAAM,EAAG,GACnC/D,KAAKkB,SAASiD,aAAc,GAG9BnE,KAAKoE,UAAUP,GACf7D,KAAKkB,SAASmD,SAASrE,KAAKiC,MAC5BjC,KAAKkB,SAASoD,YAAYtE,KAAK2B,OAAOC,KAAI,SAAAC,GAAC,OAAIA,EAAEX,aAEjDlB,KAAKmD,IAAOnD,KAAKiC,KAAKsC,YAA2BC,aAAa,KAE9DxE,KAAKiC,KAAKwC,KAAO,CACfpB,KAAM,YACNqB,MAAO1E,KACPkB,SAAUlB,KAAKkB,Y,yBAKnB,SAAYyD,GACV,OAA+B,KAAvB3E,KAAKoD,MAAQuB,K,yBAIvB,SAAYA,GACV3E,KAAKoD,OAASuB,I,2BAIhB,SAAcA,GACZ3E,KAAKoD,OAASpD,KAAK4E,QA3HL,IA2H0BD,I,qBAQ1C,SAAQE,GAA2B,IAAD,EAEhC,OAAQ,IADRA,EAAO,UAAGA,SAAH,QAAc7E,KAAK4D,QACF,I,kBAI1B,WACE,MAAM,GAAN,mBACO5D,KAAKyD,WADZ,YAEOzD,KAAK0D,e,uBASd,WAAY,oBAEM1D,KAAK2B,QAFX,IAEV,2BAA6B,SACvBqC,UAHI,8BAMVhE,KAAKyD,UAAY,GACjBzD,KAAK0D,WAAa,K,uBAIpB,SAAUG,GACR7D,KAAKyD,UAAL,sBAAqBzD,KAAK8E,eAAejB,IAAzC,YAAyD7D,KAAK+E,kBAAkBlB,KAChF7D,KAAK0D,WAAa1D,KAAKgF,gBAAgBnB,K,4BAIzC,SAAeA,GACb,MAAO,K,6BAIT,SAAgBA,GACd,MAAO,K,+BAIT,SAAkBA,GAChB,MAAO,K,sBAQT,WACE,OAAO7D,KAAKiD,c,IANd,SAAeY,GACb7D,KAAKiF,eAAepB,GACpB7D,KAAKiD,aAAeY,I,iBAetB,WACE,OAAO7D,KAAKkD,S,IATd,SAAUU,GAEJ5D,KAAKkD,UAAYU,IAGrB5D,KAAKkD,QAAUU,K,aAQjB,WACE,OAAO5D,KAAKmD,M,uBAId,SAAUtD,EAAmBqF,GAAiB,IAAD,IAC3CA,EAAG,UAAGA,SAAH,QAAUlF,KAAK0D,WAAW,GAC7B,UAAA1D,KAAKuD,aAAL,SAAY4B,UAAUtF,EAAOqF,EAAKlF,KAAKwD,S,oBAIzC,WAAU,IAAD,EACPxD,KAAKoF,mBACEpF,KAAKiC,KAAKwC,KAAKC,MACtB1E,KAAKiC,KAAK+B,SACVhE,KAAKkB,SAAS8C,SACd,UAAAhE,KAAKuD,aAAL,SAAY8B,gBAAgBrF,KAAKoC,Q,yBAQnC,WACE,MAAO,K,oBAIT,SAAOb,GACL,OACI,cAAC,EAAD,eAEQvB,KAAKsF,gBAAgB/D,IADpBvB,KAAKoC,Q,6BAMpB,SAAgBb,GAAoD,IAAD,QACjE,MAAO,CACL8B,KAAMrD,KAAKmC,QACXlB,eAAgBjB,KAChBsD,MAAOtD,KAAKsD,MACZ/B,SAAU,CACRC,gBAAe,OAAED,QAAF,IAAEA,GAAF,UAAEA,EAAUC,uBAAZ,aAAE,EAA2B+D,UAAKC,EAAWxF,MAC5DyB,cAAa,OAAEF,QAAF,IAAEA,GAAF,UAAEA,EAAUE,qBAAZ,aAAE,EAAyB8D,UAAKC,EAAWxF,MACxD2C,gBAAe,OAAEpB,QAAF,IAAEA,GAAF,UAAEA,EAAUoB,uBAAZ,aAAE,EAA2B4C,UAAKC,EAAWxF,MAC5D0B,kBAAiB,OAAEH,QAAF,IAAEA,GAAF,UAAEA,EAAUG,yBAAZ,aAAE,EAA6B6D,UAAKC,EAAWxF,MAChEyF,eAAc,OAAElE,QAAF,IAAEA,OAAF,EAAEA,EAAUkE,eAC1BC,aAAY,OAAEnE,QAAF,IAAEA,OAAF,EAAEA,EAAUmE,aACxBC,eAAc,OAAEpE,QAAF,IAAEA,OAAF,EAAEA,EAAUoE,eAC1BC,iBAAgB,OAAErE,QAAF,IAAEA,OAAF,EAAEA,EAAUqE,uB,eIxQ/B9C,O,qBAAAA,I,eAAAA,I,iBAAAA,I,mBAAAA,I,2CAAAA,I,wCAAAA,M,KASUA,QCHR,SAAS+C,IACd,IAAIvC,EAAQ,IAAIwC,IAAMC,WAGtB,OADAzC,EAAM0C,QACC1C,ECTF,ICQK2C,EASAC,EDjBCC,EAAeN,IAGfO,EAAU,kEE8DRC,E,kDAtCX,WAAYzG,GAAkB,IAAD,8BACzB,cAAMA,IACDC,MAAQ,GAFY,E,0CAI7B,WAAU,IAAD,MACD4E,EAAOzE,KAAKJ,MAAMsF,IAAIhE,SAAUuD,KACpCzE,KAAKJ,MAAMsF,IAAIhE,SAAUuD,KAAO,GAEhC,IAAIlC,EAAIvC,KAAKJ,MAAMsF,IAAIhE,SAAUqD,YAAYC,aAAa,KAC1DxE,KAAKJ,MAAMsF,IAAIhE,SAAUuD,KAAOA,EAChC,IAAI6B,EAAiB,CACjB/D,EAAGA,GAGHP,EAAa,CACb,QAGJ,UAAIhC,KAAKJ,MAAMsF,IAAIhE,gBAAnB,aAAI,EAAyBgB,WACzBF,EAAW/B,KAAK,YAGpB,IAAKsG,EAAL,YAAiBvG,KAAKJ,MAAMsF,IAAIqB,OAAhC,MAGA,OACI,oBAA6BrG,UAAW8B,EAAW7B,KAAK,KACrDqC,YAAW,UAAExC,KAAKJ,MAAM2B,gBAAb,aAAE,EAAqBkE,eAClChD,UAAS,UAAEzC,KAAKJ,MAAM2B,gBAAb,aAAE,EAAqBmE,aAChC9C,cAAe,kBAAM4D,QAAQC,IAAI,eAHpC,UAKI,wBAAQvG,UAAU,SAASwG,GAAIH,EAAOnF,EAAGuF,GAAIJ,EAAOlF,EAAGuF,EAAG,IAC1D,oCAAUN,MANNtG,KAAKJ,MAAMsF,IAAI9C,U,GA3BjBrB,IAAMC,WCoCT6F,E,WAxCb,WAAY7D,GAAkB,IAAD,+BAN7B8D,OAM6B,OAJ7B1F,OAI6B,OAF7B2F,OAE6B,EAC3B/G,KAAK8G,EAAL,UAAS9D,EAAO8D,SAAhB,QAAqB,EACrB9G,KAAKoB,EAAL,UAAS4B,EAAO5B,SAAhB,QAAqB,EACrBpB,KAAK+G,EAAL,UAAS/D,EAAO+D,SAAhB,QAAqB,E,sCAGvB,SAAGC,GACD,OACIhH,KAAK8G,IAAME,EAAMF,GACjB9G,KAAKoB,IAAM4F,EAAM5F,GACjBpB,KAAK+G,IAAMC,EAAMD,I,gBAIvB,SAAGC,GACD,OACIhH,KAAK8G,IAAME,EAAMF,GACjB9G,KAAKoB,IAAM4F,EAAM5F,GACjBpB,KAAK+G,IAAMC,EAAMD,I,oBAavB,SAAOlC,GAEL,IAAIoC,GAAQ,GAAKpC,GAAW,EAG5B7E,KAAK8G,GAAK9G,KAAK8G,GAAK9G,KAAKoB,GAAKpB,KAAK+G,EAAIE,M,KCW5BC,E,4JAzCb,WAEE,MAAqBlH,KAAKJ,MAAMuH,EAAxBC,EAAR,EAAKhG,EAAUiG,EAAf,EAAYhG,EACZ,EAAqBrB,KAAKJ,MAAM0H,EAAxBC,EAAR,EAAKnG,EAAUoG,EAAf,EAAYnG,EAEZ,EAAuBrB,KAAKJ,MAAM6H,GAA1BC,EAAR,EAAKtG,EAAWuG,EAAhB,EAAatG,EACb,EAAuBrB,KAAKJ,MAAMgI,GAA1BC,EAAR,EAAKzG,EAAW0G,EAAhB,EAAazG,EAMT0G,EAAM,YAAQX,EAJV,EAIE,YAAkBC,EAAlB,cAJF,EAIE,YAJF,EAIE,oBAA4CD,EAJ9C,EAIE,YAAsDC,EAAtD,KACNW,EAAM,YALF,EAKE,YALF,EAKE,oBAA0BZ,EAL5B,EAKE,YAAoCC,EAApC,KACNY,EAAM,YAAQV,EANV,EAME,YAAkBC,EAAlB,cANF,EAME,YANF,EAME,oBAA4CD,EAN9C,EAME,YAAsDC,EAAtD,KACNU,EAAM,YAPF,EAOE,YAPF,EAOE,oBAA0BX,EAP5B,EAOE,YAAoCC,EAApC,KAENjF,EAAC,UAAMwF,EAAN,YAAgBC,EAAhB,cAA4BZ,EAA5B,YAAkCC,EAAlC,cAA0CK,EAA1C,YAAiDC,EAAjD,YAAwDE,EAAxD,YAA+DC,EAA/D,YAAsEP,EAAtE,YAA4EC,EAA5E,YAAkFS,EAAlF,YAA4FC,GAWjG,OACI,8BACE,sBAAMhI,UAAU,mBAAmBqC,EAAGA,IACtC,sBAAM4F,SAAS,UACXjI,UAAU,yBAAyBqC,EAAGA,IAC1C,sBAAM4F,SAAS,UACXjI,UAAU,uBAAuBqC,EAAGA,W,GAnCzBxB,IAAMC,WC6BhBoH,E,WAjCb,WAAYpF,GAAkB,IAAD,6BAN7BZ,UAM6B,OAL7BiG,YAK6B,OAJ7BC,UAI6B,OAH7BC,YAG6B,OAF7BhF,WAE6B,EAC3BvD,KAAKoC,KAAL,UAAYY,EAAOZ,YAAnB,QAA2BuB,cAC3B3D,KAAKqI,OAASrF,EAAOqF,OACrBrI,KAAKsI,KAAOtF,EAAOsF,KACnBtI,KAAKuI,OAAL,UAAcvF,EAAOuF,cAArB,SACAvI,KAAKuD,MAAQP,EAAOO,M,0CAGtB,WAAU,IAAD,EACPvD,KAAKqI,OAAOG,YAAYC,OAAOzI,KAAKoC,MACpCpC,KAAKsI,KAAKE,YAAYC,OAAOzI,KAAKoC,MAClC,UAAApC,KAAKuD,aAAL,SAAYmF,iBAAiB1I,KAAKoC,Q,oBAGpC,WACE,kBAAsBpC,KAAKqI,OAAO9B,OAAlC,GAAKoC,EAAL,KAAcC,EAAd,KACA,cAAsB5I,KAAKsI,KAAK/B,OAAhC,GAAKsC,EAAL,KAAcC,EAAd,KAEAH,EAAU3I,KAAKqI,OAAOhG,UAAUsG,GAChCE,EAAU7I,KAAKsI,KAAKjG,UAAUwG,GAE9B,IAAItG,EAAIwG,KAAKC,IAAIL,EAAQM,YAAYJ,GAAU,IAE3CpB,EAAKkB,EAAQO,IAAIN,EAAKO,SAAS5G,IAC/BqF,EAAKiB,EAAQK,IAAIJ,EAAKK,SAAS5G,IAEnC,OACI,cAAC,EAAD,CAA4B6G,WAAYpJ,KAAMmH,EAAGwB,EAASrB,EAAGuB,EAASpB,GAAIA,EAAIG,GAAIA,GAAjE5H,KAAKoC,U,eJ1ClB6D,O,qBAAAA,I,WAAAA,I,eAAAA,I,eAAAA,I,kBAAAA,M,cASAC,O,qBAAAA,I,iBAAAA,I,oBAAAA,M,SKlBPmD,ELgPUC,E,WAvLb,WAAYtG,GAAkB,IAAD,+BAZrBuG,YAYqB,OAXrBC,sBAWqB,OAVpBpH,UAUoB,OAT7BmB,WAS6B,OAR7BK,WAQ6B,OAP7B1C,cAO6B,OAN7BuI,SAM6B,OAL7BC,iBAK6B,OAJ7BC,aAI6B,OAH7B9J,WAG6B,OAF7B2I,YAAwE,IAAIoB,IAG1E5J,KAAKoC,KAAOuB,cACZ3D,KAAKuJ,OAASvG,EAAOuG,OACrBvJ,KAAK4D,MAAL,UAAaZ,EAAOY,aAApB,QAA6B,EAC7B5D,KAAK0J,YAAL,UAAmB1G,EAAO0G,mBAA1B,QAAyCzD,EAAe4D,KACxD7J,KAAK2J,QAAU3G,EAAO2G,QACtB3J,KAAKyJ,IAAL,UAAWzG,EAAOyG,WAAlB,SACAzJ,KAAKH,MAAQ,IAAIgH,EAAW,IAC5B7G,KAAKuD,MAAQP,EAAOO,M,iDAItB,SAAc1D,GAEZ,OADAG,KAAKH,MAAQA,EACLG,KAAK2J,SACX,KAAKzD,EAAQ4D,MACX9J,KAAKuJ,OAAOQ,UACZ,MACF,KAAK7D,EAAQ8D,OACXhK,KAAKiK,aACL,MACF,QACE,MAAM,IAAIC,S,wBAKhB,WACE,GAAIlK,KAAK2J,UAAYzD,EAAQ8D,OAC3B,MAAM,IAAIE,MAFD,oBAKYlK,KAAKwI,YAAY2B,UAL7B,IAKX,2BAAkD,CAAC,IAC7CC,EAD4C,QACtB9B,KAEtBtI,KAAKH,MAAMwK,GAAGD,EAASvK,QACzBuK,EAASE,cAActK,KAAKH,QATrB,iC,wBAeb,WACEG,KAAKwI,YAAY+B,SAAQ,SAACC,GAAD,OAAOA,EAAExG,YAClChE,KAAKwI,YAAYiC,U,wBAInB,SAAWzD,GACT,GAAIhH,KAAK4D,QAAUoD,EAAMpD,MACvB,OAAO,EAGT,OAAQ5D,KAAK2J,SACX,KAAKzD,EAAQ4D,MACX,OAAO9C,EAAM2C,UAAYzD,EAAQ8D,OACnC,KAAK9D,EAAQ8D,OACX,OAAOhD,EAAM2C,UAAYzD,EAAQ4D,MAGrC,OAAO,I,uBAIT,SAAU9C,GACR,IAAKhH,KAAK0K,WAAW1D,GACnB,OAAO,KAGT,GAAIhH,KAAK2J,UAAYzD,EAAQ4D,MAAO,CAClC,GAAI9J,KAAK2K,cAAc3D,GACrB,OAAO,KAEPhH,KAAK4K,aAEP,IAAIxB,EAAa,IAAIhB,EAAgB,CAACC,OAAQrB,EAAOsB,KAAMtI,KAAMuD,MAAOvD,KAAKuD,QAI7E,OAHAvD,KAAKwI,YAAYqC,IAAIzB,EAAWhH,KAAMgH,GACtCpC,EAAMwB,YAAYqC,IAAIzB,EAAWhH,KAAMgH,GACvCpJ,KAAKsK,cAActD,EAAMnH,OAClBuJ,EAEP,OAAOpC,EAAM8D,UAAU9K,Q,2BAK3B,SAAcgH,GACZ,OAAOhH,KAAKwI,YAAYuC,IAAI/D,EAAM5E,Q,oBAGpC,WAAU,IAAD,IACPpC,KAAK4K,aACL,UAAA5K,KAAKkB,gBAAL,SAAe8C,SACf,UAAOhE,KAAKkB,gBAAZ,cAAO,EAAeuD,KAAKC,Q,oBAG7B,SAAOnD,GACL,OACI,cAAC,EAAD,eACSvB,KAAKsF,gBAAgB/D,IADpBvB,KAAKoC,Q,6BAMrB,SAAgBb,GAAwC,IAAD,QACrD,MAAO,CACL2D,IAAKlF,KACLqD,KAAMrD,KAAK2J,QACXpI,SAAU,CACRmE,aAAY,OAAEnE,QAAF,IAAEA,GAAF,UAAEA,EAAUmE,oBAAZ,aAAE,EAAwBH,UAAKC,EAAWxF,MACtDyF,eAAc,OAAElE,QAAF,IAAEA,GAAF,UAAEA,EAAUkE,sBAAZ,aAAE,EAA0BF,UAAKC,EAAWxF,MAC1D2F,eAAc,OAAEpE,QAAF,IAAEA,GAAF,UAAEA,EAAUoE,sBAAZ,aAAE,EAA0BJ,UAAKC,EAAWxF,MAC1D4F,iBAAgB,OAAErE,QAAF,IAAEA,GAAF,UAAEA,EAAUqE,wBAAZ,aAAE,EAA4BL,UAAKC,EAAWxF,U,4BAMpE,SAAegL,GACVhL,KAAKkB,UACNlB,KAAKkB,SAAS8C,SAEhB,IACIkB,EADJ,EAAkClF,KAAKuJ,OAAOjG,MAAzC2H,EAAL,EAAKA,aAAcC,EAAnB,EAAmBA,KAAMnH,EAAzB,EAAyBA,MASzB,QANEmB,EADElF,KAAKyJ,IACD,IAAIwB,ED5KYE,wHC8KhB,IAAID,EDhLQ,+CCkLhBhH,MAAQ,IAAIH,EAAM,EAAG,GAEjB/D,KAAK0J,aACX,KAAKzD,EAAemF,GAClBlG,EAAImG,QAAQ,IACZrL,KAAKwJ,iBAAmB,IAAIzF,EAAM,GAAI,IACtC,MACF,KAAKkC,EAAeqF,KAClBpG,EAAImG,OAAO,IACXrL,KAAKwJ,iBAAmB,IAAIzF,EAAM,EAAG,IACrC,MACF,KAAKkC,EAAe4D,KAClB3E,EAAImG,OAAO,KACXrL,KAAKwJ,iBAAmB,IAAIzF,GAAO,GAAI,GACvC,MACF,KAAKkC,EAAesF,MAClBvL,KAAKwJ,iBAAmB,IAAIzF,EAAM,GAAI,GACtC,MACF,QACE,MAAM,IAAImG,MAAM,2BAGpBhF,EAAIsG,UAAUR,GACdhL,KAAKkB,SAAWgE,EAAIuG,SAASzL,KAAKuJ,OAAOtH,MACzCiD,EAAIlB,SACJhE,KAAKkB,SAASuD,KAAKpB,KAAO,MAC1BrD,KAAKkB,SAASuD,KAAKiH,QAAU1L,O,uBAI/B,SAAU6B,GACR,OAAO7B,KAAKuJ,OAAOrI,SAASyK,OAAOtJ,UAAUR,K,oBAG/C,WACE,OAAO7B,KAAKuJ,OAAOrI,SAASI,W,eAG9B,WACE,OAAOtB,KAAKkB,SAAUC,W,kBAQxB,WACE,MAAO,CACLnB,KAAKgL,IAAI9B,IAAIlJ,KAAKwJ,kBAClBxJ,KAAKwJ,iBAAkB6B,OAAOrL,KAAKsB,SAAU,IAAItB,KAAKuJ,OAAOjG,MAAMS,MAAM,EAAG,IAAI6H,OAAO,S,eK5OxFvC,O,qBAAAA,I,aAAAA,I,eAAAA,I,WAAAA,I,aAAAA,I,aAAAA,I,eAAAA,I,aAAAA,I,cAAAA,M,KAYUA,I,EAAAA,ICiBf,SAASwC,EAAMxI,GACb,OAAQA,GACN,KAAKgG,EAASyC,KACd,KAAKzC,EAAS0C,IACd,KAAK1C,EAAS2C,KACd,KAAK3C,EAAS4C,IACZ,OAAO,EACT,KAAK5C,EAAS6C,IACd,KAAK7C,EAAS8C,GACd,KAAK9C,EAAS+C,IACd,KAAK/C,EAASgD,IACZ,OAAO,EACT,QACE,MAAMnC,MAAM,0B,IAOZoC,E,kDAeJ,WAAYtJ,GAAkB,IAAD,8BAC3B,2BAAOI,MAAO,EAAGC,KAAMP,EAASyJ,KAAM1I,WAAY,GAAMb,KAHzCwJ,YAEY,EAE3B,EAAKA,OAASF,EAAUG,QAAQ,EAAKtK,SAASoD,KAAhC,gBAFa,E,yCAM7B,WACE,IADkB,EACdmH,EAAQ1M,KAAK4E,UACb+H,EAAU,EAIVC,EAAS,EANK,cAQF5M,KAAKyD,WARH,IAQlB,2BAAgC,CAAC,IAAxByB,EAAuB,QAE5B0H,KAAY1H,EAAIrF,MAAMiH,EAAI5B,EAAIrF,MAAMuB,EAAI8D,EAAIrF,MAAMkH,GAClD2F,GAASxH,EAAIrF,MAAMiH,EACnB6F,GAAWzH,EAAIrF,MAAMuB,EAErBuL,GAAWzH,EAAIrF,MAAMkH,GAdP,8BAqBlB,OAAO,IAAIF,EAAW,CACpBC,EAAG4F,EACHtL,EAJFuL,IAAYC,EAKV7F,EArBmB,M,oBAyBvB,WACE,IAAIlH,EAAQG,KAAK6M,QAEjB,OADAhN,EAAMiN,OAAO9M,KAAK4D,OACX/D,I,kBAGT,WACE,IADgB,EACZ6M,EAAQ,EACRC,EAAU,EAFE,cAKA3M,KAAKyD,WALL,IAKhB,2BAAgC,CAAC,IAAxByB,EAAuB,QAC9BwH,GAASxH,EAAIrF,MAAMiH,EACnB6F,GAAWzH,EAAIrF,MAAMuB,EAErBuL,GAAWzH,EAAIrF,MAAMkH,GATP,8BAiBhB,OAAO,IAAIF,EAAW,CACpBC,EAAG4F,EACHtL,EAJFuL,IAAYD,EAKV3F,EAjBmB,M,mBAqBvB,WACE,IAAIlH,EAAQG,KAAK+M,OAEjB,OADAlN,EAAMiN,OAAO9M,KAAK4D,OACX/D,I,mBAGT,WACE,IADkB,EACd6M,EAAQ,EACRC,EAAU,EAFI,cAKF3M,KAAKyD,WALH,IAKlB,2BAAgC,CAAC,IAAxByB,EAAuB,QAC9BwH,GAASxH,EAAIrF,MAAMiH,EACnB6F,GAAWzH,EAAIrF,MAAMuB,EAErBuL,GAAWzH,EAAIrF,MAAMkH,GATL,8BAclB,OAAO,IAAIF,EAAW,CACpBC,EAAG4F,GAASC,EACZvL,EAAGuL,EACH5F,EAdmB,M,oBAkBvB,WACE,IAAIlH,EAAQG,KAAKgN,QAEjB,OADAnN,EAAMiN,OAAO9M,KAAK4D,OACX/D,I,mBAGT,WACE,IAAKuK,EAAL,YAAkBpK,KAAKyD,UAAvB,MACIiJ,EAAQtC,EAASvK,MAAMiH,EACvB6F,EAAUvC,EAASvK,MAAMuB,EAAIgJ,EAASvK,MAAMkH,EAGhD,OAAO,IAAIF,EAAW,CACpBC,EAAG4F,EACHtL,EAAGuL,EACH5F,EALmB,M,mBASvB,WACE,IAAKqD,EAAL,YAAkBpK,KAAKyD,UAAvB,MACIkJ,EAAUvC,EAASvK,MAAMuB,EAAIgJ,EAASvK,MAAMkH,EAC5C2F,GAAStC,EAASvK,MAAMiH,EAAI9G,KAAK4E,WAAa+H,EAGlD,OAAO,IAAI9F,EAAW,CACpBC,EAAG4F,EACHtL,EAAGuL,EACH5F,EALmB,M,qBASvB,WACE,IAAIkG,EAAajN,KAAKwM,SACtBxM,KAAKmF,UAAU8H,EAAYjN,KAAK0D,WAAW,M,uBAI7C,WAEE,OAAO,IAAIuH,EADUjL,KAAKsD,MAArB2H,cAzLT,SAA0B5H,GACxB,OAAQA,GACN,KAAKgG,EAAS6C,IACd,KAAK7C,EAASyC,KACZ,MPVkB,qDOWpB,KAAKzC,EAAS8C,GACd,KAAK9C,EAAS0C,IACZ,OAAOmB,EACT,KAAK7D,EAAS+C,IACd,KAAK/C,EAAS2C,KACZ,MPbkB5F,oGOcpB,KAAKiD,EAASgD,IACd,KAAKhD,EAAS4C,IACZ,MPfkB,+BOgBpB,QACE,MAAM/B,MAAM,0BA2KUiD,CAAiBnN,KAAKmC,Y,4BAGhD,SAAe0B,GAEb,IAAIJ,EAAYzD,KAAKyD,UAAU2J,MAAM,EAAGvJ,GAC7B7D,KAAKyD,UAAU2J,MAAMvJ,GAC3B0G,SAAQ,SAAA1I,GAAC,OAAIA,EAAEmC,YAEpB,IAAK,IAAImD,EAAInH,KAAK6D,WAAYsD,EAAItD,IAAcsD,EAC9C1D,EAAUxD,KAAK,IAAIqJ,EAAS,CAC1BC,OAAQvJ,KACR2J,QAASzD,EAAQ4D,MACjBJ,YAAazD,EAAe4D,KAC5BtG,MAAOvD,KAAKuD,SAahB,IATA,IAAI8J,EACe,IAAfxJ,EAAmB,GAAK,EACL,IAAfA,EAAmB,EACf,EACRyJ,EACe,IAAfzJ,EAAmB,GAAK,EACL,IAAfA,EAAmB,GACf,GAAK,EAERsD,EAAI,EAAGA,EAAItD,IAAcsD,EAChC1D,EAAU0D,GAAGlC,eAAe,IAAIa,IAAM/B,MAAM,EAAGsJ,EAASlG,EAAImG,IAG9D,OAAO7J,I,6BAGT,WACE,GAAIzD,KAAK0D,WAAW6J,OAAS,EAC3B,OAAOvN,KAAK0D,WAEd,IAAIwB,EAAM,IAAIoE,EAAS,CACrBC,OAAQvJ,KACR2J,QAASzD,EAAQ8D,OACjBN,YAAazD,EAAesF,MAC5B9B,IAAKoC,EAAM7L,KAAKmC,SAChBoB,MAAOvD,KAAKuD,QAId,OAFA2B,EAAID,eAAe,IAAIa,IAAM/B,MAAM,GAAI,KAEhC,CAACmB,O,GAjMYnC,GAAlBuJ,EACGG,S,mBACJpD,EAAS6C,IAAMI,EAAUkB,UAAUX,O,cACnCxD,EAASyC,KAAOQ,EAAUkB,UAAUC,Q,cACpCpE,EAAS8C,GAAKG,EAAUkB,UAAUT,M,cAClC1D,EAAS0C,IAAMO,EAAUkB,UAAUE,O,cACnCrE,EAAS+C,IAAME,EAAUkB,UAAUR,O,cACnC3D,EAAS2C,KAAOM,EAAUkB,UAAUG,Q,cACpCtE,EAASgD,IAAMC,EAAUkB,UAAUI,O,cACnCvE,EAAS4C,IAAMK,EAAUkB,UAAUK,O,cACnCxE,EAASyE,SAAU,WAAO,MAAM,IAAI5D,MAAM,uB,GA2LhCoC,Q,iBCnMAyB,E,kDAtCb,WAAY/K,GAAkB,IAAD,8BAC3B,yCAAUA,GAAV,IAAkBK,KAAMP,EAASkH,OAAQ5G,MAAO,MAFlD4K,IAAc,EACe,E,2CAI7B,WACEhO,KAAKgO,GAAmC,IAA9BhO,KAAKyD,UAAU,GAAG5D,MAAMiH,I,yBAIpC,WAGE,IAAImH,EAAUjO,KAAKgO,GAAK,OAAS,OACjC,MAAO,CACH,wBAAgB9N,UAAW,YAAawG,GAAI,GAAIC,GAAI,GAAIC,EAAG,GAAIqH,QAASA,GAA3D,M,uBAInB,WACE,OAAO,IAAIjO,KAAKsD,MAAM4H,KR9BD,sU,4BQiCvB,SAAerH,GACb,IAAKqK,EAAUlO,KAAKiC,KAAKkM,OAApBD,OACDhJ,EAAM,IAAIoE,EAAS,CACrBC,OAAQvJ,KACR2J,QAASzD,EAAQ4D,MACjBJ,YAAazD,EAAeqF,KAC5B/H,MAAOvD,KAAKuD,QAId,OADA2B,EAAID,eAAe,IAAIa,IAAM/B,MAAM,GAAImK,IAChC,CAAChJ,O,GAlCOnC,GCKbqL,E,WAOJ,WAAYpL,GAAqB,IAAD,2BANvBb,aAMuB,OALvBkB,UAKuB,OAJvBgL,WAIuB,OAFhCC,eAEgC,EAC9BtO,KAAKqD,KAAOL,EAAOK,KACnBrD,KAAKmC,QAAUa,EAAOb,QACtBnC,KAAKqO,MAAL,UAAarL,EAAOqL,aAApB,QAA6B,aAC7BrO,KAAKsO,UAAYtO,KAAKuO,O,wCAGxB,SAAKhL,GAAqC,IAAD,EACnCD,EAAK,iBAAGC,QAAH,IAAGA,OAAH,EAAGA,EAAOD,aAAV,QAAmB6C,EAC5B,OAAQnG,KAAKqD,MACX,KAAKP,EAASyJ,KACZ,OAAO,IAAID,EAAU,CAACnK,QAASnC,KAAKmC,QAASmB,MAAOA,EAAOC,MAAOA,IACpE,KAAKT,EAASkH,OACZ,OAAO,IAAI+D,EAAK,CAAC5L,QAAS,EAAGoB,MAAOA,EAAOD,MAAOA,IACpD,QACE,MAAM4G,MAAM,8B,KAtBdkE,EAIG3J,U,EAuBM2J,QC0BAI,E,gKAtDb,SAAWC,GACT,IAAIH,EAAYG,EAAKH,UACjBI,EAAUJ,EAAUxM,SACnBuM,EAASI,EAATJ,MACL,EAAiCC,EAAUpN,SAASiN,OAA/CQ,EAAL,EAAKA,KAAMC,EAAX,EAAWA,IAAKhL,EAAhB,EAAgBA,MAAOiL,EAAvB,EAAuBA,OACvBF,GAAQ,EACRC,GAAO,EACPhL,GAAS,EACTiL,GAAU,EAEV,IAAIC,EAAKT,EAAMU,QAAQ,IAAK,KAC5B,OACI,sBAAK7O,UAAU,OAEV8O,WAAS,EACTC,YAAajP,KAAKkP,gBAAgB3J,KAAKvF,KAAM8O,EAAIL,GACjDU,UAAWnP,KAAKoP,cAAc7J,KAAKvF,MAJxC,UAME,qBAAKE,UAAU,uBAAf,SACE,qBAAKA,UAAU,aAAa4O,GAAIA,EAAIO,QAAO,UAAKV,EAAL,YAAaC,EAAb,YAAoBhL,EAApB,YAA6BiL,GAAUjL,MAAOA,EAAOiL,OAAQA,EAAxG,SACGH,MAGL,qBAAKxO,UAAU,aAAf,SAA6BmO,MAVrBC,EAAUlM,Q,6BAe1B,SAAgB0M,EAAYL,EAAYpO,GACtC+N,EAAK3J,KAAOgK,EAEZ,IAAIa,EAAOC,SAASC,eAAeV,GAEnC,EAAaL,EAAKH,UAAUpN,SAASiN,OAAOsB,OAAvCrO,EAAL,EAAKA,EAAGC,EAAR,EAAQA,EAERhB,EAAEqP,aAAaC,aAAaL,EAAMlO,EAAE,EAAGC,EAAE,GACzChB,EAAEqP,aAAaE,cAAgB,S,2BAIjC,WACExB,EAAK3J,UAAOe,I,oBAGd,WACE,OACI,qBAAKtF,UAAU,SAAf,SACGF,KAAKJ,MAAMiQ,MAAMjO,IAAI5B,KAAK8P,WAAWvK,KAAKvF,a,GAjD3Be,IAAMC,WC6jBjB+O,G,wDAtgBX,WAAYnQ,GAA0B,IAAD,8BACjC,cAAMA,IANFoQ,SAK6B,IAJ7BC,mBAI6B,IAH7BC,YAG6B,IAF7BC,YAE6B,EAGjC,EAAKA,OAAS,KAEd,EAAKtQ,MAAQ,CACTwP,QAAS,CACLV,KAAM,EACNC,IAAK,EACLhL,MAAO,IACPiL,OAAQ,KAEZuB,SAAU,CACRxM,MAAO,EACPiL,OAAQ,GAEVwB,YAAa,EACbC,KAAK,EACLC,MAAM,GAGV,EAAKP,IAAMjP,IAAMyP,YArBgB,E,4CAyBrC,SAASC,GACL,MAAsBA,EAAQ,GAAGC,YAA5B9M,EAAL,EAAKA,MAAOiL,EAAZ,EAAYA,OACZ7O,KAAKY,UAAS,SAACf,GACX,MAAO,CACHuQ,SAAU,CACNxM,MAAOA,EACPiL,OAAQA,GAEZQ,QAAS,CACLV,KAAM9O,EAAMwP,QAAQV,KACpBC,IAAK/O,EAAMwP,QAAQT,IACnBhL,MAAOA,EAAQ/D,EAAMwQ,YACrBxB,OAAQA,EAAShP,EAAMwQ,mB,+BAYvC,WACIrQ,KAAKY,SAAS,IACd,IAAI2C,EAAQvD,KAAKgQ,IAAIW,QACrB3Q,KAAKiQ,cAAgB,IAAIW,eAAe5Q,KAAK6Q,SAAStL,KAAKvF,OAC3DA,KAAKiQ,cAAca,QAAQvN,K,kCAQ/B,WAAwB,IAAD,EACnB,UAAAvD,KAAKiQ,qBAAL,SAAoBrF,e,kBAIxB,WACI,OACI,iCACI,0BAASkE,GAAG,OAAO1N,EAAG,EAAGC,EAAG,EAAGuC,MAAO,GAAIiL,OAAQ,GAAIQ,QAAQ,YAAY0B,aAAa,iBAAvF,UACI,sBAAM7Q,UAAU,OAAOqC,EAAE,eAAeyO,YAAY,MACpD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,QACtD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,QACtD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,QACtD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,QACtD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,QACtD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,QACtD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,QACtD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,MAEtD,sBAAM9Q,UAAU,OAAOqC,EAAE,eAAeyO,YAAY,MACpD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,QACtD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,QACtD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,QACtD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,QACtD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,QACtD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,QACtD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,QACtD,sBAAM9Q,UAAU,OAAOqC,EAAE,iBAAiByO,YAAY,SAG1D,0BAASlC,GAAG,MAAM1N,EAAG,EAAGC,EAAG,EAAGuC,MAAO,EAAGiL,OAAQ,EAAGQ,QAAQ,UAAU0B,aAAa,iBAAlF,UACI,sBAAM3P,EAAG,EAAGC,EAAG,EAAGuC,MAAO,EAAGiL,OAAQ,EAAGoC,KAAK,UAC5C,sBAAM7P,EAAG,EAAGC,EAAG,EAAGuC,MAAO,EAAGiL,OAAQ,EAAGoC,KAAK,UAC5C,sBAAM7P,EAAG,EAAGC,EAAG,EAAGuC,MAAO,EAAGiL,OAAQ,EAAGoC,KAAK,aAGhD,iCAAgBnC,GAAG,YAAnB,UACI,sBAAMzB,OAAO,KAAK6D,UAAU,uBAC5B,sBAAM7D,OAAO,OAAO6D,UAAU,gCA/B5B,U,wBAsClB,WACI,IAAMvC,EAAO3O,KAAKH,MAAMwP,QAAQV,KAC5B/K,EAAQ5D,KAAKH,MAAMwP,QAAQzL,MAC3BgL,EAAM5O,KAAKH,MAAMwP,QAAQT,IACzBC,EAAS7O,KAAKH,MAAMwP,QAAQR,OAEhC,OAAO,sBAAiBzN,EAAGuN,EAAMtN,EAAGuN,EAAKhL,MAAOA,EAAOiL,OAAQA,EAAQoC,KAAK,cAA3D,U,oBAGrB,WAAU,IAAD,WACCtC,EAAO3O,KAAKH,MAAMwP,QAAQV,KAC5B/K,EAAQ5D,KAAKH,MAAMwP,QAAQzL,MAC3BgL,EAAM5O,KAAKH,MAAMwP,QAAQT,IACzBC,EAAS7O,KAAKH,MAAMwP,QAAQR,OAE5BsC,EAAY,UAAInR,KAAKmQ,cAAT,iBAAI,EAAa5L,mBAAjB,aAAG,EAA0CC,aAAa,KAEtEjD,EAA0D,CAC1DC,gBAAiBxB,KAAKoR,oBAAoB7L,KAAKvF,MAC/CyB,cAAezB,KAAKqR,kBAAkB9L,KAAKvF,MAC3C0B,kBAAmB1B,KAAKsR,sBAAsB/L,KAAKvF,MACnDyF,eAAgBzF,KAAKuR,mBAAmBhM,KAAKvF,OAG7CwR,EAAqC,GACzCxR,KAAKJ,MAAM2D,MAAMiF,YAAY+B,SAAQ,SAACC,GAAD,OAAOgH,EAAoBvR,KAAKuK,EAAE1I,aAEvE,IAAI2P,EAAoC,GAMxC,OALAzR,KAAKJ,MAAM2D,MAAMmO,WAAWnH,SAAQ,SAACC,GAAD,OAAOiH,EAAmBxR,KAAKuK,EAAE1I,OAAOP,OAMxE,qBACIyO,IAAKhQ,KAAKgQ,IACV2B,MAAO,CACH/N,MAAO,OACPiL,OAAQ,QAJhB,SAOI,qBAAK3O,UAAU,gBAAgByR,MAAO3R,KAAKH,MAAMuQ,SAC5CwB,MAAM,6BACNC,QAAS,SAACxR,GAAD,OAAM,EAAKyR,YAAYzR,IAChCqC,YAAa,SAACrC,GAAD,OAAO,EAAK0R,gBAAgB1R,IACzCmC,YAAa,SAACnC,GAAD,OAAO,EAAKM,gBAAgBN,IACzCoC,UAAW,SAACpC,GAAD,OAAO,EAAK2R,cAAc3R,IACrCD,aAAc,SAACC,GAAD,OAAO,EAAKC,gBAAgBD,IAC1C4R,YAAajS,KAAKkS,gBAAgB3M,KAAKvF,MACvCmS,WAAY,SAAC9R,GAAD,OAAO,EAAK+R,eAAe/R,IACvCgS,OAAQ,SAAChS,GAAD,OAAO,EAAKiS,WAAWjS,IATpC,SAWI,sBAAKH,UAAU,QACVqS,oBAAoB,iBACpBX,MAAM,6BACNvC,QAAO,UAAKV,EAAL,YAAaC,EAAb,YAAoBhL,EAApB,YAA6BiL,GACpC2D,SAAU,kBAAMhM,QAAQC,IAAI,WAJjC,UAMKzG,KAAKyS,OACLzS,KAAK0S,aACN,wBAAQxS,UAAW,SAAUkB,EAAE,IAAIC,EAAE,IAAIuF,EAAE,KAAKqK,KAAK,QACpDO,EACAC,EACAN,GACD,sBAAMjR,UAAU,SAASqC,EAAG4O,EAAcwB,aAAa,gC,4BAS3E,WAAkB,IAAD,gBACG3S,KAAKsD,MAAMsP,QAAQC,eADtB,IACb,IAAI,EAAJ,qBAAkD,SACzC3Q,UAAW,GAFP,iC,gCAOjB,SAAmB7B,GACf,IAAIyS,EAAOzS,EAAE0S,cAAcC,wBACrBC,EAAIH,EAAKnE,KACXuE,EAAIJ,EAAKlE,IACTuE,EAAIL,EAAKlP,MACTwP,EAAIN,EAAKjE,OAEPwE,EAAShT,EAAEiT,MAAQL,EACrBM,EAASlT,EAAEmT,MAAQN,EAEjBO,EAAUpT,EAAEqT,UACdC,EAAUtT,EAAEuT,UAEVC,EAAY7T,KAAKH,MAAMwP,QAAQzL,MACjCkQ,EAAa9T,KAAKH,MAAMwP,QAAQR,OAE9BkF,EAAgBV,EAASF,EAC3Ba,EAAgBT,EAASH,EAM7B,MAAO,CACHhS,EANQpB,KAAKH,MAAMwP,QAAQV,KAAOoF,EAAgBF,EAOlDxS,EANQrB,KAAKH,MAAMwP,QAAQT,IAAMoF,EAAgBF,EAOjDG,GAAIF,EACJG,GAAIF,EACJG,GARKV,EAAUN,EAAIU,EASnBO,GARKT,EAAUP,EAAIU,K,wBAe3B,SAAWzT,GACPA,EAAEgU,kBACFrU,KAAKY,SAAS,CAAC2P,MAAM,M,yBAGzB,SAAYlQ,GACRA,EAAEgU,kBACFrU,KAAKY,SAAS,CAAC2P,MAAM,M,6BAGzB,SAAgBlQ,GACZA,EAAEiU,iBACFjU,EAAEqP,aAAaE,cAAgB,S,4BAGnC,SAAevP,GACXA,EAAEiU,iBACFjU,EAAEqP,aAAaE,cAAgB,S,wBAGnC,SAAWvP,GACPA,EAAEiU,iBACF,MAAatU,KAAKuU,mBAAmBlU,GAAhCe,EAAL,EAAKA,EAAGC,EAAR,EAAQA,EACJoN,EAAOL,EAAK3J,KAChB,GAAKgK,EAAL,CAGA,IAAIH,EAAYG,EAAKF,KAAKvO,KAAKJ,MAAM2D,OACrC+K,EAAUpN,SAASsK,UAAU,IAAI1F,IAAM/B,MAAM3C,EAAI,GAAIC,EAAI,KAEzDrB,KAAKJ,MAAM2D,MAAMiR,aAAalG,GAE9BtO,KAAKY,SAAS,O,6BAGlB,SAAgBP,GACZA,EAAEiU,iBACFjU,EAAEgU,kBAEFrU,KAAKyU,iBACL,MAAuCzU,KAAKJ,MAAM2D,MAAMD,MAAjD4H,EAAP,EAAOA,KAAMnH,EAAb,EAAaA,MAAO2Q,EAApB,EAAoBA,UAAWC,EAA/B,EAA+BA,KAE/B,EAAe3U,KAAKuU,mBAAmBlU,GAAhCe,EAAP,EAAOA,EAAGC,EAAV,EAAUA,EACVrB,KAAKkQ,OAAS,IAAInM,EAAM3C,EAAGC,GAC3B,IAAIyR,EAAO,IAAI4B,EAAU1U,KAAKkQ,OAAQ,IAAIyE,EAAK,EAAG,IAClD3U,KAAKmQ,OAAS,IAAIjF,EAAKwJ,UAAU5B,GACjC9S,KAAKY,SAAS,M,2BAGlB,SAAcP,GACVA,EAAEiU,iBACFjU,EAAEgU,kBAEErU,KAAKmQ,SACLnQ,KAAKmQ,OAAOnM,SACZhE,KAAKmQ,OAAS,MAGlBnQ,KAAKY,SAAS,CAAC0P,KAAK,EAAOC,MAAM,M,6BAGrC,SAAgBlQ,GAERL,KAAKmQ,SACLnQ,KAAKmQ,OAAOnM,SACZhE,KAAKmQ,OAAS,MAElBnQ,KAAKY,SAAS,CAAC0P,KAAK,EAAOC,MAAM,M,wBAGrC,SAAWqE,GACP,IAAMzE,EAASnQ,KAAKmQ,OACd0E,EAAgB1E,EAAOhC,OACzB2G,EAAQF,EAAKE,QACjBA,EAAMzS,UAAUuS,EAAKrL,OAAOoC,QAC5B,IAAIoJ,EAAaD,EAAME,WAAW7E,IAAW2E,EAAMG,SAASJ,IAAkBC,EAAMI,SAASL,EAAcpF,QAQ3G,OAPAqF,EAAM9Q,SAOC+Q,I,6BAGX,SAAgB1U,GACZ,MAAqBL,KAAKuU,mBAAmBlU,GAAxCe,EAAL,EAAKA,EAAGC,EAAR,EAAQA,EAAG8S,EAAX,EAAWA,GAAIC,EAAf,EAAeA,GAEf,GAAIpU,KAAKH,MAAM0Q,KAAM,CACjBlQ,EAAEgU,kBACFhU,EAAEiU,iBAEF,IAJiB,EAIbpS,EAAWlC,KAAKJ,MAAM2D,MAAMD,MAAMsP,QAAQuC,SAAS,CACnDjT,UAAU,EACVuC,KAAM,CACFpB,KAAM,eAPG,cAWHnB,GAXG,IAWjB,2BAAwB,CAAC,IAAhBkT,EAAe,QAChBC,EAAK,IAAIvP,IAAM/B,MAAMoQ,EAAIC,GAC7BgB,EAAE7L,OAAOiC,UAAU6J,IAbN,8BAkBjBrV,KAAKY,SAAS,IAIlB,GAAIZ,KAAKmQ,QAAUnQ,KAAKkQ,OAAQ,CAC5B,IAAIC,EAASnQ,KAAKmQ,OAClB,EAAiB,CAACnQ,KAAKkQ,OAAO9O,EAAGpB,KAAKkQ,OAAO7O,GAAtCiU,EAAP,KAAWC,EAAX,KAEA,GAAInU,IAAMkU,GAAMjU,IAAMkU,EAAI,CAAC,IAAD,gBACRpF,EAAOqF,UADC,IACtB,2BAA+B,SACzBC,MAAQzV,KAAKkQ,QAFG,+BAMtB9O,GAAKkU,IACLnF,EAAOqF,SAAS,GAAGC,MAAMrU,EAAIA,EAC7B+O,EAAOqF,SAAS,GAAGC,MAAMrU,EAAIA,EAC7B+O,EAAOqF,SAAS,GAAGC,MAAMrU,EAAIkU,EAC7BnF,EAAOqF,SAAS,GAAGC,MAAMrU,EAAIkU,GAE7BlU,GAAKkU,IACLnF,EAAOqF,SAAS,GAAGC,MAAMrU,EAAIkU,EAC7BnF,EAAOqF,SAAS,GAAGC,MAAMrU,EAAIkU,EAC7BnF,EAAOqF,SAAS,GAAGC,MAAMrU,EAAIA,EAC7B+O,EAAOqF,SAAS,GAAGC,MAAMrU,EAAIA,GAE7BC,GAAKkU,IACLpF,EAAOqF,SAAS,GAAGC,MAAMpU,EAAIkU,EAC7BpF,EAAOqF,SAAS,GAAGC,MAAMpU,EAAIA,EAC7B8O,EAAOqF,SAAS,GAAGC,MAAMpU,EAAIA,EAC7B8O,EAAOqF,SAAS,GAAGC,MAAMpU,EAAIkU,GAE7BlU,GAAKkU,IACLpF,EAAOqF,SAAS,GAAGC,MAAMpU,EAAIA,EAC7B8O,EAAOqF,SAAS,GAAGC,MAAMpU,EAAIkU,EAC7BpF,EAAOqF,SAAS,GAAGC,MAAMpU,EAAIkU,EAC7BpF,EAAOqF,SAAS,GAAGC,MAAMpU,EAAIA,GAGjC,IAnC4B,EAmCrBuR,EAAW5S,KAAKJ,MAAM2D,MAAMD,MAA5BsP,QAEHlB,EAAakB,EAAQuC,SAAS,CAC9B1Q,KAAM,CACFpB,KAAM,eAIVqS,GAAK,EA3CmB,cA6CNhE,GA7CM,IA6C5B,2BAAkC,CAAC,IAA1BpD,EAAyB,QAC1BtO,KAAK+U,WAAWzG,IAChBoH,GAAK,EACLpH,EAAUpM,UAAW,GAErBoM,EAAUpM,UAAW,GAlDD,8BAsD5B,IAtD4B,EAsDxBP,EAAOiR,EAAQuC,SAAS,CACxB1Q,KAAM,CACFpB,KAAM,SAxDc,cA4DZ1B,GA5DY,IA4D5B,2BAAsB,CAAC,IAAduD,EAAa,QAClBA,EAAIhD,UAAYwT,GAAM1V,KAAK+U,WAAW7P,IA7Dd,8BAgE5BlF,KAAKY,SAAS,IACdZ,KAAK2V,cAGL3V,KAAKH,MAAMyQ,KACXtQ,KAAKY,SAAS,CACVyO,QAAS,CACLT,IAAK5O,KAAKH,MAAMwP,QAAQT,IAAMwF,EAC9BzF,KAAM3O,KAAKH,MAAMwP,QAAQV,KAAOwF,EAChCvQ,MAAO5D,KAAKH,MAAMwP,QAAQzL,MAC1BiL,OAAQ7O,KAAKH,MAAMwP,QAAQR,Y,yBAU3C,SAAYxO,GACR,MAAqBL,KAAKuU,mBAAmBlU,GAAxCe,EAAL,EAAKA,EAAGC,EAAR,EAAQA,EAAG4S,EAAX,EAAWA,GAAIC,EAAf,EAAeA,GAETL,EAAY7T,KAAKH,MAAMuQ,SAASxM,MAChCkQ,EAAa9T,KAAKH,MAAMuQ,SAASvB,OAIhCwB,EAAerQ,KAAKH,MAApBwQ,YAEDuF,EAAiB7F,EAAM8F,QAJX,EAAI,GAI0B9M,KAAK+M,IAAI,EAAGzV,EAAE0V,OAAS,KAAQ1F,EAH7D,GAIZ2F,EAAWnC,EAAY+B,EACvBK,EAAYnC,EAAa8B,EAEzBM,EAAa,CACfvH,KAAMvN,EAAI6S,EAAK+B,EACfpH,IAAKvN,EAAI6S,EAAK+B,EACdrS,MAAOoS,EACPnH,OAAQoH,GAGZjW,KAAKY,SAAS,CACVyP,YAAauF,EACbvG,QAAS6G,M,iCAKjB,SAAoBjV,EAAgCZ,GAChDA,EAAEiU,iBACFjU,EAAEgU,kBAEF7N,QAAQC,IAAI,aACZ,IAAIvE,EAAWlC,KAAKJ,MAAM2D,MAAMD,MAAMsP,QAAQuC,SAAS,CACnDjT,UAAU,IAGVD,EAAOhB,EAAegB,KAE1B,IAAKC,EAASiU,SAASlU,GAAO,CAAC,IAAD,gBACJC,GADI,IAC1B,2BAAgC,SAClBA,UAAW,GAFC,8BAI1BD,EAAKC,UAAW,EAGpBlC,KAAKY,SAAS,CAAC2P,MAAM,M,+BAGzB,SAAkBtP,EAAgCZ,GAC9CA,EAAEiU,iBACF9N,QAAQC,IAAI,a,mCAGhB,SAAsBxF,EAAgCZ,GAC9CA,EAAE+V,WAGN/V,EAAEgU,kBACFhU,EAAEiU,iBACF9N,QAAQC,IAAI,iB,gCAGhB,SAAmB4P,EAAoBhW,GACnCA,EAAEgU,kBACFhU,EAAEiU,iBAEF,IAEI3S,EAFY3B,KAAKJ,MAAM2D,MAAMD,MAA5BsP,QAEcuC,SAAS,CACxBjT,UAAU,EACVuC,KAAM,CACFpB,KAAM,SAEXzB,KAAI,SAAAC,GAAC,OAAIA,EAAE4C,KAAKiH,WAEf4K,EAAa3U,EAAK4U,QAAO,SAAA1U,GAAC,OAAIA,EAAE8H,UAAYzD,EAAQ8D,UAAQuD,OAEhE,GADA/G,QAAQC,IAAR,uBAA4B6P,IACxBA,GAAc,EAAG,CAAC,IAAD,gBACF3U,GADE,IACjB,IAAI,EAAJ,qBAAqB,CAAC,IAAduD,EAAa,QACjBlF,KAAKwW,eAAetR,EAAKmR,IAFZ,kC,4BASzB,SAAeI,EAAaC,GACxBlQ,QAAQC,IAAI,yBACZ,IAAI2C,EAAaqN,EAAE3L,UAAU4L,GACzBtN,IACApJ,KAAKJ,MAAM2D,MAAMoT,cAAcvN,GAC/BpJ,KAAKY,SAAS,O,iBAItB,WACI,OAAOZ,KAAKJ,MAAM2D,MAAMD,S,sBArG5B,SAAemT,EAAYC,EAAWlM,GAClC,OAAOzB,KAAKC,IAAID,KAAK6N,IAAIH,EAAGC,GAAIlM,O,GApapBzJ,IAAMC,YCJX6V,E,iDA5CbnF,WAA0C,IAAI9H,I,KAE9CpB,YAA4C,IAAIoB,I,KAEhDtG,MAA0BuC,I,0CAE1B,WACE,OACI,cAAC,EAAD,CAAOtC,MAAOvD,S,uBAWpB,SAAUH,EAAmBqF,EAAe1B,M,0BAK5C,SAAa8K,GACXtO,KAAK0R,WAAW7G,IAAIyD,EAAUlM,KAAMkM,K,2BAItC,SAAclF,GACZpJ,KAAKwI,YAAYqC,IAAIzB,EAAWhH,KAAMgH,K,6BAIxC,SAAgBhH,GACdpC,KAAK0R,WAAWjJ,OAAOrG,K,8BAIzB,SAAiBA,GACfpC,KAAKwI,YAAYC,OAAOrG,O,KCXb0U,G,4MA5BLvT,MAAoB,IAAIsT,E,4CAEhC,WAEE,OACI,sBAAKlF,MAAO,CAAC/N,MAAO,OAAQiL,OAAQ,QAApC,UACE,gDACA,sBAAK8C,MAAO,CAAC/N,MAAO,OAAQiL,OAAQ,QAApC,UACE,cAAC,EAAD,CAASpO,QACP,cAAC,EAAD,CAAaoP,MAAO,CAClB,IAAIzB,EAAK,CAAC/K,KAAMP,EAASyJ,KAAMpK,QAASkH,EAAS6C,IAAKmC,MAAM,QAC5D,IAAID,EAAK,CAAC/K,KAAMP,EAASyJ,KAAMpK,QAASkH,EAASyC,KAAMuC,MAAM,SAC7D,IAAID,EAAK,CAAC/K,KAAMP,EAASyJ,KAAMpK,QAASkH,EAAS8C,GAAIkC,MAAM,OAC3D,IAAID,EAAK,CAAC/K,KAAMP,EAASyJ,KAAMpK,QAASkH,EAAS0C,IAAKsC,MAAM,QAC5D,IAAID,EAAK,CAAC/K,KAAMP,EAASyJ,KAAMpK,QAASkH,EAAS+C,IAAKiC,MAAM,QAC5D,IAAID,EAAK,CAAC/K,KAAMP,EAASyJ,KAAMpK,QAASkH,EAAS2C,KAAMqC,MAAM,SAC7D,IAAID,EAAK,CAAC/K,KAAMP,EAASyJ,KAAMpK,QAASkH,EAASgD,IAAKgC,MAAM,QAC5D,IAAID,EAAK,CAAC/K,KAAMP,EAASyJ,KAAMpK,QAASkH,EAAS4C,IAAKoC,MAAM,QAC5D,IAAID,EAAK,CAAC/K,KAAMP,EAASkH,OAAQ7H,QAAS,EAAGkM,MAAM,cAGtDrO,KAAKuD,MAAMzB,mB,GAtBNf,IAAMC,WCTxB+V,IAASjV,OACL,cAAC,IAAMkV,WAAP,UACE,cAAC,GAAD,MAEJzH,SAASC,eAAe,SAM1BtQ,M","file":"static/js/main.c96b7514.chunk.js","sourcesContent":["import React from \"react\";\r\nimport paper from \"paper\";\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nimport PartType from \"../enums/PartType\";\r\nimport GateType from \"../enums/GateType\";\r\nimport LogicPin from \"./LogicPin\";\r\nimport Component, {GateEventHandlers, GateProps} from \"../components/Component\";\r\nimport LogicState from \"./LogicState\";\r\nimport LogicBoard from \"./LogicBoard\";\r\n\r\n\r\nconst MAX_FLAGS = 32\r\n\r\n/**\r\n * Bit flags indicating rendering hints and allowable user interactions\r\n *\r\n * This was imported from a previous logic simulator project, and may be subject to change.\r\n * */\r\nenum LogicFlag {\r\n  VariableShape = 0x00000001,  // 1 << 0\r\n  IBussable = 0x00000002,      // 1 << 1\r\n  OBussable = 0x00000004,      // 1 << 2\r\n  SingleOutput = 0x00000008,   // 1 << 3\r\n  MergingPins = 0x00000010,    // 1 << 4\r\n  Mux = 0x00000020,            // 1 << 5\r\n  Bussed = 0x00000040,         // 1 << 6\r\n}\r\n\r\n\r\nexport interface LogicComponentParams {\r\n  /** Rendering and interaction hints as specified by LogicFlag */\r\n  flags: number;\r\n  /** The type of the component, required for serialization */\r\n  type: PartType;\r\n  /** The subtype of the component, required for serialization */\r\n  subtype: GateType;\r\n  /** The scope in which this component will be rendered and interacted with. */\r\n  scope: paper.PaperScope;\r\n  /**\r\n   * The number of input pins, excluding control pins.\r\n   *\r\n   * The specific meaning of this field depends on the specific LogicComponent implementation.\r\n   * */\r\n  fieldWidth?: number;\r\n  /** The number of bits of data handled on a single pin, excluding control pins. */\r\n  width?: number;\r\n  /** The logical board where rendering and interaction are done, and where logical events will be handled. */\r\n  board?: LogicBoard;\r\n}\r\n\r\n/**\r\n * Base class for all logical components which may or may not be rendered\r\n *\r\n * A logical component is any object which may send or receive logical signals.\r\n * */\r\nabstract class LogicComponent {\r\n  private __fieldWidth: number = 0;\r\n  private __width: number;\r\n  private __d: string = \"\";\r\n  private flags: number;\r\n  /** The unique id of this component, used for rendering, and serialization */\r\n  readonly uuid: string;\r\n  readonly type: PartType;\r\n  readonly subtype: GateType;\r\n  readonly scope: paper.PaperScope;\r\n  board?: LogicBoard;\r\n  /**\r\n   * The propagation delay of this component\r\n   *\r\n   * More specifically, the amount of time it takes for a change in one or more of the inputs of this component to be\r\n   * reflected in the outputs.\r\n   * */\r\n  delay: number;\r\n  /** The shape of this component used for rendering and interactions */\r\n  body!: paper.Item;\r\n  /** A grouping of this component's body and pins which stores translation and rotation information. */\r\n  geometry!: paper.Item;\r\n  inputPins: LogicPin[] = [];\r\n  outputPins: LogicPin[] = [];\r\n\r\n  protected constructor(params: LogicComponentParams) {\r\n\r\n    this.uuid = uuidv4();\r\n    this.scope = params.scope\r\n    this.flags = params.flags;\r\n    this.type = params.type;\r\n    this.subtype = params.subtype;\r\n    this.delay = 1;\r\n    this.__width = params.width ?? 1;\r\n\r\n    this.board = params.board;\r\n\r\n    this.fieldWidth = params.fieldWidth ?? 0;\r\n  }\r\n\r\n  /** Handler for updating this component's body and pins in response to property updates */\r\n  updateGeometry(fieldWidth: number) {\r\n    let {Group, Point} = this.scope;\r\n    if (this.body) {\r\n      this.body.remove()\r\n    }\r\n    this.body = this.setUpBody(fieldWidth);\r\n\r\n    if (!this.geometry) {\r\n      this.geometry = new Group();\r\n      this.geometry.pivot = new Point(0, 0);\r\n      this.geometry.applyMatrix = false;\r\n    }\r\n\r\n    this.setUpPins(fieldWidth);\r\n    this.geometry.addChild(this.body);\r\n    this.geometry.addChildren(this.pins().map(p => p.geometry as paper.Item));\r\n\r\n    this.__d = (this.body.exportSVG() as SVGElement).getAttribute('d')!;\r\n\r\n    this.body.data = {\r\n      type: 'Component',\r\n      logic: this,\r\n      geometry: this.geometry,\r\n    }\r\n  }\r\n\r\n  /** Checks if a property indicated by a LogicFlag is set */\r\n  hasProperty(flag: LogicFlag): boolean {\r\n    return (this.flags & flag) !== 0;\r\n  }\r\n\r\n  /** Sets a property indicated by a LogicFlag */\r\n  setProperty(flag: LogicFlag): void {\r\n    this.flags |= flag;\r\n  }\r\n\r\n  /** Unsets a property indicated by a LogicFlag */\r\n  clearProperty(flag: LogicFlag): void {\r\n    this.flags &= this.bitMask(MAX_FLAGS) ^ flag;\r\n  }\r\n\r\n  /**\r\n   * Creates a bitmask of the specified width\r\n   *\r\n   * If no width is specified, defaults to this component's width.\r\n   * */\r\n  bitMask(numBits?: number): number {\r\n    numBits = numBits ?? this.width;\r\n    return (1 << numBits) - 1;\r\n  }\r\n\r\n  /** Returns all pins associated with this component */\r\n  pins(): LogicPin[] {\r\n    return [\r\n        ...this.inputPins,\r\n        ...this.outputPins,\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * Removes all logical pins on this component\r\n   *\r\n   * Removed pins are disconnected from all other pins, and all events associated with the pin are purged.\r\n   * */\r\n  clearPins() {\r\n    //TODO(dpasillas): remove logic events associated with pins\r\n    for (let pin of this.pins()) {\r\n      pin.remove();\r\n    }\r\n\r\n    this.inputPins = [];\r\n    this.outputPins = [];\r\n  }\r\n\r\n  /** Sets up all pins required for this component */\r\n  setUpPins(fieldWidth: number) {\r\n    this.inputPins = [...this.setUpInputPins(fieldWidth), ...this.setUpSelectorPins(fieldWidth)];\r\n    this.outputPins = this.setUpOutputPins(fieldWidth);\r\n  }\r\n\r\n  /** Virtual method to set up input pins */\r\n  setUpInputPins(fieldWidth: number): LogicPin[] {\r\n    return [];\r\n  }\r\n\r\n  /** Virtual method to set up output pins. */\r\n  setUpOutputPins(fieldWidth: number): LogicPin[] {\r\n    return [];\r\n  }\r\n\r\n  /** Virtual method to set up selector pins, as required for -plexer type ICs. */\r\n  setUpSelectorPins(fieldWidth: number): LogicPin[] {\r\n    return []\r\n  }\r\n\r\n  set fieldWidth(fieldWidth: number) {\r\n    this.updateGeometry(fieldWidth)\r\n    this.__fieldWidth = fieldWidth\r\n  }\r\n\r\n  get fieldWidth(): number {\r\n    return this.__fieldWidth;\r\n  }\r\n\r\n  set width(width: number) {\r\n    // TODO(dpasillas): update geometry in response to width changes.\r\n    if (this.__width === width) {\r\n      return;\r\n    }\r\n    this.__width = width;\r\n  }\r\n\r\n  get width() {\r\n    return this.__width;\r\n  }\r\n\r\n  /** Path description of the component's body */\r\n  get d() {\r\n    return this.__d;\r\n  }\r\n\r\n  /** Sets the specified logical state on the specified pin after the propagation delay. */\r\n  postEvent(state: LogicState, pin?: LogicPin) {\r\n    pin = pin ?? this.outputPins[0];\r\n    this.board?.postEvent(state, pin, this.delay);\r\n  }\r\n\r\n  /** Delete this component, and all associated pins/connections */\r\n  remove() {\r\n    this.clearPins();\r\n    delete this.body.data.logic;\r\n    this.body.remove();\r\n    this.geometry.remove();\r\n    this.board?.removeComponent(this.uuid);\r\n  }\r\n\r\n  /**\r\n   * Virtual method to perform additional drawing on top of the base component\r\n   *\r\n   * For example, this may be used to draw pin labels, light from activated bulbs, or the interactive part of a button.\r\n   * */\r\n  extraRender(): React.ReactElement[] {\r\n    return [];\r\n  }\r\n\r\n  /** Maps this logical component to a React Component */\r\n  render(handlers?: GateEventHandlers): React.ReactElement {\r\n    return (\r\n        <Component\r\n            key={this.uuid}\r\n            {...this.getRenderParams(handlers)}/>\r\n    );\r\n  }\r\n\r\n  /** Specifies required properties for rendering */\r\n  getRenderParams(handlers?: GateEventHandlers): Required<GateProps> {\r\n    return {\r\n      type: this.subtype,\r\n      logicComponent: this,\r\n      scope: this.scope,\r\n      handlers: {\r\n        onGateMouseDown: handlers?.onGateMouseDown?.bind(undefined, this),\r\n        onGateMouseUp: handlers?.onGateMouseUp?.bind(undefined, this),\r\n        onGateMouseMove: handlers?.onGateMouseMove?.bind(undefined, this),\r\n        onGateContextMenu: handlers?.onGateContextMenu?.bind(undefined, this),\r\n        onPinMouseDown: handlers?.onPinMouseDown,\r\n        onPinMouseUp: handlers?.onPinMouseUp,\r\n        onPinMouseMove: handlers?.onPinMouseMove,\r\n        onPinContextMenu: handlers?.onPinContextMenu,\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Sets up the shape of this component */\r\n  abstract setUpBody(fieldWidth: number): paper.Item\r\n  /** Performs a logical operation */\r\n  abstract operate(): void\r\n}\r\n\r\nexport default LogicComponent;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport \"../css/Sidebar.css\"\r\n\r\ninterface IProps {\r\n  content: React.ReactElement | HTMLElement | string;\r\n}\r\ninterface IState {\r\n  open: boolean;\r\n}\r\n\r\n/**\r\n * Generic container which expands to show contents on mouse hover\r\n *\r\n * Needs work, and may be replaced.\r\n */\r\nclass Sidebar extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let sidebarClasses = [\"sidebar\"]\r\n    if (!this.state.open) {\r\n      sidebarClasses.push(\"collapsed\")\r\n    }\r\n    return (\r\n        <div className={sidebarClasses.join(' ')}\r\n             onMouseLeave={(e) => this.handleMouseExit(e)}\r\n        >\r\n          <div className=\"floaty\"\r\n               onMouseEnter={(e) => this.handleMouseEnter(e)}\r\n          />\r\n          <div className=\"sidebar-content\">\r\n            {this.props.content}\r\n          </div>\r\n          <div className=\"divider\">\r\n            <button className=\"handle\"\r\n                    onClick={(e) => this.handleMouseDown(e)}\r\n            >*</button>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  handleMouseEnter(e: React.MouseEvent<HTMLElement>) {\r\n    this.setState({open: true});\r\n  }\r\n\r\n  handleMouseExit(e: React.MouseEvent<HTMLElement>) {\r\n    this.setState({open: false});\r\n  }\r\n\r\n  handleMouseDown(e: React.MouseEvent<HTMLElement>) {\r\n    this.setState((prevState, prevProps) => {\r\n      return {\r\n        open: !prevState.open\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default Sidebar;","import React from \"react\";\r\nimport {PinEventHandlers} from \"./Pin\";\r\nimport paper from 'paper';\r\nimport GateType from \"../enums/GateType\";\r\nimport {ComponentMouseEventHandler, MouseEventHandler} from \"../util/Types\";\r\nimport LogicComponent from \"../logic/LogicComponent\";\r\n\r\nexport interface GateEventHandlers<T = ComponentMouseEventHandler> extends PinEventHandlers {\r\n    onGateMouseDown?: T;\r\n    onGateMouseUp?: T;\r\n    onGateMouseMove?: T;\r\n    onGateContextMenu?: T;\r\n}\r\n\r\nexport interface GateProps {\r\n    scope?: paper.PaperScope,\r\n    handlers: GateEventHandlers<MouseEventHandler>,\r\n    type: GateType,\r\n    logicComponent: LogicComponent,\r\n}\r\n\r\ninterface IState {}\r\n\r\n/**\r\n * React Component implementation of LogicComponent\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Component extends React.Component<GateProps, IState> {\r\n    constructor(props: Readonly<GateProps>) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Gets the translation and rotation transforms of the component.\r\n     */\r\n    getTransforms() {\r\n        let {x, y} = this.props.logicComponent.geometry.position\r\n        let offset_transform = `translate(${x} ${y})`\r\n        let rotate_transform = `rotate(${this.props.logicComponent.geometry.rotation})`\r\n        return [offset_transform, rotate_transform].join(' ')\r\n    }\r\n\r\n    render() {\r\n        let {onGateMouseDown, onGateMouseUp, onGateContextMenu, ...handlers} = this.props.handlers;\r\n\r\n        let logicPins = this.props.logicComponent.pins();\r\n        let pins = logicPins.map(p => p.render(handlers))\r\n\r\n        let gate = this.props.logicComponent;\r\n        let body = gate.body as paper.Item;\r\n\r\n        let classNames = ['component']\r\n\r\n        if (body.selected) {\r\n            classNames.push('selected')\r\n        }\r\n\r\n        return (\r\n            <g className={classNames.join(' ')}\r\n               data-ctype={gate.subtype}\r\n               data-uuid={gate.uuid}\r\n               transform={this.getTransforms()}\r\n            >\r\n                <path d={gate.d}\r\n                      onMouseDown={this.props.handlers.onGateMouseDown}\r\n                      onMouseUp={this.props.handlers.onGateMouseUp}\r\n                      onMouseMove={this.props.handlers.onGateMouseMove}\r\n                      onContextMenu={this.props.handlers.onGateContextMenu}\r\n                />\r\n                {gate.extraRender()}\r\n                {pins}\r\n            </g>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Component;","\r\nenum PartType {\r\n  UNKNOWN,\r\n  GATE,\r\n  INPUT,\r\n  OUTPUT,\r\n  COMPOSITE_BUILT_IN,\r\n  COMPOSITE_CUSTOM\r\n}\r\n\r\nexport default PartType;\r\n\r\n","import paper from \"paper\";\r\n\r\n/**\r\n * Creates and sets up a paper scope\r\n *\r\n * Primarily intended to allow initializing scopes inline as class or global variables.\r\n * */\r\nexport function makeAndSetupScope() {\r\n  let scope = new paper.PaperScope();\r\n  // @ts-ignore\r\n  scope.setup();\r\n  return scope;\r\n}","import {makeAndSetupScope} from \"./util/PaperHelp\";\r\n\r\nexport const GLOBAL_SCOPE = makeAndSetupScope();\r\nexport const BULB_PATH = \"M 27.3137084989848 27.3137084989848 A 16 16 90 1 0 4.68629150101524 27.3137084989848 Q 9.238107812 31.86552481 10.71553501 36 Q 11.21553501 37.39921453 11.71553501 40 C 12.21553501 42.60078547 19.78446499 42.60078547 20.28446499 40 Q 20.78446499 37.39921453 21.28446499 36 Q 22.76189219 31.86552481 27.3137085 27.3137085\";\r\nexport const AND_PATH = \"M 0 0 L 16 0 A 16 16 -180 0 1 16 32 L 0 32 L 0 0 Z\";\r\nexport const OR_PATH = \"M 0 0 L 8 0 Q 22.72 0 32 16 Q 22.72 32 8 32 L 0 32 Q 8 16 0 0 Z\";\r\nconst XOR_TAIL = \"M -4 0 Q 4 16 -4 32 Q 4 16 -4 0 Z\";\r\nexport const XOR_PATH = OR_PATH + \" \" + XOR_TAIL;\r\nexport const BUF_PATH = \"M 0 0 L 32 16 L 0 32 L 0 0 Z\";\r\nexport const PIN_PATH = \"M -4 -2 L 18.5 -2 L 20 0 L 18.5 2 L -4 2 Z\";\r\nexport const NOT_PATH = \"M -4 0 A 4 4 180 0 1 4 0 A 4 4 180 0 1 -4 0 Z\";\r\nexport const NOT_PIN_PATH = NOT_PATH + \" M 3.47 -2 L 18.5 -2 L 20 0 L 18.5 2 L 3.467 2 A 4 4 -20 0 0 3.467 -2 Z\";","import {v4 as uuidv4} from 'uuid';\r\nimport LogicComponent from \"./LogicComponent\";\r\nimport * as Constants from \"../Constants\";\r\nimport Pin, {PinEventHandlers, PinProps} from \"../components/Pin\";\r\nimport React from \"react\";\r\nimport LogicState from \"./LogicState\";\r\nimport LogicConnection from \"./LogicConnection\";\r\nimport * as paper from \"paper\";\r\nimport LogicBoard from \"./LogicBoard\";\r\n\r\nexport enum PinOrientation {\r\n  UNKNOWN,\r\n  UP,\r\n  DOWN,\r\n  LEFT,\r\n  RIGHT,\r\n}\r\n\r\n/** Indicates whether a pin receives or sends logic signals */\r\nexport enum PinType {\r\n  UNKNOWN,\r\n  INPUT,\r\n  OUTPUT,\r\n}\r\n\r\ninterface IParams {\r\n  /** LogicComponent which receives or sends signals from this pin */\r\n  parent: LogicComponent,\r\n  /** Indicates whether this pin receives or sends logic signals */\r\n  pinType: PinType,\r\n  /** Rendering hint to show a pin as negated */\r\n  not?: boolean,\r\n  /** The number of bits of data which may be received or transmitted by this pin */\r\n  width?: number,\r\n  /** Direction in which the pin is mounted on the parent */\r\n  orientation?: PinOrientation,\r\n  /** The board which processes events, and optionally renders this pin */\r\n  board?: LogicBoard,\r\n}\r\n\r\n/**\r\n * Logical representation of a pin which may or may not be rendered\r\n *\r\n * A pin is any input or output to/from a LogicComponent\r\n * */\r\nclass LogicPin {\r\n  private parent: LogicComponent;\r\n  private connectionAnchor?: paper.Point;\r\n  readonly uuid: string;\r\n  board?: LogicBoard;\r\n  width: number;\r\n  geometry?: paper.PathItem;\r\n  not: boolean;\r\n  orientation: PinOrientation;\r\n  pinType: PinType;\r\n  state: LogicState;\r\n  connections: Map<string /* UUID of connected pin */, LogicConnection> = new Map<string, LogicConnection>();\r\n\r\n  constructor(params: IParams) {\r\n    this.uuid = uuidv4();\r\n    this.parent = params.parent;\r\n    this.width = params.width ?? 1;\r\n    this.orientation = params.orientation ?? PinOrientation.LEFT;\r\n    this.pinType = params.pinType;\r\n    this.not = params.not ?? false;\r\n    this.state = new LogicState({});\r\n    this.board = params.board;\r\n  }\r\n\r\n  /** Helper function which causes logic states to propagate */\r\n  setLogicState(state: LogicState) {\r\n    this.state = state;\r\n    switch (this.pinType) {\r\n      case PinType.INPUT:\r\n        this.parent.operate();\r\n        break;\r\n      case PinType.OUTPUT:\r\n        this.updateNext();\r\n        break;\r\n      default:\r\n        throw new Error();\r\n    }\r\n  }\r\n\r\n  /** Updates all pins with connections leading from this pin */\r\n  updateNext() {\r\n    if (this.pinType !== PinType.OUTPUT) {\r\n      throw new Error();\r\n    }\r\n\r\n    for (let connection of this.connections.values()) {\r\n      let inputPin = connection.sink;\r\n      // No need to simulate events which won't affect the output\r\n      if (this.state.ne(inputPin.state)) {\r\n        inputPin.setLogicState(this.state)\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Removes all connections associated with this pin */\r\n  disconnect() {\r\n    this.connections.forEach((c) => c.remove());\r\n    this.connections.clear();\r\n  }\r\n\r\n  /** Indicates whether this pin may be connected to another */\r\n  canConnect(other: LogicPin) {\r\n    if (this.width !== other.width) {\r\n      return false;\r\n    }\r\n\r\n    switch (this.pinType) {\r\n      case PinType.INPUT:\r\n        return other.pinType === PinType.OUTPUT;\r\n      case PinType.OUTPUT:\r\n        return other.pinType === PinType.INPUT;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** Creates a connection between this pin with another */\r\n  connectTo(other: LogicPin): LogicConnection | null {\r\n    if (!this.canConnect(other)) {\r\n      return null;\r\n    }\r\n\r\n    if (this.pinType === PinType.INPUT) {\r\n      if (this.isConnectedTo(other)) {\r\n        return null;\r\n      } else {\r\n        this.disconnect()\r\n      }\r\n      let connection = new LogicConnection({source: other, sink: this, board: this.board})\r\n      this.connections.set(connection.uuid, connection);\r\n      other.connections.set(connection.uuid, connection);\r\n      this.setLogicState(other.state);\r\n      return connection;\r\n    } else {\r\n      return other.connectTo(this);\r\n    }\r\n  }\r\n\r\n  /** Tests if connection exists between this pin and another */\r\n  isConnectedTo(other: LogicPin): boolean {\r\n    return this.connections.has(other.uuid);\r\n  }\r\n\r\n  remove() {\r\n    this.disconnect()\r\n    this.geometry?.remove();\r\n    delete this.geometry?.data.logic\r\n  }\r\n\r\n  render(handlers?: PinEventHandlers): React.ReactElement {\r\n    return (\r\n        <Pin key={this.uuid}\r\n             {...this.getRenderParams(handlers)}\r\n        />\r\n    )\r\n  }\r\n\r\n  getRenderParams(handlers?: PinEventHandlers): PinProps {\r\n    return {\r\n      pin: this,\r\n      type: this.pinType,\r\n      handlers: {\r\n        onPinMouseUp: handlers?.onPinMouseUp?.bind(undefined, this),\r\n        onPinMouseDown: handlers?.onPinMouseDown?.bind(undefined, this),\r\n        onPinMouseMove: handlers?.onPinMouseMove?.bind(undefined, this),\r\n        onPinContextMenu: handlers?.onPinContextMenu?.bind(undefined, this),\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Places the pin at a location on the parent, and subtracts the parent's body from its geometry. */\r\n  updateGeometry(pos: paper.Point) {\r\n    if(this.geometry) {\r\n      this.geometry.remove()\r\n    }\r\n    let {CompoundPath, Path, Point} = this.parent.scope;\r\n    let pin;\r\n    if (this.not) {\r\n      pin = new CompoundPath(Constants.NOT_PIN_PATH)\r\n    } else {\r\n      pin = new Path(Constants.PIN_PATH);\r\n    }\r\n    pin.pivot = new Point(0, 0);\r\n\r\n    switch (this.orientation) {\r\n      case PinOrientation.UP:\r\n        pin.rotate(-90);\r\n        this.connectionAnchor = new Point(0, -18);\r\n        break;\r\n      case PinOrientation.DOWN:\r\n        pin.rotate(90);\r\n        this.connectionAnchor = new Point(0, 18);\r\n        break;\r\n      case PinOrientation.LEFT:\r\n        pin.rotate(180);\r\n        this.connectionAnchor = new Point(-18, 0);\r\n        break;\r\n      case PinOrientation.RIGHT:\r\n        this.connectionAnchor = new Point(18, 0);\r\n        break;\r\n      default:\r\n        throw new Error(\"Unknown pin orientation\")\r\n    }\r\n\r\n    pin.translate(pos);\r\n    this.geometry = pin.subtract(this.parent.body as paper.PathItem);\r\n    pin.remove();\r\n    this.geometry.data.type = 'Pin'\r\n    this.geometry.data.logical = this;\r\n  }\r\n\r\n  /** Maps a point from local coordinates to svg coordinates */\r\n  transform(p: paper.Point): paper.Point {\r\n    return this.parent.geometry.matrix.transform(p);\r\n  }\r\n\r\n  get rotation(): number {\r\n    return this.parent.geometry.rotation;\r\n  }\r\n\r\n  get pos(): paper.Point {\r\n    return this.geometry!.position\r\n  }\r\n\r\n  /**\r\n   * Returns a tuple containing a point near the end of the pin, and the direction the pin is pointing\r\n   *\r\n   * This information is used to render connections, and interaction aids.\r\n   * */\r\n  get anchor(): [paper.Point, paper.Point] {\r\n    return [\r\n      this.pos.add(this.connectionAnchor!),\r\n      this.connectionAnchor!.rotate(this.rotation, new this.parent.scope.Point(0, 0)).divide(18)]\r\n  }\r\n}\r\n\r\nexport default LogicPin;","import React from \"react\";\r\nimport LogicPin, {PinType} from \"../logic/LogicPin\";\r\nimport {MouseEventHandler, PinMouseEventHandler} from \"../util/Types\";\r\n\r\nexport interface PinEventHandlers<T = PinMouseEventHandler> {\r\n    onPinMouseDown?: T;\r\n    onPinMouseUp?: T;\r\n    onPinMouseMove?: T;\r\n    onPinContextMenu?: T;\r\n}\r\n\r\nexport interface PinProps {\r\n    // @ts-ignore\r\n    pin: LogicPin,\r\n    type: PinType,\r\n    handlers: PinEventHandlers<MouseEventHandler>\r\n}\r\n\r\ninterface IState {\r\n\r\n}\r\n\r\n/**\r\n * React Component implementation of LogicPin\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Pin extends React.Component<PinProps, IState> {\r\n    constructor(props: PinProps) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        let data = this.props.pin.geometry!.data;\r\n        this.props.pin.geometry!.data = {}\r\n        //@ts-ignore\r\n        let d = this.props.pin.geometry!.exportSVG().getAttribute('d')\r\n        this.props.pin.geometry!.data = data;\r\n        let pathAttributes = {\r\n            d: d\r\n        }\r\n\r\n        let classNames = [\r\n            'pin'\r\n        ];\r\n\r\n        if (this.props.pin.geometry?.selected) {\r\n            classNames.push('selected')\r\n        }\r\n\r\n        let [anchor, ] = this.props.pin.anchor;\r\n\r\n\r\n        return (\r\n            <g key={this.props.pin.uuid} className={classNames.join(' ')}\r\n               onMouseDown={this.props.handlers?.onPinMouseDown}\r\n               onMouseUp={this.props.handlers?.onPinMouseUp}\r\n               onContextMenu={() => console.log(\"context p!\")}\r\n            >\r\n                <circle className=\"anchor\" cx={anchor.x} cy={anchor.y} r={5}/>\r\n                <path {...pathAttributes}/>\r\n            </g>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pin;","\r\ninterface IParams {\r\n  v?: number; // non-error value\r\n  x?: number; // unknown\r\n  z?: number; // high-impedance\r\n}\r\n\r\n/**\r\n * An arbitrary-width logical state with logical value, and error states.\r\n *\r\n * For every logical bit at a given position n, at most one of v, x, or z should be set for bit n.\r\n *\r\n * @example\r\n * // Returns logical state '01xz1'\r\n * new LogicState({v: 0b01001, x: 0b00100, z: 0b00010})\r\n * */\r\nclass LogicState {\r\n  /** Represents whether bits are on or off */\r\n  v: number;\r\n  /** Represents whether bits are in an unknown state */\r\n  x: number;\r\n  /** Represents whether bits are disconnected from an input source */\r\n  z: number;\r\n\r\n  constructor(params: IParams) {\r\n    this.v = params.v ?? 0;\r\n    this.x = params.x ?? 0;\r\n    this.z = params.z ?? 0;\r\n  }\r\n\r\n  eq(other: LogicState) {\r\n    return (\r\n        this.v === other.v &&\r\n        this.x === other.x &&\r\n        this.z === other.z\r\n    );\r\n  }\r\n\r\n  ne(other: LogicState) {\r\n    return (\r\n        this.v !== other.v ||\r\n        this.x !== other.x ||\r\n        this.z !== other.z\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Negates the logical state while keeping only the specified number bits\r\n   *\r\n   * @example\r\n   * // Creates logical state '01xz1'\r\n   * let state = new LogicState({v: 0b01001, x: 0b00100, z: 0b00010})\r\n   * // Negates logical state to '10xz1'\r\n   * state.negate(5)\r\n   * */\r\n  negate(numBits: number) {\r\n    // (2^n) - 1 will result in a mask with the lower n bits set.\r\n    let mask = (1 << numBits) - 1\r\n\r\n    // Bits with corresponding errors should be masked out\r\n    this.v = ~this.v & ~this.x & ~this.z & mask;\r\n  }\r\n}\r\n\r\nexport default LogicState;","import React from \"react\";\r\nimport LogicConnection from \"../logic/LogicConnection\";\r\n\r\ninterface Point {\r\n  x: number,\r\n  y: number\r\n}\r\n\r\ninterface IProps {\r\n  connection: LogicConnection;\r\n  /** The first endpoint of this connection */\r\n  i: Point;\r\n  /** The second endpoint of this connection */\r\n  o: Point;\r\n  /** The first control point, as required to render this connection as a bezier curve */\r\n  ic: Point;\r\n  /** The second control point, as required to render this connection as a bezier curve */\r\n  oc: Point;\r\n\r\n}\r\n\r\ninterface IState {}\r\n\r\n/**\r\n * React Component implementation of LogicConnection\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Connection extends React.Component<IProps, IState> {\r\n  render() {\r\n\r\n    let {x: ix, y: iy} = this.props.i;\r\n    let {x: ox, y: oy} = this.props.o;\r\n\r\n    let {x: icx, y: icy} = this.props.ic;\r\n    let {x: ocx, y: ocy} = this.props.oc;\r\n\r\n    let r = 1\r\n    // Render each endpoint of the connection as a circle.\r\n    // Each endpoint is split into two half circles, as it's impossible to render a full circle with a single arc\r\n    // command.\r\n    let end1_1 = `M ${ix - r} ${iy} A ${r} ${r} 180 0 0 ${ix + r} ${iy} `\r\n    let end1_2 = `A ${r} ${r} 180 0 0 ${ix - r} ${iy} `\r\n    let end2_1 = `M ${ox - r} ${oy} A ${r} ${r} 180 0 0 ${ox + r} ${oy} `\r\n    let end2_2 = `A ${r} ${r} 180 0 0 ${ox - r} ${oy} `\r\n    // The path of a connection is both endpoints drawn as circles, connected by a bezier curve.\r\n    let d = `${end1_1} ${end1_2} M ${ix} ${iy} C ${icx} ${icy} ${ocx} ${ocy} ${ox} ${oy} ${end2_1} ${end2_2}`;\r\n\r\n    /*\r\n    The connection is drawn twice with different stroke widths:\r\n\r\n    - First to draw the outline of the curve.\r\n    - Second to draw the interior.\r\n\r\n    This simulates the appearance the component was rendered as a single path with a normal fill and stroke.\r\n    The alternative is to compute the path offset curve, which is difficult to compute.\r\n    */\r\n    return (\r\n        <g>\r\n          <path className=\"connection-outer\" d={d}/>\r\n          <path fillRule=\"nonzero\"\r\n              className=\"connection-inner error\" d={d}/>\r\n          <path fillRule=\"nonzero\"\r\n              className=\"connection-inner bus\" d={d}/>\r\n        </g>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Connection;","import LogicPin from \"./LogicPin\";\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport Connection from \"../components/Connection\";\r\nimport LogicBoard from \"./LogicBoard\";\r\n\r\ninterface IParams {\r\n  uuid?: string;\r\n  source: LogicPin;\r\n  sink: LogicPin;\r\n  board?: LogicBoard;\r\n  hidden?: boolean;\r\n}\r\n\r\n/**\r\n * Class representing a connection between two pins\r\n *\r\n * Rendering is optional\r\n * */\r\nclass LogicConnection {\r\n  uuid: string;\r\n  source: LogicPin;\r\n  sink: LogicPin;\r\n  hidden: boolean;\r\n  board?: LogicBoard;\r\n\r\n  constructor(params: IParams) {\r\n    this.uuid = params.uuid ?? uuidv4();\r\n    this.source = params.source;\r\n    this.sink = params.sink;\r\n    this.hidden = params.hidden ?? false;\r\n    this.board = params.board;\r\n  }\r\n\r\n  remove() {\r\n    this.source.connections.delete(this.uuid);\r\n    this.sink.connections.delete(this.uuid);\r\n    this.board?.removeConnection(this.uuid);\r\n  }\r\n\r\n  render() {\r\n    let [ianchor, idir] = this.source.anchor;\r\n    let [oanchor, odir] = this.sink.anchor;\r\n\r\n    ianchor = this.source.transform(ianchor);\r\n    oanchor = this.sink.transform(oanchor);\r\n\r\n    let d = Math.min(ianchor.getDistance(oanchor), 30)\r\n\r\n    let ic = ianchor.add(idir.multiply(d));\r\n    let oc = oanchor.add(odir.multiply(d));\r\n\r\n    return (\r\n        <Connection key={this.uuid} connection={this} i={ianchor} o={oanchor} ic={ic} oc={oc}/>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default LogicConnection;","\r\nenum GateType {\r\n  UNKNOWN,\r\n  AND,\r\n  NAND,\r\n  OR,\r\n  NOR,\r\n  XOR,\r\n  XNOR,\r\n  BUF,\r\n  NOT,\r\n}\r\n\r\nexport default GateType;","import paper from \"paper\";\r\n\r\nimport LogicComponent, {LogicComponentParams} from \"./LogicComponent\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\nimport GateType from \"../enums/GateType\";\r\nimport * as Constants from \"../Constants\";\r\nimport LogicState from \"./LogicState\";\r\n\r\n/** Helper function which maps Gate types to svg paths.*/\r\nfunction pathFromGateType(type: GateType) {\r\n  switch (type) {\r\n    case GateType.AND:\r\n    case GateType.NAND:\r\n      return Constants.AND_PATH;\r\n    case GateType.OR:\r\n    case GateType.NOR:\r\n      return Constants.OR_PATH;\r\n    case GateType.XOR:\r\n    case GateType.XNOR:\r\n      return Constants.XOR_PATH;\r\n    case GateType.BUF:\r\n    case GateType.NOT:\r\n      return Constants.BUF_PATH;\r\n    default:\r\n      throw Error(\"Unsupported Gate Type\")\r\n  }\r\n}\r\n\r\n/** Helper function which indicates of a particular gate type is negated. */\r\nfunction isNot(type: GateType) {\r\n  switch (type) {\r\n    case GateType.NAND:\r\n    case GateType.NOR:\r\n    case GateType.XNOR:\r\n    case GateType.NOT:\r\n      return true;\r\n    case GateType.AND:\r\n    case GateType.OR:\r\n    case GateType.XOR:\r\n    case GateType.BUF:\r\n      return false;\r\n    default:\r\n      throw Error(\"Unsupported Gate Type\")\r\n  }\r\n}\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"flags\" | \"type\"> {}\r\n\r\n/** Primitive Logic Gates */\r\nclass LogicGate extends LogicComponent {\r\n  static opFuncs: Record<GateType, () => LogicState> = {\r\n    [GateType.AND]: LogicGate.prototype.opAnd,\r\n    [GateType.NAND]: LogicGate.prototype.opNand,\r\n    [GateType.OR]: LogicGate.prototype.opOr,\r\n    [GateType.NOR]: LogicGate.prototype.opNor,\r\n    [GateType.XOR]: LogicGate.prototype.opXor,\r\n    [GateType.XNOR]: LogicGate.prototype.opXnor,\r\n    [GateType.BUF]: LogicGate.prototype.opBuf,\r\n    [GateType.NOT]: LogicGate.prototype.opNot,\r\n    [GateType.UNKNOWN]: () => {throw new Error(\"Unsupported type\")}\r\n  }\r\n\r\n  private readonly opFunc: () => LogicState;\r\n\r\n  constructor(params: IParams) {\r\n    super({flags: 0, type: PartType.GATE, fieldWidth: 2, ...params});\r\n    this.opFunc = LogicGate.opFuncs[this.subtype].bind(this)\r\n  }\r\n\r\n  /* BEGIN logical gate implementations */\r\n  opAnd(): LogicState {\r\n    let value = this.bitMask();\r\n    let unknown = 0;\r\n    let high_impedance = 0;\r\n\r\n    // Keep track of input zeroes so we can ignore errors from other pins at these outputs\r\n    let zeroes = 0;\r\n\r\n    for (let pin of this.inputPins) {\r\n        // Count zeroes only if no error state exists for that bit.\r\n        zeroes |= ~(pin.state.v | pin.state.x | pin.state.z)\r\n        value &= pin.state.v;\r\n        unknown |= pin.state.x;\r\n        // Treat input z as unknown.\r\n        unknown |= pin.state.z;\r\n    }\r\n\r\n    // An input zero sets the corresponding output bit to zero, so we clear the error states on these bits.\r\n    // Because 0 AND X = 0\r\n    unknown &= ~zeroes;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance,\r\n    });\r\n  }\r\n\r\n  opNand(): LogicState {\r\n    let state = this.opAnd();\r\n    state.negate(this.width);\r\n    return state;\r\n  }\r\n\r\n  opOr(): LogicState{\r\n    let value = 0;\r\n    let unknown = 0;\r\n    let high_impedance = 0;\r\n\r\n    for (let pin of this.inputPins) {\r\n      value |= pin.state.v;\r\n      unknown |= pin.state.x;\r\n      // Treat input z as unknown.\r\n      unknown |= pin.state.z;\r\n    }\r\n\r\n    // Unlike AND gates, we can use the value above to indicate an error-free one at an input.\r\n    // An input one sets the corresponding output bit to one, so we clear the error states on these bits.\r\n    // Because 1 OR X = 1\r\n    unknown &= ~value;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance,\r\n    });\r\n  }\r\n\r\n  opNor(): LogicState {\r\n    let state = this.opOr();\r\n    state.negate(this.width);\r\n    return state;\r\n  }\r\n\r\n  opXor(): LogicState {\r\n    let value = 0;\r\n    let unknown = 0;\r\n    let high_impedance = 0;\r\n\r\n    for (let pin of this.inputPins) {\r\n      value ^= pin.state.v;\r\n      unknown |= pin.state.x;\r\n      // Treat input z as unknown.\r\n      unknown |= pin.state.z;\r\n    }\r\n\r\n    // We don't ignore errors at inputs for XOR because we need all inputs in every case to determine the output.\r\n\r\n    return new LogicState({\r\n      v: value & ~unknown,\r\n      x: unknown,\r\n      z: high_impedance,\r\n    });\r\n  }\r\n\r\n  opXnor(): LogicState {\r\n    let state = this.opXor();\r\n    state.negate(this.width);\r\n    return state;\r\n  }\r\n\r\n  opBuf(): LogicState {\r\n    let [inputPin,] = this.inputPins;\r\n    let value = inputPin.state.v;\r\n    let unknown = inputPin.state.x | inputPin.state.z;\r\n    let high_impedance = 0;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance\r\n    })\r\n  }\r\n\r\n  opNot(): LogicState {\r\n    let [inputPin,] = this.inputPins;\r\n    let unknown = inputPin.state.x | inputPin.state.z;\r\n    let value = ~inputPin.state.v & this.bitMask() & ~unknown;\r\n    let high_impedance = 0;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance\r\n    });\r\n  }\r\n\r\n  operate(): void {\r\n    let logicState = this.opFunc();\r\n    this.postEvent(logicState, this.outputPins[0])\r\n  }\r\n\r\n\r\n  setUpBody(): paper.Item {\r\n    let {CompoundPath} = this.scope;\r\n    return new CompoundPath(pathFromGateType(this.subtype))\r\n  }\r\n\r\n  setUpInputPins(fieldWidth: number): LogicPin[] {\r\n    // Keep pins that fit within tne new field width to maintain old connections\r\n    let inputPins = this.inputPins.slice(0, fieldWidth);\r\n    let nuke = this.inputPins.slice(fieldWidth);\r\n    nuke.forEach(p => p.remove());\r\n\r\n    for (let i = this.fieldWidth; i < fieldWidth; ++i) {\r\n      inputPins.push(new LogicPin({\r\n        parent: this,\r\n        pinType: PinType.INPUT,\r\n        orientation: PinOrientation.LEFT,\r\n        board: this.board,\r\n      }))\r\n    }\r\n\r\n    let offset =\r\n        fieldWidth === 2 ? 32 / 3 :\r\n            fieldWidth === 3 ? 6 :\r\n                2;\r\n    let spacing =\r\n        fieldWidth === 2 ? 32 / 3 :\r\n            fieldWidth === 3 ? 10 :\r\n                28 / 3;\r\n\r\n    for (let i = 0; i < fieldWidth; ++i) {\r\n      inputPins[i].updateGeometry(new paper.Point(0, offset + i * spacing));\r\n    }\r\n\r\n    return inputPins;\r\n  }\r\n\r\n  setUpOutputPins(): LogicPin[] {\r\n    if (this.outputPins.length > 0) {\r\n      return this.outputPins;\r\n    }\r\n    let pin = new LogicPin({\r\n      parent: this,\r\n      pinType: PinType.OUTPUT,\r\n      orientation: PinOrientation.RIGHT,\r\n      not: isNot(this.subtype),\r\n      board: this.board,\r\n    })\r\n    pin.updateGeometry(new paper.Point(32, 16))\r\n\r\n    return [pin];\r\n  }\r\n}\r\n\r\nexport default LogicGate;","import paper from \"paper/dist/paper-core\";\r\nimport React from \"react\";\r\n\r\nimport LogicComponent, {LogicComponentParams} from \"./LogicComponent\";\r\nimport {BULB_PATH} from \"../Constants\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"flags\" | \"type\"> {\r\n}\r\n\r\n/** Light Bulb implementation */\r\nclass Bulb extends LogicComponent {\r\n  on: boolean = false;\r\n  constructor(params: IParams) {\r\n    super({...params, type: PartType.OUTPUT, flags: 0});\r\n  }\r\n\r\n  operate(): void {\r\n    this.on = this.inputPins[0].state.v === 1;\r\n  }\r\n\r\n  /** Renders the glow of the bulb if the bulb is in the on state */\r\n  extraRender(): React.ReactElement[] {\r\n    // TODO: Render the glow on top of all other components.\r\n    //   SVG renders elements in document order.\r\n    let display = this.on ? \"auto\" : \"none\"\r\n    return [\r\n        <circle key={0} className={\"bulb-glow\"} cx={16} cy={16} r={32} display={display}/>\r\n    ];\r\n  }\r\n\r\n  setUpBody(): paper.Item {\r\n    return new this.scope.Path(BULB_PATH);\r\n  }\r\n\r\n  setUpInputPins(fieldWidth: number): LogicPin[] {\r\n    let {bottom} = this.body.bounds;\r\n    let pin = new LogicPin({\r\n      parent: this,\r\n      pinType: PinType.INPUT,\r\n      orientation: PinOrientation.DOWN,\r\n      board: this.board\r\n    });\r\n\r\n    pin.updateGeometry(new paper.Point(16, bottom));\r\n    return [pin];\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Bulb;","import GateType from \"../enums/GateType\";\r\nimport LogicComponent from \"../logic/LogicComponent\";\r\nimport LogicGate from \"../logic/LogicGate\";\r\nimport PartType from \"../enums/PartType\";\r\nimport {GLOBAL_SCOPE} from \"../Constants\";\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\nimport Bulb from \"../logic/Bulb\";\r\n\r\ninterface PartParams {\r\n  type: PartType,\r\n  subtype: GateType,\r\n  label?: string;\r\n}\r\n\r\n/**\r\n * Part is a factory class used to generate logic components.\r\n */\r\nclass Part {\r\n  readonly subtype: GateType;\r\n  readonly type: PartType;\r\n  readonly label: string;\r\n  static data?: Part;\r\n  component: LogicComponent;\r\n\r\n  constructor(params: PartParams) {\r\n    this.type = params.type;\r\n    this.subtype = params.subtype;\r\n    this.label = params.label ?? \"<NO LABEL>\";\r\n    this.component = this.make();\r\n  }\r\n\r\n  make(board?: LogicBoard): LogicComponent {\r\n    let scope = board?.scope ?? GLOBAL_SCOPE;\r\n    switch (this.type) {\r\n      case PartType.GATE:\r\n        return new LogicGate({subtype: this.subtype, scope: scope, board: board});\r\n      case PartType.OUTPUT:\r\n        return new Bulb({subtype: 0, board: board, scope: scope})\r\n      default:\r\n        throw Error(\"Unsupported Part Type\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default Part;","import React from \"react\";\r\nimport \"../css/PartsDrawer.css\"\r\nimport Part from \"./Part\";\r\n\r\ninterface IProps {\r\n  parts: Array<Part>,\r\n}\r\ninterface IState {}\r\n\r\n/**\r\n * A container which renders multiple parts together, and enables parts to be dragged and dropped onto a board\r\n *\r\n * For organizational purposes, a full suite of components may consist of multiple drawers.\r\n * */\r\nclass PartsDrawer extends React.Component<IProps, IState> {\r\n\r\n  renderPart(part: Part) {\r\n    let component = part.component;\r\n    let element = component.render();\r\n    let {label} = part\r\n    let {left, top, width, height} = component.geometry.bounds;\r\n    left -= 2;\r\n    top -= 2;\r\n    width += 4;\r\n    height += 4;\r\n\r\n    let id = label.replace(' ', '_');\r\n    return (\r\n        <div className=\"part\"\r\n             key={component.uuid}\r\n             draggable\r\n             onDragStart={this.handleDragStart.bind(this, id, part)}\r\n             onDragEnd={this.handleDragEnd.bind(this)}\r\n        >\r\n          <div className=\"part-image-container\">\r\n            <svg className=\"part-image\" id={id} viewBox={`${left} ${top} ${width} ${height}`} width={width} height={height}>\r\n              {element}\r\n            </svg>\r\n          </div>\r\n          <div className=\"part-label\">{label}</div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  handleDragStart(id: string, part: Part, e: React.DragEvent<HTMLElement>) {\r\n    Part.data = part;\r\n\r\n    let elem = document.getElementById(id) as HTMLElement;\r\n\r\n    let {x, y} = part.component.geometry.bounds.center;\r\n\r\n    e.dataTransfer.setDragImage(elem, x+2, y+2);\r\n    e.dataTransfer.effectAllowed = \"move\";\r\n\r\n  }\r\n\r\n  handleDragEnd() {\r\n    Part.data = undefined;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"drawer\">\r\n          {this.props.parts.map(this.renderPart.bind(this))}\r\n        </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default PartsDrawer;","import paper from \"paper\";\r\nimport React from \"react\";\r\n\r\nimport '../css/Board.css';\r\nimport Part from \"./Part\";\r\nimport LogicComponent from \"../logic/LogicComponent\";\r\nimport {GateEventHandlers} from \"./Component\";\r\nimport {ComponentMouseEventHandler} from \"../util/Types\";\r\nimport LogicPin, {PinType} from \"../logic/LogicPin\";\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\n\r\n\r\ninterface MouseEventMapping {\r\n    /** The x-coordinate in svg coordinates */\r\n    x: number,\r\n    /** The y-coordinate in svg coordinates */\r\n    y: number,\r\n    /**\r\n     * The x-coordinate as the relative position within the viewBox\r\n     * <br>\r\n     * 0 is the left side of the viewBox, and 1 is the right side of the viewBox\r\n     * */\r\n    rx: number,\r\n    /**\r\n     * The y-coordinate as the relative position within the viewBox\r\n     * <br>\r\n     * 0 is the top side of the viewBox, and 1 is the bottom side of the viewBox\r\n     * */\r\n    ry: number,\r\n    /** The horizontal distance moved in svg coordinate space since the last mouse event */\r\n    dx: number,\r\n    /** The vertical distance moved in svg coordinate space since the last mouse event */\r\n    dy: number,\r\n}\r\n\r\ninterface IProps {\r\n    board: LogicBoard;\r\n}\r\n\r\ninterface IState {\r\n    /** The size and offset of our view onto the board. */\r\n    viewBox: {\r\n        left: number,\r\n        top: number,\r\n        width: number,\r\n        height: number,\r\n    },\r\n    /** The size on the page of the board */\r\n    viewPort: {\r\n        width: number,\r\n        height: number,\r\n    },\r\n    scaleFactor: number,\r\n    pan: boolean,\r\n    drag: boolean,\r\n}\r\n\r\n/**\r\n * React Component implementation of LogicBoard\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Board extends React.Component<IProps, IState> {\r\n    private ref: React.RefObject<any>;\r\n    private resizeObserer?: ResizeObserver;\r\n    private sPoint: paper.Point | undefined;\r\n    private select: paper.Path | null;\r\n\r\n    constructor(props: Readonly<IProps>) {\r\n        super(props);\r\n\r\n        this.select = null;\r\n        // @ts-ignore\r\n        this.state = {\r\n            viewBox: {\r\n                left: 0,\r\n                top: 0,\r\n                width: 800,\r\n                height: 600,\r\n            },\r\n            viewPort: {\r\n              width: 0,\r\n              height: 0,\r\n            },\r\n            scaleFactor: 1,\r\n            pan: false,\r\n            drag: false,\r\n        }\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    /** Resize handler to make sure the board doesn't scale up when the window is resized */\r\n    onResize(entries: ResizeObserverEntry[]) {\r\n        let {width, height} = entries[0].contentRect;\r\n        this.setState((state) => {\r\n            return {\r\n                viewPort: {\r\n                    width: width,\r\n                    height: height,\r\n                },\r\n                viewBox: {\r\n                    left: state.viewBox.left,\r\n                    top: state.viewBox.top,\r\n                    width: width * state.scaleFactor,\r\n                    height: height * state.scaleFactor,\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called after this component is rendered to the DOM\r\n     * <br>\r\n     * This is useful to perform initialization which requires this component or it's children to have been rendered.\r\n     * @see {@link https://reactjs.org/docs/react-component.html#componentdidmount componentDidMount}\r\n     * */\r\n    componentDidMount() {\r\n        this.setState({});\r\n        let board = this.ref.current;\r\n        this.resizeObserer = new ResizeObserver(this.onResize.bind(this));\r\n        this.resizeObserer.observe(board)\r\n    }\r\n\r\n    /**\r\n     * Called before this element will be removed from the DOM\r\n     * <br>\r\n     * Generally used to clean up any bindings set up in {@link componentDidMount}, and other stray bindings.\r\n     * @see {@link https://reactjs.org/docs/react-component.html#componentwillunmount componentWillUnmount} */\r\n    componentWillUnmount() {\r\n        this.resizeObserer?.disconnect();\r\n    }\r\n\r\n    /** SVG definitions referenced by other svg elements. */\r\n    defs() {\r\n        return (\r\n            <defs key=\"defs\">\r\n                <pattern id=\"grid\" x={0} y={0} width={80} height={80} viewBox=\"0 0 80 80\" patternUnits=\"userSpaceOnUse\">\r\n                    <path className=\"grid\" d=\"M 0 0 L 0 80\" strokeWidth=\"2\"/>\r\n                    <path className=\"grid\" d=\"M 10 0 L 10 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 20 0 L 20 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 30 0 L 30 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 40 0 L 40 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 50 0 L 50 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 60 0 L 60 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 70 0 L 70 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 80 0 L 80 80\" strokeWidth=\"2\"/>\r\n\r\n                    <path className=\"grid\" d=\"M 0 0 L 80 0\" strokeWidth=\"2\"/>\r\n                    <path className=\"grid\" d=\"M 0 10 L 80 10\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 20 L 80 20\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 30 L 80 30\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 40 L 80 40\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 50 L 80 50\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 60 L 80 60\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 70 L 80 70\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 80 L 80 80\" strokeWidth=\"2\"/>\r\n                </pattern>\r\n\r\n                <pattern id=\"bus\" x={0} y={0} width={3} height={3} viewBox=\"0 0 3 3\" patternUnits=\"userSpaceOnUse\">\r\n                    <rect x={2} y={0} width={1} height={1} fill=\"black\"/>\r\n                    <rect x={1} y={1} width={1} height={1} fill=\"black\"/>\r\n                    <rect x={0} y={2} width={1} height={1} fill=\"black\"/>\r\n                </pattern>\r\n\r\n                <radialGradient id=\"bulb-glow\">\r\n                    <stop offset=\"0%\" stopColor=\"rgb(255, 255, 128)\" />\r\n                    <stop offset=\"100%\" stopColor=\"rgba(255, 255, 255, 0)\" />\r\n                </radialGradient>\r\n            </defs>\r\n        );\r\n    }\r\n\r\n    /** Draws the grid background as a repeated pattern on a rectangle which exactly fills the viewBox */\r\n    renderGrid() {\r\n        const left = this.state.viewBox.left,\r\n            width = this.state.viewBox.width,\r\n            top = this.state.viewBox.top,\r\n            height = this.state.viewBox.height;\r\n\r\n        return <rect key=\"grid\" x={left} y={top} width={width} height={height} fill=\"url(#grid)\"/>;\r\n    }\r\n\r\n    render() {\r\n        const left = this.state.viewBox.left,\r\n            width = this.state.viewBox.width,\r\n            top = this.state.viewBox.top,\r\n            height = this.state.viewBox.height;\r\n\r\n        let selectionBox = (this.select?.exportSVG() as SVGElement)?.getAttribute('d');\r\n\r\n        let handlers: GateEventHandlers<ComponentMouseEventHandler> = {\r\n            onGateMouseDown: this.handleGateMouseDown.bind(this),\r\n            onGateMouseUp: this.handleGateMouseUp.bind(this),\r\n            onGateContextMenu: this.handleGateContextMenu.bind(this),\r\n            onPinMouseDown: this.handlePinMouseDown.bind(this),\r\n        }\r\n\r\n        let renderedConnections: JSX.Element[] = [];\r\n        this.props.board.connections.forEach((c) => renderedConnections.push(c.render()));\r\n\r\n        let renderedComponents: JSX.Element[] = [];\r\n        this.props.board.components.forEach((c) => renderedComponents.push(c.render(handlers)));\r\n\r\n        // Nested svgs is a hack to allow resizing the viewPort without scaling the contents.\r\n        // When the viewport is resized, the inner svg's viewBox is updated so it exactly fits the outer SVG's viewport.\r\n        // Normally, an svg element with a defined viewBox is forced to fit the aspect ratio of its viewbox.\r\n        return (\r\n            <div\r\n                ref={this.ref}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\"\r\n                }}\r\n            >\r\n                <svg className=\"board-wrapper\" style={this.state.viewPort}\r\n                     xmlns=\"http://www.w3.org/2000/svg\"\r\n                     onWheel={(e)=> this.handleWheel(e)}\r\n                     onMouseMove={(e) => this.handleMouseMove(e)}\r\n                     onMouseDown={(e) => this.handleMouseDown(e)}\r\n                     onMouseUp={(e) => this.handleMouseUp(e)}\r\n                     onMouseLeave={(e) => this.handleMouseExit(e)}\r\n                     onDragEnter={this.handleDragEnter.bind(this)}\r\n                     onDragOver={(e) => this.handleDragOver(e)}\r\n                     onDrop={(e) => this.handleDrop(e)}\r\n                >\r\n                    <svg className=\"board\"\r\n                         preserveAspectRatio=\"xMinYMin slice\"\r\n                         xmlns=\"http://www.w3.org/2000/svg\"\r\n                         viewBox={`${left} ${top} ${width} ${height}`}\r\n                         onScroll={() => console.log(\"scroll\")}\r\n                    >\r\n                        {this.defs()}\r\n                        {this.renderGrid()}\r\n                        <circle className={\"origin\"} x=\"0\" y=\"0\" r=\"40\" fill=\"red\"/>\r\n                        {renderedConnections}\r\n                        {renderedComponents}\r\n                        {selectionBox &&\r\n                        <path className=\"select\" d={selectionBox} vectorEffect=\"non-scaling-stroke\"/>\r\n                        }\r\n                    </svg>\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /** Unselects all selected items */\r\n    clearSelection() {\r\n        for(let item of this.scope.project.selectedItems) {\r\n            item.selected = false;\r\n        }\r\n    }\r\n\r\n    /**  Maps a mouse event's position on the page to the viewBox coordinates */\r\n    getViewCoordinates(e: React.MouseEvent<SVGSVGElement, MouseEvent>): MouseEventMapping {\r\n        let rect = e.currentTarget.getBoundingClientRect();\r\n        const l = rect.left,\r\n            t = rect.top,\r\n            w = rect.width,\r\n            h = rect.height;\r\n\r\n        const localX = e.pageX - l,\r\n            localY = e.pageY - t;\r\n\r\n        const dLocalX = e.movementX,\r\n            dLocalY = e.movementY;\r\n\r\n        const viewWidth = this.state.viewBox.width,\r\n            viewHeight = this.state.viewBox.height;\r\n\r\n        const viewRelativeX = localX / w,\r\n            viewRelativeY = localY / h,\r\n            viewX = this.state.viewBox.left + viewRelativeX * viewWidth,\r\n            viewY = this.state.viewBox.top + viewRelativeY * viewHeight,\r\n            dX = dLocalX / w * viewWidth,\r\n            dY = dLocalY / h * viewHeight;\r\n\r\n        return {\r\n            x: viewX,\r\n            y: viewY,\r\n            rx: viewRelativeX,\r\n            ry: viewRelativeY,\r\n            dx: dX,\r\n            dy: dY,\r\n        }\r\n    }\r\n\r\n    /*\r\n    Event handlers and associated helpers\r\n     */\r\n    enableDrag(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        e.stopPropagation()\r\n        this.setState({drag: true})\r\n    }\r\n\r\n    disableDrag(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        e.stopPropagation()\r\n        this.setState({drag: false})\r\n    }\r\n\r\n    handleDragEnter(e: React.DragEvent<SVGSVGElement>) {\r\n        e.preventDefault();\r\n        e.dataTransfer.effectAllowed = \"move\";\r\n    }\r\n\r\n    handleDragOver(e: React.DragEvent<SVGSVGElement>) {\r\n        e.preventDefault();\r\n        e.dataTransfer.effectAllowed = \"move\";\r\n    }\r\n\r\n    handleDrop(e: React.DragEvent<SVGSVGElement>) {\r\n        e.preventDefault();\r\n        let {x, y} = this.getViewCoordinates(e);\r\n        let part = Part.data as Part;\r\n        if (!part) {\r\n            return\r\n        }\r\n        let component = part.make(this.props.board);\r\n        component.geometry.translate(new paper.Point(x - 16, y - 16))\r\n\r\n        this.props.board.addComponent(component);\r\n\r\n        this.setState({})\r\n    }\r\n\r\n    handleMouseDown(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        // This is only called if neither a pin nor component is clicked.\r\n        this.clearSelection();\r\n        const {Path, Point, Rectangle, Size} = this.props.board.scope;\r\n        // this.setState({pan: true});\r\n        const {x, y} = this.getViewCoordinates(e);\r\n        this.sPoint = new Point(x, y);\r\n        let rect = new Rectangle(this.sPoint, new Size(0, 0))\r\n        this.select = new Path.Rectangle(rect)\r\n        this.setState({})\r\n    }\r\n\r\n    handleMouseUp(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        // this.setState({pan: false});\r\n        if (this.select) {\r\n            this.select.remove()\r\n            this.select = null;\r\n        }\r\n\r\n        this.setState({pan: false, drag: false});\r\n    }\r\n\r\n    handleMouseExit(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n\r\n        if (this.select) {\r\n            this.select.remove()\r\n            this.select = null;\r\n        }\r\n        this.setState({pan: false, drag: false})\r\n    }\r\n\r\n    isSelected(item: paper.Item): boolean {\r\n        const select = this.select as paper.Item;\r\n        const selectionRect = select.bounds;\r\n        let clone = item.clone();\r\n        clone.transform(item.parent.matrix)\r\n        let isSelected = clone.intersects(select) || clone.isInside(selectionRect) || clone.contains(selectionRect.center)\r\n        clone.remove()\r\n\r\n        // let matrix = item.parent.matrix;\r\n        // let imatrix = matrix.inverted();\r\n        // item.transform(matrix)\r\n        // let isSelected = item.intersects(select) || item.isInside(selectionRect) || item.contains(selectionRect.center)\r\n        // item.transform(imatrix)\r\n        return isSelected\r\n    }\r\n\r\n    handleMouseMove(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        let {x, y, dx, dy} = this.getViewCoordinates(e)\r\n\r\n        if (this.state.drag) {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n\r\n            let selected = this.props.board.scope.project.getItems({\r\n                selected: true,\r\n                data: {\r\n                    type: 'Component',\r\n                }\r\n            });\r\n\r\n            for (let s of selected) {\r\n                let dp = new paper.Point(dx, dy);\r\n                s.parent.translate(dp)\r\n                // for (let c of s.parent.children) {\r\n                //     c.translate(dp)\r\n                // }\r\n            }\r\n            this.setState({});\r\n\r\n        }\r\n\r\n        if (this.select && this.sPoint) {\r\n            let select = this.select;\r\n            const [sx, sy] = [this.sPoint.x, this.sPoint.y]\r\n\r\n            if (x === sx && y === sy) {\r\n                for (let s of select.segments) {\r\n                    s.point = this.sPoint;\r\n                }\r\n            }\r\n\r\n            if (x <= sx) {\r\n                select.segments[0].point.x = x\r\n                select.segments[1].point.x = x\r\n                select.segments[2].point.x = sx\r\n                select.segments[3].point.x = sx\r\n            }\r\n            if (x >= sx) {\r\n                select.segments[0].point.x = sx\r\n                select.segments[1].point.x = sx\r\n                select.segments[2].point.x = x\r\n                select.segments[3].point.x = x\r\n            }\r\n            if (y <= sy) {\r\n                select.segments[0].point.y = sy\r\n                select.segments[1].point.y = y\r\n                select.segments[2].point.y = y\r\n                select.segments[3].point.y = sy\r\n            }\r\n            if (y >= sy) {\r\n                select.segments[0].point.y = y\r\n                select.segments[1].point.y = sy\r\n                select.segments[2].point.y = sy\r\n                select.segments[3].point.y = y\r\n            }\r\n\r\n            const {project} = this.props.board.scope;\r\n\r\n            let components = project.getItems({\r\n                data: {\r\n                    type: 'Component'\r\n                }\r\n            })\r\n\r\n            let sc = false;\r\n\r\n            for (let component of components) {\r\n                if (this.isSelected(component)) {\r\n                    sc = true;\r\n                    component.selected = true;\r\n                } else {\r\n                    component.selected = false;\r\n                }\r\n            }\r\n\r\n            let pins = project.getItems({\r\n                data: {\r\n                    type: 'Pin'\r\n                }\r\n            })\r\n\r\n            for (let pin of pins) {\r\n                pin.selected = !sc && this.isSelected(pin);\r\n            }\r\n\r\n            this.setState({});\r\n            this.forceUpdate();\r\n        }\r\n\r\n        if (this.state.pan) {\r\n            this.setState({\r\n                viewBox: {\r\n                    top: this.state.viewBox.top - dy,\r\n                    left: this.state.viewBox.left - dx,\r\n                    width: this.state.viewBox.width,\r\n                    height: this.state.viewBox.height,\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    static between(a: number , b: number, c: number) {\r\n        return Math.min(Math.max(a, b), c);\r\n    }\r\n\r\n    handleWheel(e: React.WheelEvent<SVGSVGElement>)  {\r\n        let {x, y, rx, ry} = this.getViewCoordinates(e);\r\n\r\n        const viewWidth = this.state.viewPort.width,\r\n              viewHeight = this.state.viewPort.height;\r\n\r\n        const MIN_SCALE = 1 / 16.0;\r\n        const MAX_SCALE = 4.0;\r\n        const {scaleFactor} = this.state;\r\n\r\n        const newScaleFactor = Board.between(MIN_SCALE, Math.pow(2, e.deltaY / 1000) * scaleFactor, MAX_SCALE),\r\n              newWidth = viewWidth * newScaleFactor,\r\n              newHeight = viewHeight * newScaleFactor;\r\n\r\n        const newViewBox = {\r\n            left: x - rx * newWidth,\r\n            top: y - ry * newHeight,\r\n            width: newWidth,\r\n            height: newHeight,\r\n        };\r\n\r\n        this.setState({\r\n            scaleFactor: newScaleFactor,\r\n            viewBox: newViewBox,\r\n        });\r\n    }\r\n\r\n\r\n    handleGateMouseDown(logicComponent: LogicComponent, e: React.MouseEvent<SVGElement, MouseEvent>) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        console.log(\"Gate Down\");\r\n        let selected = this.props.board.scope.project.getItems({\r\n            selected: true,\r\n        })\r\n\r\n        let body = logicComponent.body as paper.Item;\r\n\r\n        if (!selected.includes(body)) {\r\n            for (let component of selected) {\r\n                component.selected = false;\r\n            }\r\n            body.selected = true;\r\n        }\r\n\r\n        this.setState({drag: true});\r\n    }\r\n\r\n    handleGateMouseUp(logicComponent: LogicComponent, e: React.MouseEvent<SVGElement, MouseEvent>) {\r\n        e.preventDefault();\r\n        console.log(\"up gate\")\r\n    }\r\n\r\n    handleGateContextMenu(logicComponent: LogicComponent, e:React.MouseEvent<SVGElement, MouseEvent>) {\r\n        if (e.shiftKey) {\r\n            return;\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        console.log(\"context g!\")\r\n    }\r\n\r\n    handlePinMouseDown(logicPin: LogicPin, e:React.MouseEvent<SVGElement, MouseEvent>) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        let {project} = this.props.board.scope;\r\n\r\n        let pins = project.getItems({\r\n            selected: true,\r\n            data: {\r\n                type: 'Pin'\r\n            }\r\n        }).map(p => p.data.logical) as LogicPin[];\r\n\r\n        let numOutputs = pins.filter(p => p.pinType === PinType.OUTPUT).length;\r\n        console.log(`Num outputs: ${numOutputs}`)\r\n        if (numOutputs <= 1) {\r\n            for(let pin of pins) {\r\n                this.makeConnection(pin, logicPin);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    makeConnection(a: LogicPin, b: LogicPin) {\r\n        console.log(\"attempting connection\")\r\n        let connection = a.connectTo(b);\r\n        if (connection) {\r\n            this.props.board.addConnection(connection);\r\n            this.setState({});\r\n        }\r\n    }\r\n\r\n    get scope(): paper.PaperScope {\r\n        return this.props.board.scope;\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\n\r\nimport Board from \"../components/Board\";\r\nimport LogicComponent from \"./LogicComponent\";\r\nimport LogicConnection from \"./LogicConnection\";\r\nimport paper from \"paper/dist/paper-core\";\r\nimport {makeAndSetupScope} from \"../util/PaperHelp\";\r\nimport LogicState from \"./LogicState\";\r\nimport LogicPin from \"./LogicPin\";\r\n\r\n/**\r\n *\r\n */\r\nclass LogicBoard {\r\n  /** All components which should be rendered on screen */\r\n  components: Map<string, LogicComponent> = new Map();\r\n  /** All connections which may be rendered */\r\n  connections: Map<string, LogicConnection> = new Map();\r\n  /** Paper scope for this board used to compute geometry, and intersections */\r\n  scope: paper.PaperScope = makeAndSetupScope();\r\n\r\n  render(): React.ReactElement {\r\n    return (\r\n        <Board board={this}/>\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Updates a pin at a simulated time in the future.\r\n   *\r\n   * @param state - The new logical state of the pin\r\n   * @param pin - The pin to be updated\r\n   * @param delay - The amount of time from the current time before the pin's state should be updated.\r\n   */\r\n  postEvent(state: LogicState, pin: LogicPin, delay: number) {\r\n\r\n  }\r\n\r\n  /** Tracks a component to be rendered */\r\n  addComponent(component: LogicComponent) {\r\n    this.components.set(component.uuid, component)\r\n  }\r\n\r\n  /** Tracks a connection to be rendered */\r\n  addConnection(connection: LogicConnection) {\r\n    this.connections.set(connection.uuid, connection)\r\n  }\r\n\r\n  /** Removes a component from being tracked and rendered */\r\n  removeComponent(uuid: string) {\r\n    this.components.delete(uuid);\r\n  }\r\n\r\n  /** Removes a connection from being tracked and rendered */\r\n  removeConnection(uuid: string) {\r\n    this.connections.delete(uuid);\r\n  }\r\n}\r\n\r\nexport default LogicBoard;","import React from 'react';\nimport '../css/App.css';\nimport Sidebar from \"./Sidebar\";\nimport PartsDrawer from \"./PartsDrawer\";\nimport Part from \"./Part\";\nimport PartType from \"../enums/PartType\";\nimport GateType from \"../enums/GateType\";\nimport LogicBoard from \"../logic/LogicBoard\";\n\ninterface IProps {}\ninterface IState {}\n\n/**\n * Entry point to the app.\n */\nclass App extends React.Component<IProps , IState>{\n  private board: LogicBoard = new LogicBoard();\n\n  render()\n  {\n    return (\n        <div style={{width: \"100%\", height: \"100%\"}}>\n          <div>Menu/Toolbars</div>\n          <div style={{width: \"100%\", height: \"100%\"}}>\n            <Sidebar content={\n              <PartsDrawer parts={[\n                new Part({type: PartType.GATE, subtype: GateType.AND, label:\"AND\"}),\n                new Part({type: PartType.GATE, subtype: GateType.NAND, label:\"NAND\"}),\n                new Part({type: PartType.GATE, subtype: GateType.OR, label:\"OR\"}),\n                new Part({type: PartType.GATE, subtype: GateType.NOR, label:\"NOR\"}),\n                new Part({type: PartType.GATE, subtype: GateType.XOR, label:\"XOR\"}),\n                new Part({type: PartType.GATE, subtype: GateType.XNOR, label:\"XNOR\"}),\n                new Part({type: PartType.GATE, subtype: GateType.BUF, label:\"BUF\"}),\n                new Part({type: PartType.GATE, subtype: GateType.NOT, label:\"NOT\"}),\n                new Part({type: PartType.OUTPUT, subtype: 0, label:\"Bulb\"}),\n              ]}/>\n            }/>\n            {this.board.render()}\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}