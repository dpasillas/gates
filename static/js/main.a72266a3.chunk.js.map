{"version":3,"sources":["logic/LogicComponent.tsx","reportWebVitals.ts","components/Component.tsx","enums/PartType.ts","util/PaperHelp.ts","Constants.ts","logic/LogicPin.tsx","components/Pin.tsx","logic/LogicState.ts","components/Connection.tsx","logic/LogicConnection.tsx","enums/GateType.ts","logic/LogicGate.tsx","logic/Bulb.tsx","logic/Clock.tsx","logic/Switch.tsx","logic/Adder.tsx","components/Part.tsx","components/PartsDrawer.tsx","components/Sidebar.tsx","components/Board.tsx","BinarySearchTreeNode.ts","BinarySearchTree.ts","logic/LogicEvent.ts","logic/LogicBoard.tsx","Themes.tsx","ThemeContext.tsx","components/ToggleThemeButton.tsx","components/Toolbar.tsx","components/App.tsx","index.tsx"],"names":["LogicFlag","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Component","props","state","logicComponent","updateSelf","setState","this","geometry","position","x","y","rotation","join","handlers","onGateMouseDown","onGateMouseUp","onGateContextMenu","pins","map","p","render","gate","classNames","body","selected","push","className","subtype","uuid","transform","getTransforms","d","onMouseDown","onMouseUp","onMouseMove","onGateMouseMove","onContextMenu","extraRender","React","PartType","LogicComponent","params","__fieldWidth","__width","__d","flags","type","scope","board","delay","inputPins","outputPins","uuidv4","width","fieldWidth","reset","Group","Point","remove","setUpBody","pivot","applyMatrix","setUpPins","addChild","addChildren","exportSVG","getAttribute","data","logic","flag","bitMask","numBits","setUpInputPins","setUpSelectorPins","setUpOutputPins","updateGeometry","pin","postEvent","clearPins","removeComponent","getRenderParams","bind","undefined","onPinMouseDown","onPinMouseUp","onPinMouseMove","onPinContextMenu","makeAndSetupScope","paper","PaperScope","setup","project","draw","PinOrientation","PinType","GLOBAL_SCOPE","OR_PATH","Pin","pathAttributes","anchor","console","log","cx","cy","r","LogicState","v","z","other","mask","Connection","connection","fillClass","i","ix","iy","o","ox","oy","ic","icx","icy","oc","ocx","ocy","end1_1","end1_2","end2_1","end2_2","fillRule","LogicConnection","source","sink","hidden","connections","delete","removeConnection","ianchor","idir","oanchor","odir","Math","min","getDistance","add","multiply","GateType","LogicPin","parent","connectionAnchor","not","orientation","pinType","Map","LEFT","INPUT","operate","OUTPUT","updateNext","Error","values","inputPin","ne","setLogicState","forEach","c","clear","canConnect","isConnectedTo","disconnect","set","connectTo","has","pos","CompoundPath","Path","NOT_PATH","UP","rotate","DOWN","RIGHT","translate","subtract","logical","matrix","divide","isNot","NAND","NOR","XNOR","NOT","AND","OR","XOR","BUF","maxPins","LogicGate","GATE","opFunc","opFuncs","value","unknown","zeroes","opAnd","negated","opOr","opXor","logicState","Constants","pathFromGateType","slice","offset","spacing","length","prototype","opNand","opNor","opXnor","opBuf","opNot","UNKNOWN","Bulb","on","display","bottom","bounds","Clock","output","selfConnection","s","Size","Rectangle","clockPath","fill","Switch","extras","classnames","stateString","onClick","handleClick","color","update","Adder","COMPOSITE_BUILT_IN","a","b","cout","sum","cin","error","Part","label","component","make","makeInput","makeComposite","PartsDrawer","collapsed","part","element","left","top","height","id","replace","Paper","elevation","classes","root","draggable","onDragStart","handleDragStart","onDragEnd","handleDragEnd","viewBox","e","elem","document","getElementById","center","dataTransfer","setDragImage","effectAllowed","ListItem","dense","Button","sx","borderRadius","variant","endIcon","icon","faChevronRight","style","flexGrow","Collapse","wrapperInner","in","timeout","parts","renderPart","Divider","Sidebar","open","activeTab","sidebarClasses","Box","localeCompare","pointerEvents","List","subheader","ListSubheader","entries","index","Tab","writingMode","textOrientation","a11yProps","minWidth","handleTabClick","Tabs","onChange","handleTabChange","borderRight","borderColor","flexShrink","renderTab","overflow","renderUnderlay","renderProjectView","renderPartsView","newValue","Board","ref","resizeObserer","sPoint","select","viewPort","scaleFactor","pan","drag","createRef","contentRect","current","ResizeObserver","onResize","observe","patternUnits","strokeWidth","stopColor","selectionBox","handleGateMouseDown","handleGateMouseUp","handleGateContextMenu","handlePinMouseDown","renderedConnections","renderedComponents","components","xmlns","onWheel","handleWheel","handleMouseMove","handleMouseDown","handleMouseUp","onMouseLeave","handleMouseExit","onDragEnter","handleDragEnter","onDragOver","handleDragOver","onDrop","handleDrop","preserveAspectRatio","onScroll","defs","renderGrid","vectorEffect","selectedItems","rect","currentTarget","getBoundingClientRect","l","t","w","h","localX","pageX","localY","pageY","dLocalX","movementX","dLocalY","movementY","viewWidth","viewHeight","viewRelativeX","viewRelativeY","rx","ry","dx","dy","stopPropagation","preventDefault","getViewCoordinates","addComponent","clearSelection","_e","item","selectionRect","imatrix","inverted","isSelected","intersects","isInside","contains","getItems","dp","sy","segments","point","sc","forceUpdate","newScaleFactor","between","pow","deltaY","newWidth","newHeight","newViewBox","includes","shiftKey","logicPin","numOutputs","filter","makeConnection","addConnection","max","BinarySearchTreeNode","right","weight","max_depth","ret","side","slant","rotateLeft","rotateRight","cmp","result","added","insert","balance","find","popFirst","node","val","removed","popLast","inOrderIterator","bst","stack","pop","BinarySearchTree","Symbol","iterator","LogicEvent","time","LogicBoard","simulation","simulationTimerId","simulationCurrentTime","simulationIntervalMs","simulationStepSize","updateFunc","event","setInterval","advanceSimulation","clearInterval","target","size","first","apply","simulationRunning","DarkTheme","createTheme","palette","mode","LightTheme","ThemeContext","createContext","theme","setTheme","ToggleThemeButton","Consumer","IconButton","ml","styled","MuiDivider","Toolbar","running","stopped","simulationStopped","Stack","direction","flexDirection","onPlay","faPlay","faPause","onStop","disabled","faStop","onStep","faStepForward","pauseSimulation","startSimulation","stopSimulation","App","Provider","ThemeProvider","bgcolor","ReactDOM","StrictMode","StyledEngineProvider"],"mappings":"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","file":"static/js/main.a72266a3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport paper from \"paper\";\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nimport PartType from \"../enums/PartType\";\r\nimport GateType from \"../enums/GateType\";\r\nimport LogicPin from \"./LogicPin\";\r\nimport Component, {GateEventHandlers, GateProps} from \"../components/Component\";\r\nimport LogicState from \"./LogicState\";\r\nimport LogicBoard from \"./LogicBoard\";\r\n\r\n\r\nconst MAX_FLAGS = 32\r\n\r\n/**\r\n * Bit flags indicating rendering hints and allowable user interactions\r\n *\r\n * This was imported from a previous logic simulator project, and may be subject to change.\r\n * */\r\nenum LogicFlag {\r\n  VariableShape = 0x00000001,  // 1 << 0\r\n  IBussable = 0x00000002,      // 1 << 1\r\n  OBussable = 0x00000004,      // 1 << 2\r\n  SingleOutput = 0x00000008,   // 1 << 3\r\n  MergingPins = 0x00000010,    // 1 << 4\r\n  Mux = 0x00000020,            // 1 << 5\r\n  Bussed = 0x00000040,         // 1 << 6\r\n}\r\n\r\n\r\nexport interface LogicComponentParams {\r\n  /** Rendering and interaction hints as specified by LogicFlag */\r\n  flags: number;\r\n  /** The type of the component, required for serialization */\r\n  type: PartType;\r\n  /** The subtype of the component, required for serialization */\r\n  subtype: GateType;\r\n  /** The scope in which this component will be rendered and interacted with. */\r\n  scope: paper.PaperScope;\r\n  /**\r\n   * The number of input pins, excluding control pins.\r\n   *\r\n   * The specific meaning of this field depends on the specific LogicComponent implementation.\r\n   * */\r\n  fieldWidth?: number;\r\n  /** The number of bits of data handled on a single pin, excluding control pins. */\r\n  width?: number;\r\n  /**\r\n   * The propagation delay of this component\r\n   *\r\n   * More specifically, the amount of time it takes for a change in one or more of the inputs of this component to be\r\n   * reflected in the outputs.\r\n   * */\r\n  delay?: number;\r\n  /** The logical board where rendering and interaction are done, and where logical events will be handled. */\r\n  board?: LogicBoard;\r\n}\r\n\r\n/**\r\n * Base class for all logical components which may or may not be rendered\r\n *\r\n * A logical component is any object which may send or receive logical signals.\r\n * */\r\nabstract class LogicComponent {\r\n  private __fieldWidth: number = 0;\r\n  private __width: number;\r\n  private __d: string = \"\";\r\n  private flags: number;\r\n  /** The unique id of this component, used for rendering, and serialization */\r\n  readonly uuid: string;\r\n  readonly type: PartType;\r\n  readonly subtype: GateType;\r\n  readonly scope: paper.PaperScope;\r\n  board?: LogicBoard;\r\n  /**\r\n   * The propagation delay of this component\r\n   *\r\n   * More specifically, the amount of time it takes for a change in one or more of the inputs of this component to be\r\n   * reflected in the outputs.\r\n   * */\r\n  delay: number;\r\n  /** The shape of this component used for rendering and interactions */\r\n  body!: paper.Item;\r\n  /** A grouping of this component's body and pins which stores translation and rotation information. */\r\n  geometry!: paper.Item;\r\n  inputPins: LogicPin[] = [];\r\n  outputPins: LogicPin[] = [];\r\n  /**\r\n   * Callback which triggers a re-render on the rendered object\r\n   */\r\n  updateSelf?: () => void;\r\n\r\n  protected constructor(params: LogicComponentParams) {\r\n\r\n    this.uuid = uuidv4();\r\n    this.scope = params.scope\r\n    this.flags = params.flags;\r\n    this.type = params.type;\r\n    this.subtype = params.subtype;\r\n    this.delay = params.delay ?? 1;\r\n    this.__width = params.width ?? 1;\r\n\r\n    this.board = params.board;\r\n\r\n    this.fieldWidth = params.fieldWidth ?? 0;\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /** Handler for updating this component's body and pins in response to property updates */\r\n  updateGeometry(fieldWidth: number) {\r\n    let {Group, Point} = this.scope;\r\n    if (this.body) {\r\n      this.body.remove()\r\n    }\r\n    this.body = this.setUpBody(fieldWidth);\r\n\r\n    if (!this.geometry) {\r\n      this.geometry = new Group();\r\n      this.geometry.pivot = new Point(0, 0);\r\n      this.geometry.applyMatrix = false;\r\n    }\r\n\r\n    this.setUpPins(fieldWidth);\r\n    this.geometry.addChild(this.body);\r\n    this.geometry.addChildren(this.pins().map(p => p.geometry as paper.Item));\r\n\r\n    this.__d = (this.body.exportSVG() as SVGElement).getAttribute('d')!;\r\n\r\n    this.body.data = {\r\n      type: 'Component',\r\n      logic: this,\r\n      geometry: this.geometry,\r\n    }\r\n  }\r\n\r\n  /** Checks if a property indicated by a LogicFlag is set */\r\n  hasProperty(flag: LogicFlag): boolean {\r\n    return (this.flags & flag) !== 0;\r\n  }\r\n\r\n  /** Sets a property indicated by a LogicFlag */\r\n  setProperty(flag: LogicFlag): void {\r\n    this.flags |= flag;\r\n  }\r\n\r\n  /** Unsets a property indicated by a LogicFlag */\r\n  clearProperty(flag: LogicFlag): void {\r\n    this.flags &= this.bitMask(MAX_FLAGS) ^ flag;\r\n  }\r\n\r\n  /**\r\n   * Creates a bitmask of the specified width\r\n   *\r\n   * If no width is specified, defaults to this component's width.\r\n   * */\r\n  bitMask(numBits?: number): number {\r\n    numBits = numBits ?? this.width;\r\n    return (1 << numBits) - 1;\r\n  }\r\n\r\n  /** Returns all pins associated with this component */\r\n  pins(): LogicPin[] {\r\n    return [\r\n        ...this.inputPins,\r\n        ...this.outputPins,\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * Removes all logical pins on this component\r\n   *\r\n   * Removed pins are disconnected from all other pins, and all events associated with the pin are purged.\r\n   * */\r\n  clearPins() {\r\n    //TODO(dpasillas): remove logic events associated with pins\r\n    for (let pin of this.pins()) {\r\n      pin.remove();\r\n    }\r\n\r\n    this.inputPins = [];\r\n    this.outputPins = [];\r\n  }\r\n\r\n  /** Sets up all pins required for this component */\r\n  setUpPins(fieldWidth: number) {\r\n    this.inputPins = [...this.setUpInputPins(fieldWidth), ...this.setUpSelectorPins(fieldWidth)];\r\n    this.outputPins = this.setUpOutputPins(fieldWidth);\r\n  }\r\n\r\n  /** Virtual method to set up input pins */\r\n  setUpInputPins(fieldWidth: number): LogicPin[] {\r\n    return [];\r\n  }\r\n\r\n  /** Virtual method to set up output pins. */\r\n  setUpOutputPins(fieldWidth: number): LogicPin[] {\r\n    return [];\r\n  }\r\n\r\n  /** Virtual method to set up selector pins, as required for -plexer type ICs. */\r\n  setUpSelectorPins(fieldWidth: number): LogicPin[] {\r\n    return []\r\n  }\r\n\r\n  set fieldWidth(fieldWidth: number) {\r\n    this.updateGeometry(fieldWidth)\r\n    this.__fieldWidth = fieldWidth\r\n  }\r\n\r\n  get fieldWidth(): number {\r\n    return this.__fieldWidth;\r\n  }\r\n\r\n  set width(width: number) {\r\n    // TODO(dpasillas): update geometry in response to width changes.\r\n    if (this.__width === width) {\r\n      return;\r\n    }\r\n    this.__width = width;\r\n  }\r\n\r\n  get width() {\r\n    return this.__width;\r\n  }\r\n\r\n  /** Path description of the component's body */\r\n  get d() {\r\n    return this.__d;\r\n  }\r\n\r\n  /** Sets the specified logical state on the specified pin after the propagation delay. */\r\n  postEvent(state: LogicState, pin?: LogicPin) {\r\n    pin = pin ?? this.outputPins[0];\r\n    this.board?.postEvent(state, pin, this.delay);\r\n  }\r\n\r\n  /** Delete this component, and all associated pins/connections */\r\n  remove() {\r\n    this.clearPins();\r\n    delete this.body.data.logic;\r\n    this.body.remove();\r\n    this.geometry.remove();\r\n    this.board?.removeComponent(this.uuid);\r\n  }\r\n\r\n  /**\r\n   * Virtual method to perform additional drawing on top of the base component\r\n   *\r\n   * For example, this may be used to draw pin labels, light from activated bulbs, or the interactive part of a button.\r\n   * */\r\n  extraRender(): React.ReactElement[] {\r\n    return [];\r\n  }\r\n\r\n  /** Maps this logical component to a React Component */\r\n  render(handlers?: GateEventHandlers): React.ReactElement {\r\n    return (\r\n        <Component\r\n            key={this.uuid}\r\n            {...this.getRenderParams(handlers)}/>\r\n    );\r\n  }\r\n\r\n  /** Triggers a re-render */\r\n  update() {\r\n    this.updateSelf && this.updateSelf();\r\n  }\r\n\r\n  /** Specifies required properties for rendering */\r\n  getRenderParams(handlers?: GateEventHandlers): Required<GateProps> {\r\n    return {\r\n      type: this.subtype,\r\n      logicComponent: this,\r\n      scope: this.scope,\r\n      handlers: {\r\n        onGateMouseDown: handlers?.onGateMouseDown?.bind(undefined, this),\r\n        onGateMouseUp: handlers?.onGateMouseUp?.bind(undefined, this),\r\n        onGateMouseMove: handlers?.onGateMouseMove?.bind(undefined, this),\r\n        onGateContextMenu: handlers?.onGateContextMenu?.bind(undefined, this),\r\n        onPinMouseDown: handlers?.onPinMouseDown,\r\n        onPinMouseUp: handlers?.onPinMouseUp,\r\n        onPinMouseMove: handlers?.onPinMouseMove,\r\n        onPinContextMenu: handlers?.onPinContextMenu,\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Sets up the shape of this component */\r\n  abstract setUpBody(fieldWidth: number): paper.Item\r\n  /** Performs a logical operation */\r\n  abstract operate(): void\r\n  /** Returns the component to its initial state at power up */\r\n  abstract reset(): void\r\n}\r\n\r\nexport default LogicComponent;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport {PinEventHandlers} from \"./Pin\";\r\nimport paper from 'paper';\r\nimport GateType from \"../enums/GateType\";\r\nimport {ComponentMouseEventHandler, MouseEventHandler} from \"../util/Types\";\r\nimport LogicComponent from \"../logic/LogicComponent\";\r\n\r\nexport interface GateEventHandlers<T = ComponentMouseEventHandler> extends PinEventHandlers {\r\n    onGateMouseDown?: T;\r\n    onGateMouseUp?: T;\r\n    onGateMouseMove?: T;\r\n    onGateContextMenu?: T;\r\n}\r\n\r\nexport interface GateProps {\r\n    scope?: paper.PaperScope,\r\n    handlers: GateEventHandlers<MouseEventHandler>,\r\n    type: GateType,\r\n    logicComponent: LogicComponent,\r\n}\r\n\r\ninterface IState {}\r\n\r\n/**\r\n * React Component implementation of LogicComponent\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Component extends React.Component<GateProps, IState> {\r\n    constructor(props: Readonly<GateProps>) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n        this.props.logicComponent.updateSelf = () => this.setState({});\r\n    }\r\n\r\n    /**\r\n     * Gets the translation and rotation transforms of the component.\r\n     */\r\n    getTransforms() {\r\n        let {x, y} = this.props.logicComponent.geometry.position\r\n        let offset_transform = `translate(${x} ${y})`\r\n        let rotate_transform = `rotate(${this.props.logicComponent.geometry.rotation})`\r\n        return [offset_transform, rotate_transform].join(' ')\r\n    }\r\n\r\n    render() {\r\n        let {onGateMouseDown, onGateMouseUp, onGateContextMenu, ...handlers} = this.props.handlers;\r\n\r\n        let logicPins = this.props.logicComponent.pins();\r\n        let pins = logicPins.map(p => p.render(handlers))\r\n\r\n        let gate = this.props.logicComponent;\r\n        let body = gate.body as paper.Item;\r\n\r\n        let classNames = ['component']\r\n\r\n        if (body.selected) {\r\n            classNames.push('selected')\r\n        }\r\n\r\n        return (\r\n            <g className={classNames.join(' ')}\r\n               data-ctype={gate.subtype}\r\n               data-uuid={gate.uuid}\r\n               transform={this.getTransforms()}\r\n            >\r\n                <path d={gate.d}\r\n                      onMouseDown={this.props.handlers.onGateMouseDown}\r\n                      onMouseUp={this.props.handlers.onGateMouseUp}\r\n                      onMouseMove={this.props.handlers.onGateMouseMove}\r\n                      onContextMenu={this.props.handlers.onGateContextMenu}\r\n                />\r\n                {gate.extraRender()}\r\n                {pins}\r\n            </g>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Component;","\r\nenum PartType {\r\n  UNKNOWN,\r\n  GATE,\r\n  INPUT,\r\n  OUTPUT,\r\n  COMPOSITE_BUILT_IN,\r\n  COMPOSITE_CUSTOM\r\n}\r\n\r\nexport default PartType;\r\n\r\n","import paper from \"paper\";\r\n\r\n/**\r\n * Creates and sets up a paper scope\r\n *\r\n * Primarily intended to allow initializing scopes inline as class or global variables.\r\n * */\r\nexport function makeAndSetupScope() {\r\n  let scope = new paper.PaperScope();\r\n  // @ts-ignore\r\n  scope.setup();\r\n  // Performance testing indicated that paperjs was spending a lot of time drawing the project.\r\n  // This paperjs isn't being used to draw directly to a canvas, this is useless, so we make this a no-op.\r\n  // @ts-ignore\r\n  scope.project.draw = () => {}\r\n  return scope;\r\n}","import {makeAndSetupScope} from \"./util/PaperHelp\";\r\n\r\nexport const GLOBAL_SCOPE = makeAndSetupScope();\r\nexport const BULB_PATH = \"M 27.3137084989848 27.3137084989848 A 16 16 90 1 0 4.68629150101524 27.3137084989848 Q 9.238107812 31.86552481 10.71553501 36 Q 11.21553501 37.39921453 11.71553501 40 C 12.21553501 42.60078547 19.78446499 42.60078547 20.28446499 40 Q 20.78446499 37.39921453 21.28446499 36 Q 22.76189219 31.86552481 27.3137085 27.3137085\";\r\nexport const AND_PATH = \"M 0 0 L 16 0 A 16 16 -180 0 1 16 32 L 0 32 L 0 0 Z\";\r\nexport const OR_PATH = \"M 0 0 L 8 0 Q 22.72 0 32 16 Q 22.72 32 8 32 L 0 32 Q 8 16 0 0 Z\";\r\nconst XOR_TAIL = \"M -4 0 Q 4 16 -4 32 Q 4 16 -4 0 Z\";\r\nexport const XOR_PATH = OR_PATH + \" \" + XOR_TAIL;\r\nexport const BUF_PATH = \"M 0 0 L 32 16 L 0 32 L 0 0 Z\";\r\nexport const PIN_PATH = \"M -4 -2 L 18.5 -2 L 20 0 L 18.5 2 L -4 2 Z\";\r\nexport const NOT_PATH = \"M -4 0 A 4 4 180 0 1 4 0 A 4 4 180 0 1 -4 0 Z\";\r\nexport const NOT_PIN_PATH = NOT_PATH + \" M 3.47 -2 L 18.5 -2 L 20 0 L 18.5 2 L 3.467 2 A 4 4 -20 0 0 3.467 -2 Z\";","import {v4 as uuidv4} from 'uuid';\r\nimport LogicComponent from \"./LogicComponent\";\r\nimport * as Constants from \"../Constants\";\r\nimport Pin, {PinEventHandlers, PinProps} from \"../components/Pin\";\r\nimport React from \"react\";\r\nimport LogicState from \"./LogicState\";\r\nimport LogicConnection from \"./LogicConnection\";\r\nimport * as paper from \"paper\";\r\nimport LogicBoard from \"./LogicBoard\";\r\n\r\nexport enum PinOrientation {\r\n  UNKNOWN,\r\n  UP,\r\n  DOWN,\r\n  LEFT,\r\n  RIGHT,\r\n}\r\n\r\n/** Indicates whether a pin receives or sends logic signals */\r\nexport enum PinType {\r\n  UNKNOWN,\r\n  INPUT,\r\n  OUTPUT,\r\n}\r\n\r\ninterface IParams {\r\n  /** LogicComponent which receives or sends signals from this pin */\r\n  parent: LogicComponent,\r\n  /** Indicates whether this pin receives or sends logic signals */\r\n  pinType: PinType,\r\n  /** Rendering hint to show a pin as negated */\r\n  not?: boolean,\r\n  /** The number of bits of data which may be received or transmitted by this pin */\r\n  width?: number,\r\n  /** Direction in which the pin is mounted on the parent */\r\n  orientation?: PinOrientation,\r\n  /** The board which processes events, and optionally renders this pin */\r\n  board?: LogicBoard,\r\n}\r\n\r\n/**\r\n * Logical representation of a pin which may or may not be rendered\r\n *\r\n * A pin is any input or output to/from a LogicComponent\r\n * */\r\nclass LogicPin {\r\n  private parent: LogicComponent;\r\n  private connectionAnchor?: paper.Point;\r\n  readonly uuid: string;\r\n  board?: LogicBoard;\r\n  width: number;\r\n  geometry?: paper.PathItem;\r\n  not: boolean;\r\n  orientation: PinOrientation;\r\n  pinType: PinType;\r\n  state: LogicState;\r\n  connections: Map<string /* UUID of connected pin */, LogicConnection> = new Map<string, LogicConnection>();\r\n\r\n  constructor(params: IParams) {\r\n    this.uuid = uuidv4();\r\n    this.parent = params.parent;\r\n    this.width = params.width ?? 1;\r\n    this.orientation = params.orientation ?? PinOrientation.LEFT;\r\n    this.pinType = params.pinType;\r\n    this.not = params.not ?? false;\r\n    this.state = new LogicState({});\r\n    this.board = params.board;\r\n  }\r\n\r\n  /** Helper function which causes logic states to propagate */\r\n  setLogicState(state: LogicState) {\r\n    this.state = state;\r\n    switch (this.pinType) {\r\n      case PinType.INPUT:\r\n        this.parent.operate();\r\n        break;\r\n      case PinType.OUTPUT:\r\n        this.updateNext();\r\n        break;\r\n      default:\r\n        throw new Error();\r\n    }\r\n  }\r\n\r\n  /** Updates all pins with connections leading from this pin */\r\n  updateNext() {\r\n    if (this.pinType !== PinType.OUTPUT) {\r\n      throw new Error();\r\n    }\r\n\r\n    for (let connection of this.connections.values()) {\r\n      let inputPin = connection.sink;\r\n      // No need to simulate events which won't affect the output\r\n      if (this.state.ne(inputPin.state)) {\r\n        inputPin.setLogicState(this.state)\r\n      }\r\n      // This ensures that self referencing components (such as Clock) operates appropriately\r\n      inputPin.parent.operate();\r\n    }\r\n  }\r\n\r\n  /** Removes all connections associated with this pin */\r\n  disconnect() {\r\n    this.connections.forEach((c) => c.remove());\r\n    this.connections.clear();\r\n  }\r\n\r\n  /** Indicates whether this pin may be connected to another */\r\n  canConnect(other: LogicPin) {\r\n    if (this.width !== other.width) {\r\n      return false;\r\n    }\r\n\r\n    switch (this.pinType) {\r\n      case PinType.INPUT:\r\n        return other.pinType === PinType.OUTPUT;\r\n      case PinType.OUTPUT:\r\n        return other.pinType === PinType.INPUT;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** Creates a connection between this pin with another */\r\n  connectTo(other: LogicPin): LogicConnection | null {\r\n    if (!this.canConnect(other)) {\r\n      return null;\r\n    }\r\n\r\n    if (this.pinType === PinType.INPUT) {\r\n      if (this.isConnectedTo(other)) {\r\n        return null;\r\n      } else {\r\n        this.disconnect()\r\n      }\r\n      let connection = new LogicConnection({source: other, sink: this, board: this.board})\r\n      this.connections.set(connection.uuid, connection);\r\n      other.connections.set(connection.uuid, connection);\r\n      this.setLogicState(other.state);\r\n      return connection;\r\n    } else {\r\n      return other.connectTo(this);\r\n    }\r\n  }\r\n\r\n  /** Tests if connection exists between this pin and another */\r\n  isConnectedTo(other: LogicPin): boolean {\r\n    return this.connections.has(other.uuid);\r\n  }\r\n\r\n  remove() {\r\n    this.disconnect()\r\n    this.geometry?.remove();\r\n    delete this.geometry?.data.logic\r\n  }\r\n\r\n  render(handlers?: PinEventHandlers): React.ReactElement {\r\n    return (\r\n        <Pin key={this.uuid}\r\n             {...this.getRenderParams(handlers)}\r\n        />\r\n    )\r\n  }\r\n\r\n  getRenderParams(handlers?: PinEventHandlers): PinProps {\r\n    return {\r\n      pin: this,\r\n      type: this.pinType,\r\n      handlers: {\r\n        onPinMouseUp: handlers?.onPinMouseUp?.bind(undefined, this),\r\n        onPinMouseDown: handlers?.onPinMouseDown?.bind(undefined, this),\r\n        onPinMouseMove: handlers?.onPinMouseMove?.bind(undefined, this),\r\n        onPinContextMenu: handlers?.onPinContextMenu?.bind(undefined, this),\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Places the pin at a location on the parent, and subtracts the parent's body from its geometry. */\r\n  updateGeometry(pos: paper.Point) {\r\n    if(this.geometry) {\r\n      this.geometry.remove()\r\n    }\r\n    let {CompoundPath, Path, Point} = this.parent.scope;\r\n    let pin;\r\n    if (this.not) {\r\n      pin = new CompoundPath(Constants.NOT_PIN_PATH)\r\n    } else {\r\n      pin = new Path(Constants.PIN_PATH);\r\n    }\r\n    pin.pivot = new Point(0, 0);\r\n\r\n    switch (this.orientation) {\r\n      case PinOrientation.UP:\r\n        pin.rotate(-90);\r\n        this.connectionAnchor = new Point(0, -18);\r\n        break;\r\n      case PinOrientation.DOWN:\r\n        pin.rotate(90);\r\n        this.connectionAnchor = new Point(0, 18);\r\n        break;\r\n      case PinOrientation.LEFT:\r\n        pin.rotate(180);\r\n        this.connectionAnchor = new Point(-18, 0);\r\n        break;\r\n      case PinOrientation.RIGHT:\r\n        this.connectionAnchor = new Point(18, 0);\r\n        break;\r\n      default:\r\n        throw new Error(\"Unknown pin orientation\")\r\n    }\r\n\r\n    pin.translate(pos);\r\n    this.geometry = pin.subtract(this.parent.body as paper.PathItem);\r\n    pin.remove();\r\n    this.geometry.data.type = 'Pin'\r\n    this.geometry.data.logical = this;\r\n  }\r\n\r\n  /** Maps a point from local coordinates to svg coordinates */\r\n  transform(p: paper.Point): paper.Point {\r\n    return this.parent.geometry.matrix.transform(p);\r\n  }\r\n\r\n  get rotation(): number {\r\n    return this.parent.geometry.rotation;\r\n  }\r\n\r\n  get pos(): paper.Point {\r\n    return this.geometry!.position\r\n  }\r\n\r\n  /**\r\n   * Returns a tuple containing a point near the end of the pin, and the direction the pin is pointing\r\n   *\r\n   * This information is used to render connections, and interaction aids.\r\n   * */\r\n  get anchor(): [paper.Point, paper.Point] {\r\n    return [\r\n      this.pos.add(this.connectionAnchor!),\r\n      this.connectionAnchor!.rotate(this.rotation, new this.parent.scope.Point(0, 0)).divide(18)]\r\n  }\r\n}\r\n\r\nexport default LogicPin;","import React from \"react\";\r\nimport LogicPin, {PinType} from \"../logic/LogicPin\";\r\nimport {MouseEventHandler, PinMouseEventHandler} from \"../util/Types\";\r\n\r\nexport interface PinEventHandlers<T = PinMouseEventHandler> {\r\n    onPinMouseDown?: T;\r\n    onPinMouseUp?: T;\r\n    onPinMouseMove?: T;\r\n    onPinContextMenu?: T;\r\n}\r\n\r\nexport interface PinProps {\r\n    // @ts-ignore\r\n    pin: LogicPin,\r\n    type: PinType,\r\n    handlers: PinEventHandlers<MouseEventHandler>\r\n}\r\n\r\ninterface IState {\r\n\r\n}\r\n\r\n/**\r\n * React Component implementation of LogicPin\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Pin extends React.Component<PinProps, IState> {\r\n    constructor(props: PinProps) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        let data = this.props.pin.geometry!.data;\r\n        this.props.pin.geometry!.data = {}\r\n        //@ts-ignore\r\n        let d = this.props.pin.geometry!.exportSVG().getAttribute('d')\r\n        this.props.pin.geometry!.data = data;\r\n        let pathAttributes = {\r\n            d: d\r\n        }\r\n\r\n        let classNames = [\r\n            'pin'\r\n        ];\r\n\r\n        if (this.props.pin.geometry?.selected) {\r\n            classNames.push('selected')\r\n        }\r\n\r\n        let [anchor, ] = this.props.pin.anchor;\r\n\r\n\r\n        return (\r\n            <g key={this.props.pin.uuid} className={classNames.join(' ')}\r\n               onMouseDown={this.props.handlers?.onPinMouseDown}\r\n               onMouseUp={this.props.handlers?.onPinMouseUp}\r\n               onContextMenu={() => console.log(\"context p!\")}\r\n            >\r\n                <circle className=\"anchor\" cx={anchor.x} cy={anchor.y} r={5}/>\r\n                <path {...pathAttributes}/>\r\n            </g>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pin;","\r\ninterface IParams {\r\n  v?: number; // non-error value\r\n  x?: number; // unknown\r\n  z?: number; // high-impedance\r\n}\r\n\r\n/**\r\n * An arbitrary-width logical state with logical value, and error states.\r\n *\r\n * For every logical bit at a given position n, at most one of v, x, or z should be set for bit n.\r\n *\r\n * @example\r\n * // Returns logical state '01xz1'\r\n * new LogicState({v: 0b01001, x: 0b00100, z: 0b00010})\r\n * */\r\nclass LogicState {\r\n  /** Represents whether bits are on or off */\r\n  v: number;\r\n  /** Represents whether bits are in an unknown state */\r\n  x: number;\r\n  /** Represents whether bits are disconnected from an input source */\r\n  z: number;\r\n\r\n  constructor(params: IParams) {\r\n    this.v = params.v ?? 0;\r\n    this.x = params.x ?? 0;\r\n    this.z = params.z ?? 0;\r\n  }\r\n\r\n  eq(other: LogicState) {\r\n    return (\r\n        this.v === other.v &&\r\n        this.x === other.x &&\r\n        this.z === other.z\r\n    );\r\n  }\r\n\r\n  ne(other: LogicState) {\r\n    return (\r\n        this.v !== other.v ||\r\n        this.x !== other.x ||\r\n        this.z !== other.z\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a new negated the logical state while keeping only the specified number bits\r\n   *\r\n   * @example\r\n   * // Creates logical state '01xz1'\r\n   * let state = new LogicState({v: 0b01001, x: 0b00100, z: 0b00010})\r\n   * // Negates logical state to '10xz1'\r\n   * state.negate(5)\r\n   * */\r\n  negated(numBits: number) {\r\n    // (2^n) - 1 will result in a mask with the lower n bits set.\r\n    let mask = (1 << numBits) - 1\r\n\r\n    // Bits with corresponding errors should be masked out\r\n    let v = ~this.v & ~this.x & ~this.z & mask;\r\n    return new LogicState({\r\n      v: v,\r\n      x: this.x,\r\n      z: this.z\r\n    });\r\n  }\r\n}\r\n\r\nexport default LogicState;","import React from \"react\";\r\nimport LogicConnection from \"../logic/LogicConnection\";\r\nimport LogicState from \"../logic/LogicState\";\r\n\r\ninterface Point {\r\n  x: number,\r\n  y: number\r\n}\r\n\r\ninterface IProps {\r\n  connection: LogicConnection;\r\n  state: LogicState;\r\n  width: number;\r\n  /** The first endpoint of this connection */\r\n  i: Point;\r\n  /** The second endpoint of this connection */\r\n  o: Point;\r\n  /** The first control point, as required to render this connection as a bezier curve */\r\n  ic: Point;\r\n  /** The second control point, as required to render this connection as a bezier curve */\r\n  oc: Point;\r\n\r\n}\r\n\r\ninterface IState {}\r\n\r\n/**\r\n * React Component implementation of LogicConnection\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Connection extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {}\r\n\r\n    this.props.connection.updateSelf = () => this.setState({});\r\n  }\r\n\r\n  render() {\r\n\r\n    let {x: ix, y: iy} = this.props.i;\r\n    let {x: ox, y: oy} = this.props.o;\r\n\r\n    let {x: icx, y: icy} = this.props.ic;\r\n    let {x: ocx, y: ocy} = this.props.oc;\r\n\r\n    let r = 1\r\n    // Render each endpoint of the connection as a circle.\r\n    // Each endpoint is split into two half circles, as it's impossible to render a full circle with a single arc\r\n    // command.\r\n    let end1_1 = `M ${ix - r} ${iy} A ${r} ${r} 180 0 0 ${ix + r} ${iy} `\r\n    let end1_2 = `A ${r} ${r} 180 0 0 ${ix - r} ${iy} `\r\n    let end2_1 = `M ${ox - r} ${oy} A ${r} ${r} 180 0 0 ${ox + r} ${oy} `\r\n    let end2_2 = `A ${r} ${r} 180 0 0 ${ox - r} ${oy} `\r\n    // The path of a connection is both endpoints drawn as circles, connected by a bezier curve.\r\n    let d = `${end1_1} ${end1_2} M ${ix} ${iy} C ${icx} ${icy} ${ocx} ${ocy} ${ox} ${oy} ${end2_1} ${end2_2}`;\r\n\r\n    let fillClass;\r\n    let state = this.props.state;\r\n    if (state.x) {\r\n      fillClass = \"error\"\r\n    } else if (state.z) {\r\n      fillClass = \"error\"\r\n    } else if (state.v) {\r\n      fillClass = \"on\";\r\n    } else {\r\n      fillClass = \"off\"\r\n    }\r\n\r\n    /*\r\n    The connection is drawn twice with different stroke widths:\r\n\r\n    - First to draw the outline of the curve.\r\n    - Second to draw the interior.\r\n\r\n    This simulates the appearance the component was rendered as a single path with a normal fill and stroke.\r\n    The alternative is to compute the path offset curve, which is difficult to compute.\r\n    */\r\n    return (\r\n        <g className=\"connection\">\r\n          <path className=\"connection-outer\" d={d}/>\r\n          <path fillRule=\"nonzero\"\r\n              className={`connection-inner ${fillClass}`} d={d}/>\r\n          { this.props.width > 1 &&\r\n            <path fillRule=\"nonzero\" className=\"connection-inner bus\" d={d}/>}\r\n        </g>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Connection;","import LogicPin from \"./LogicPin\";\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport Connection from \"../components/Connection\";\r\nimport LogicBoard from \"./LogicBoard\";\r\n\r\ninterface IParams {\r\n  uuid?: string;\r\n  source: LogicPin;\r\n  sink: LogicPin;\r\n  board?: LogicBoard;\r\n  hidden?: boolean;\r\n}\r\n\r\n/**\r\n * Class representing a connection between two pins\r\n *\r\n * Rendering is optional\r\n * */\r\nclass LogicConnection {\r\n  uuid: string;\r\n  source: LogicPin;\r\n  sink: LogicPin;\r\n  hidden: boolean;\r\n  board?: LogicBoard;\r\n  /**\r\n   * Callback which triggers a re-render on the rendered object\r\n   */\r\n  updateSelf?: () => void;\r\n\r\n  constructor(params: IParams) {\r\n    this.uuid = params.uuid ?? uuidv4();\r\n    this.source = params.source;\r\n    this.sink = params.sink;\r\n    this.hidden = params.hidden ?? false;\r\n    this.board = params.board;\r\n  }\r\n\r\n  remove() {\r\n    this.source.connections.delete(this.uuid);\r\n    this.sink.connections.delete(this.uuid);\r\n    this.board?.removeConnection(this.uuid);\r\n  }\r\n\r\n  render() {\r\n    let [ianchor, idir] = this.source.anchor;\r\n    let [oanchor, odir] = this.sink.anchor;\r\n\r\n    ianchor = this.source.transform(ianchor);\r\n    oanchor = this.sink.transform(oanchor);\r\n\r\n    let d = Math.min(ianchor.getDistance(oanchor), 30)\r\n\r\n    let ic = ianchor.add(idir.multiply(d));\r\n    let oc = oanchor.add(odir.multiply(d));\r\n\r\n    return (\r\n        <Connection key={this.uuid}\r\n                    connection={this}\r\n                    state={this.source.state}\r\n                    width={this.source.width}\r\n                    i={ianchor}\r\n                    o={oanchor}\r\n                    ic={ic}\r\n                    oc={oc}\r\n        />\r\n    );\r\n\r\n  }\r\n\r\n  /** Triggers a re-render */\r\n  update() {\r\n    this.updateSelf && this.updateSelf();\r\n  }\r\n}\r\n\r\nexport default LogicConnection;","\r\nenum GateType {\r\n  UNKNOWN,\r\n  AND,\r\n  NAND,\r\n  OR,\r\n  NOR,\r\n  XOR,\r\n  XNOR,\r\n  BUF,\r\n  NOT,\r\n}\r\n\r\nexport default GateType;","import paper from \"paper\";\r\n\r\nimport LogicComponent, {LogicComponentParams} from \"./LogicComponent\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\nimport GateType from \"../enums/GateType\";\r\nimport * as Constants from \"../Constants\";\r\nimport LogicState from \"./LogicState\";\r\n\r\n/** Helper function which maps Gate types to svg paths.*/\r\nfunction pathFromGateType(type: GateType) {\r\n  switch (type) {\r\n    case GateType.AND:\r\n    case GateType.NAND:\r\n      return Constants.AND_PATH;\r\n    case GateType.OR:\r\n    case GateType.NOR:\r\n      return Constants.OR_PATH;\r\n    case GateType.XOR:\r\n    case GateType.XNOR:\r\n      return Constants.XOR_PATH;\r\n    case GateType.BUF:\r\n    case GateType.NOT:\r\n      return Constants.BUF_PATH;\r\n    default:\r\n      throw new Error(\"Unsupported Gate Type\")\r\n  }\r\n}\r\n\r\n/** Helper function which indicates of a particular gate type is negated. */\r\nfunction isNot(type: GateType) {\r\n  switch (type) {\r\n    case GateType.NAND:\r\n    case GateType.NOR:\r\n    case GateType.XNOR:\r\n    case GateType.NOT:\r\n      return true;\r\n    case GateType.AND:\r\n    case GateType.OR:\r\n    case GateType.XOR:\r\n    case GateType.BUF:\r\n      return false;\r\n    default:\r\n      throw new Error(`Unsupported Gate Type(${type})`)\r\n  }\r\n}\r\n\r\nfunction maxPins(type: GateType): number {\r\n  switch (type) {\r\n    case GateType.AND:\r\n    case GateType.NAND:\r\n    case GateType.OR:\r\n    case GateType.NOR:\r\n    case GateType.XOR:\r\n    case GateType.XNOR:\r\n      return 4;\r\n    case GateType.BUF:\r\n    case GateType.NOT:\r\n      return 1;\r\n    default:\r\n      throw new Error(`Unsupported Gate Type(${type})`)\r\n  }\r\n}\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"flags\" | \"type\"> {}\r\n\r\n/** Primitive Logic Gates */\r\nclass LogicGate extends LogicComponent {\r\n  static opFuncs: Record<GateType, () => LogicState> = {\r\n    [GateType.AND]: LogicGate.prototype.opAnd,\r\n    [GateType.NAND]: LogicGate.prototype.opNand,\r\n    [GateType.OR]: LogicGate.prototype.opOr,\r\n    [GateType.NOR]: LogicGate.prototype.opNor,\r\n    [GateType.XOR]: LogicGate.prototype.opXor,\r\n    [GateType.XNOR]: LogicGate.prototype.opXnor,\r\n    [GateType.BUF]: LogicGate.prototype.opBuf,\r\n    [GateType.NOT]: LogicGate.prototype.opNot,\r\n    [GateType.UNKNOWN]: () => {throw new Error(\"Unsupported type\")}\r\n  }\r\n\r\n  private readonly opFunc: () => LogicState;\r\n\r\n  constructor(params: IParams) {\r\n    super({flags: 0, type: PartType.GATE, fieldWidth: Math.min(2, maxPins(params.subtype)), ...params});\r\n    this.opFunc = LogicGate.opFuncs[this.subtype].bind(this)\r\n  }\r\n\r\n  /* BEGIN logical gate implementations */\r\n  opAnd(): LogicState {\r\n    let value = this.bitMask();\r\n    let unknown = 0;\r\n    let high_impedance = 0;\r\n\r\n    // Keep track of input zeroes so we can ignore errors from other pins at these outputs\r\n    let zeroes = 0;\r\n\r\n    for (let pin of this.inputPins) {\r\n        // Count zeroes only if no error state exists for that bit.\r\n        zeroes |= ~(pin.state.v | pin.state.x | pin.state.z)\r\n        value &= pin.state.v;\r\n        unknown |= pin.state.x;\r\n        // Treat input z as unknown.\r\n        unknown |= pin.state.z;\r\n    }\r\n\r\n    // An input zero sets the corresponding output bit to zero, so we clear the error states on these bits.\r\n    // Because 0 AND X = 0\r\n    unknown &= ~zeroes;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance,\r\n    });\r\n  }\r\n\r\n  opNand(): LogicState {\r\n    let state = this.opAnd();\r\n    return state.negated(this.width);\r\n  }\r\n\r\n  opOr(): LogicState{\r\n    let value = 0;\r\n    let unknown = 0;\r\n    let high_impedance = 0;\r\n\r\n    for (let pin of this.inputPins) {\r\n      value |= pin.state.v;\r\n      unknown |= pin.state.x;\r\n      // Treat input z as unknown.\r\n      unknown |= pin.state.z;\r\n    }\r\n\r\n    // Unlike AND gates, we can use the value above to indicate an error-free one at an input.\r\n    // An input one sets the corresponding output bit to one, so we clear the error states on these bits.\r\n    // Because 1 OR X = 1\r\n    unknown &= ~value;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance,\r\n    });\r\n  }\r\n\r\n  opNor(): LogicState {\r\n    let state = this.opOr();\r\n    return state.negated(this.width);\r\n  }\r\n\r\n  opXor(): LogicState {\r\n    let value = 0;\r\n    let unknown = 0;\r\n    let high_impedance = 0;\r\n\r\n    for (let pin of this.inputPins) {\r\n      value ^= pin.state.v;\r\n      unknown |= pin.state.x;\r\n      // Treat input z as unknown.\r\n      unknown |= pin.state.z;\r\n    }\r\n\r\n    // We don't ignore errors at inputs for XOR because we need all inputs in every case to determine the output.\r\n\r\n    return new LogicState({\r\n      v: value & ~unknown,\r\n      x: unknown,\r\n      z: high_impedance,\r\n    });\r\n  }\r\n\r\n  opXnor(): LogicState {\r\n    let state = this.opXor();\r\n    return state.negated(this.width);\r\n  }\r\n\r\n  opBuf(): LogicState {\r\n    let [inputPin,] = this.inputPins;\r\n    let value = inputPin.state.v;\r\n    let unknown = inputPin.state.x | inputPin.state.z;\r\n    let high_impedance = 0;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance\r\n    })\r\n  }\r\n\r\n  opNot(): LogicState {\r\n    let [inputPin,] = this.inputPins;\r\n    let unknown = inputPin.state.x | inputPin.state.z;\r\n    let value = ~inputPin.state.v & this.bitMask() & ~unknown;\r\n    let high_impedance = 0;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance\r\n    });\r\n  }\r\n\r\n  operate(): void {\r\n    let logicState = this.opFunc();\r\n    this.postEvent(logicState, this.outputPins[0])\r\n  }\r\n\r\n\r\n  setUpBody(): paper.Item {\r\n    let {CompoundPath} = this.scope;\r\n    return new CompoundPath(pathFromGateType(this.subtype))\r\n  }\r\n\r\n  setUpInputPins(fieldWidth: number): LogicPin[] {\r\n    // Keep pins that fit within tne new field width to maintain old connections\r\n    let inputPins = this.inputPins.slice(0, fieldWidth);\r\n    let nuke = this.inputPins.slice(fieldWidth);\r\n    nuke.forEach(p => p.remove());\r\n\r\n    for (let i = this.fieldWidth; i < fieldWidth; ++i) {\r\n      inputPins.push(new LogicPin({\r\n        parent: this,\r\n        pinType: PinType.INPUT,\r\n        orientation: PinOrientation.LEFT,\r\n        board: this.board,\r\n      }))\r\n    }\r\n\r\n    let offset =\r\n        fieldWidth === 1 ? 16 :\r\n            fieldWidth === 2 ? 32 / 3 :\r\n                fieldWidth === 3 ? 6 :\r\n                    2;\r\n    let spacing =\r\n        fieldWidth === 2 ? 32 / 3 :\r\n            fieldWidth === 3 ? 10 :\r\n                28 / 3;\r\n\r\n    for (let i = 0; i < fieldWidth; ++i) {\r\n      inputPins[i].updateGeometry(new paper.Point(0, offset + i * spacing));\r\n    }\r\n\r\n    return inputPins;\r\n  }\r\n\r\n  setUpOutputPins(): LogicPin[] {\r\n    if (this.outputPins.length > 0) {\r\n      return this.outputPins;\r\n    }\r\n    let pin = new LogicPin({\r\n      parent: this,\r\n      pinType: PinType.OUTPUT,\r\n      orientation: PinOrientation.RIGHT,\r\n      not: isNot(this.subtype),\r\n      board: this.board,\r\n    })\r\n    pin.updateGeometry(new paper.Point(32, 16))\r\n\r\n    return [pin];\r\n  }\r\n\r\n  reset() {\r\n    let [output] = this.outputPins;\r\n    output.setLogicState(new LogicState({x: this.bitMask()}))\r\n  }\r\n}\r\n\r\nexport default LogicGate;","import paper from \"paper/dist/paper-core\";\r\nimport React from \"react\";\r\n\r\nimport LogicComponent, {LogicComponentParams} from \"./LogicComponent\";\r\nimport {BULB_PATH} from \"../Constants\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"flags\" | \"type\"> {\r\n}\r\n\r\n/** Light Bulb implementation */\r\nclass Bulb extends LogicComponent {\r\n  on: boolean = false;\r\n  constructor(params: IParams) {\r\n    super({...params, type: PartType.OUTPUT, flags: 0});\r\n  }\r\n\r\n  operate(): void {\r\n    this.on = this.inputPins[0].state.v === 1;\r\n  }\r\n\r\n  /** Renders the glow of the bulb if the bulb is in the on state */\r\n  extraRender(): React.ReactElement[] {\r\n    // TODO: Render the glow on top of all other components.\r\n    //   SVG renders elements in document order.\r\n    let display = this.on ? \"auto\" : \"none\"\r\n    return [\r\n        <circle key={0} className={\"bulb-glow\"} cx={16} cy={16} r={32} display={display}/>\r\n    ];\r\n  }\r\n\r\n  setUpBody(): paper.Item {\r\n    return new this.scope.Path(BULB_PATH);\r\n  }\r\n\r\n  setUpInputPins(fieldWidth: number): LogicPin[] {\r\n    let {bottom} = this.body.bounds;\r\n    let pin = new LogicPin({\r\n      parent: this,\r\n      pinType: PinType.INPUT,\r\n      orientation: PinOrientation.DOWN,\r\n      board: this.board\r\n    });\r\n\r\n    pin.updateGeometry(new paper.Point(16, bottom));\r\n    return [pin];\r\n  }\r\n\r\n  /** No-op */\r\n  reset() {\r\n  }\r\n\r\n}\r\n\r\nexport default Bulb;","import React from \"react\";\r\n\r\nimport LogicComponent, {LogicComponentParams} from \"./LogicComponent\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicConnection from \"./LogicConnection\";\r\nimport LogicState from \"./LogicState\";\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"flags\" | \"type\" | \"width\"> {}\r\n\r\nclass Clock extends LogicComponent {\r\n  static clockPath: string = \"M4,12L8,12L8,20L16,20L16,12L24,12L24,20L28,20\"\r\n\r\n  constructor(params: IParams) {\r\n    super({...params, type: PartType.INPUT, flags: 0, delay: 10});\r\n    let [output] = this.outputPins\r\n    // This hack ensures that the clock triggers itself to change.\r\n    let selfConnection = new LogicConnection({source: output, sink: output})\r\n    output.connections.set(output.uuid, selfConnection);\r\n  }\r\n\r\n  operate(): void {\r\n    let s = this.outputPins[0].state.negated(1);\r\n    this.postEvent(s);\r\n  }\r\n\r\n  setUpBody(fieldWidth: number): paper.Item {\r\n    let {Path, Point, Size} = this.scope;\r\n    return new Path.Rectangle(new Point(0, 0), new Size(32, 32));\r\n\r\n  }\r\n\r\n  setUpOutputPins(fieldWidth: number): LogicPin[] {\r\n    let pin = new LogicPin({\r\n      parent: this,\r\n      pinType: PinType.OUTPUT,\r\n      orientation: PinOrientation.RIGHT,\r\n      board: this.board\r\n    })\r\n    pin.updateGeometry(new this.scope.Point(32, 16));\r\n    return [pin];\r\n  }\r\n\r\n  extraRender(): React.ReactElement[] {\r\n    return [\r\n      <path className=\"decoration\" key={0} d={Clock.clockPath} fill=\"none\"/>\r\n    ];\r\n  }\r\n\r\n  reset() {\r\n    let [output] = this.outputPins;\r\n    output.setLogicState(new LogicState({v: 0}));\r\n    this.operate();\r\n  }\r\n}\r\n\r\nexport default Clock;","import React from \"react\";\r\n\r\nimport LogicComponent, {LogicComponentParams} from \"./LogicComponent\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicState from \"./LogicState\";\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"flags\" | \"type\"> {}\r\n\r\nclass Switch extends LogicComponent {\r\n    constructor(params: IParams) {\r\n        super({...params, type: PartType.INPUT, flags: 0});\r\n    }\r\n\r\n    operate(): void {\r\n    }\r\n\r\n    setUpBody(fieldWidth: number): paper.Item {\r\n        let {Path, Point, Size} = this.scope;\r\n        return new Path.Rectangle(new Point(0, 0), new Size(32 * this.width, 32));\r\n    }\r\n\r\n    setUpOutputPins(fieldWidth: number): LogicPin[] {\r\n        let pin = new LogicPin({\r\n            parent: this,\r\n            pinType: PinType.OUTPUT,\r\n            orientation: PinOrientation.RIGHT,\r\n            board: this.board,\r\n            width: this.width,\r\n        });\r\n\r\n        pin.updateGeometry(new this.scope.Point(32*this.width, 16));\r\n\r\n        return [pin];\r\n    }\r\n\r\n    extraRender(): React.ReactElement[] {\r\n        let [pin] = this.outputPins\r\n        let extras = []\r\n        for (let i = 0; i < this.width; i++) {\r\n            let classnames = [\"switch\"]\r\n            let stateString = \"0\"\r\n            if ((pin.state.v >> i) & 1) {\r\n                classnames.push(\"on\")\r\n                stateString = \"1\"\r\n            }\r\n\r\n            let x = 16 + 32 * (this.width - i - 1);\r\n            let y = 16;\r\n\r\n            extras.push(\r\n                <circle key={i}\r\n                        className={classnames.join(' ')}\r\n                        cx={x}\r\n                        cy={y}\r\n                        r={12}\r\n                        onClick={this.handleClick.bind(this, i)}/>\r\n            )\r\n            extras.push(\r\n                <text className=\"center\" color=\"red\" x={x} y={y}>\r\n                    {stateString}\r\n                </text>\r\n            )\r\n        }\r\n        return extras\r\n\r\n    }\r\n\r\n    handleClick(i: number) {\r\n        let [pin] = this.outputPins;\r\n        let v = (pin.state.v ^ (1 << i));\r\n        pin.setLogicState(new LogicState({\r\n            v: v\r\n        }));\r\n        this.update();\r\n    }\r\n\r\n    /** Intentionally no-op */\r\n    reset(): void { }\r\n}\r\n\r\nexport default Switch;","import React from \"react\";\r\n\r\nimport LogicComponent, {LogicComponentParams} from \"./LogicComponent\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicState from \"./LogicState\";\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"flags\" | \"type\"> {}\r\n\r\nclass Adder extends LogicComponent {\r\n\r\n    constructor(params: IParams) {\r\n        super({...params, type: PartType.COMPOSITE_BUILT_IN, flags: 0, delay: 1});\r\n    }\r\n\r\n    operate(): void {\r\n        if (this.subtype === 0) {\r\n\r\n            // Half-adder\r\n            let a = this.inputPins[0].state;\r\n            let b = this.inputPins[1].state;\r\n            if (a.x === 0 && a.z === 0 && b.x === 0 && b.z === 0) {\r\n                // No input related errors\r\n                let cout = (a.v & b.v );\r\n                let sum  = (a.v ^ b.v);\r\n\r\n                this.postEvent(new LogicState({v: sum}), this.outputPins[0])\r\n                this.postEvent(new LogicState({v: cout}), this.outputPins[1])\r\n            } else {\r\n                this.postEvent(new LogicState({x: 1}), this.outputPins[0])\r\n                this.postEvent(new LogicState({x: 1}), this.outputPins[1])\r\n            }\r\n        } else {\r\n\r\n            // Adder\r\n            let a = this.inputPins[0].state;\r\n            let b = this.inputPins[1].state;\r\n            let cin = this.inputPins[2].state;\r\n            let sum = a.v + b.v + cin.v;\r\n            let cout = sum >> this.width;\r\n            let error = a.x | b.x | cin.x | a.z | b.z | cin.z\r\n\r\n            for (let i = 0; i < this.width; i++) {\r\n                if ((error >> i) & 1) {\r\n                    // Input related error, set everything else to x\r\n                    error = -1 & ~this.bitMask(i + 1) & this.bitMask();\r\n                    break;\r\n                }\r\n            }\r\n\r\n            sum &= ~error & this.bitMask();\r\n\r\n            this.postEvent(new LogicState({v: sum, x: error}), this.outputPins[0]);\r\n            if (error) {\r\n                this.postEvent( new LogicState({x: 1}), this.outputPins[1]);\r\n            } else {\r\n                this.postEvent(new LogicState({v: cout}), this.outputPins[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    setUpBody(fieldWidth: number): paper.Item {\r\n        let {Path, Point, Size} = this.scope;\r\n        return new Path.Rectangle(new Point(0, 0), new Size(48, 32));\r\n\r\n    }\r\n\r\n    setUpOutputPins(fieldWidth: number): LogicPin[] {\r\n        let sum = new LogicPin({\r\n            parent: this,\r\n            pinType: PinType.OUTPUT,\r\n            orientation: PinOrientation.UP,\r\n            board: this.board,\r\n            width: this.width\r\n        });\r\n\r\n        let cout = new LogicPin({\r\n            parent: this,\r\n            pinType: PinType.OUTPUT,\r\n            orientation: PinOrientation.LEFT,\r\n            board: this.board\r\n        });\r\n\r\n        sum.updateGeometry(new this.scope.Point(24, 0));\r\n        cout.updateGeometry(new this.scope.Point(0, 16));\r\n\r\n        return [sum, cout];\r\n    }\r\n\r\n    setUpInputPins(fieldWidth: number): LogicPin[] {\r\n        let a = new LogicPin({\r\n            parent: this,\r\n            pinType: PinType.INPUT,\r\n            orientation: PinOrientation.DOWN,\r\n            board: this.board,\r\n            width: this.width\r\n        });\r\n        a.updateGeometry(new this.scope.Point(16, 32));\r\n\r\n        let b = new LogicPin({\r\n            parent: this,\r\n            pinType: PinType.INPUT,\r\n            orientation: PinOrientation.DOWN,\r\n            board: this.board,\r\n            width: this.width\r\n        });\r\n        b.updateGeometry(new this.scope.Point(32, 32));\r\n\r\n        if (this.subtype === 0) {\r\n            // Half Adder does not have a carry in\r\n            return [a, b];\r\n        }\r\n\r\n        let cin = new LogicPin({\r\n            parent: this,\r\n            pinType: PinType.INPUT,\r\n            orientation: PinOrientation.RIGHT,\r\n            board: this.board\r\n        });\r\n        cin.updateGeometry(new this.scope.Point(48, 16));\r\n\r\n        return [a, b, cin];\r\n    }\r\n\r\n    extraRender(): React.ReactElement[] {\r\n        return [\r\n            <>\r\n                <text className=\"top\" x={24} y={0}>S</text>\r\n                <text className=\"left\" x={0} y={16}>C<tspan>out</tspan></text>\r\n                <text className=\"bottom\" x={16} y={32}>A</text>\r\n                <text className=\"bottom\" x={32} y={32}>B</text>\r\n                {this.subtype === 1 && <text className=\"right\" x={48} y={16}>C<tspan>in</tspan></text>}\r\n            </>\r\n        ];\r\n    }\r\n\r\n    reset() {\r\n    }\r\n}\r\n\r\nexport default Adder;","import GateType from \"../enums/GateType\";\r\nimport LogicComponent from \"../logic/LogicComponent\";\r\nimport LogicGate from \"../logic/LogicGate\";\r\nimport PartType from \"../enums/PartType\";\r\nimport {GLOBAL_SCOPE} from \"../Constants\";\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\nimport Bulb from \"../logic/Bulb\";\r\nimport Clock from \"../logic/Clock\";\r\nimport Switch from \"../logic/Switch\";\r\nimport paper from \"paper\";\r\nimport Adder from \"../logic/Adder\";\r\n\r\ninterface PartParams {\r\n  type: PartType,\r\n  subtype: GateType,\r\n  label?: string;\r\n}\r\n\r\n/**\r\n * Part is a factory class used to generate logic components.\r\n */\r\nclass Part {\r\n  readonly subtype: GateType;\r\n  readonly type: PartType;\r\n  readonly label: string;\r\n  static data?: Part;\r\n  component: LogicComponent;\r\n\r\n  constructor(params: PartParams) {\r\n    this.type = params.type;\r\n    this.subtype = params.subtype;\r\n    this.label = params.label ?? \"<NO LABEL>\";\r\n    this.component = this.make();\r\n  }\r\n\r\n  make(board?: LogicBoard): LogicComponent {\r\n    let scope = board?.scope ?? GLOBAL_SCOPE;\r\n    switch (this.type) {\r\n      case PartType.GATE:\r\n        return new LogicGate({subtype: this.subtype, scope: scope, board: board});\r\n      case PartType.OUTPUT:\r\n        return new Bulb({subtype: 0, board: board, scope: scope});\r\n      case PartType.INPUT:\r\n        return this.makeInput(this.subtype, scope, board);\r\n      case PartType.COMPOSITE_BUILT_IN:\r\n        return this.makeComposite(this.subtype, scope, board);\r\n\r\n      default:\r\n        throw new Error(\"Unsupported Part Type\");\r\n    }\r\n  }\r\n\r\n  makeInput(subtype: number, scope: paper.PaperScope, board?: LogicBoard) {\r\n    switch (subtype){\r\n      case 0:\r\n        return new Clock({board: board, scope: scope, subtype: 0})\r\n      case 1:\r\n        return new Switch({subtype: 1, board: board, scope: scope})\r\n      default:\r\n        throw new Error(\"Unsupported Part Type\");\r\n    }\r\n  }\r\n\r\n  makeComposite(subtype: number, scope: paper.PaperScope, board?: LogicBoard) {\r\n    switch (subtype) {\r\n      // Intentional fall through\r\n      case 0: // Half Adder\r\n      case 1: // Full Adder\r\n            return new Adder({subtype: this.subtype, scope: scope, board: board});\r\n      default:\r\n        throw new Error(\"Unsupported Component Type\")\r\n    }\r\n  }\r\n}\r\n\r\nexport default Part;","import React from \"react\";\r\nimport Button from \"@mui/material/Button\"\r\nimport Collapse from \"@mui/material/Collapse\"\r\nimport Divider from \"@mui/material/Divider\"\r\nimport ListItem from \"@mui/material/ListItem\"\r\nimport Paper from \"@mui/material/Paper\"\r\nimport {faChevronRight} from \"@fortawesome/free-solid-svg-icons/faChevronRight\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Part from \"./Part\";\r\nimport \"../css/PartsDrawer.css\"\r\n\r\ninterface IProps {\r\n  label: string,\r\n  parts: Array<Part>,\r\n}\r\ninterface IState {\r\n  collapsed: boolean,\r\n}\r\n\r\n/**\r\n * A container which renders multiple parts together, and enables parts to be dragged and dropped onto a board\r\n *\r\n * For organizational purposes, a full suite of components may consist of multiple drawers.\r\n * */\r\nclass PartsDrawer extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      collapsed: true,\r\n    }\r\n  }\r\n\r\n  renderPart(part: Part) {\r\n    let component = part.component;\r\n    let element = component.render();\r\n    let {label} = part\r\n    let {left, top, width, height} = component.geometry.bounds;\r\n    left -= 2;\r\n    top -= 2;\r\n    width += 4;\r\n    height += 4;\r\n\r\n    let id = label.replace(' ', '_');\r\n    return (\r\n        <Paper\r\n            elevation={3}\r\n            classes={{root: 'part'}}\r\n            key={component.uuid}\r\n            draggable\r\n            onDragStart={this.handleDragStart.bind(this, id, part)}\r\n            onDragEnd={this.handleDragEnd.bind(this)}\r\n        >\r\n          <div className=\"part-image-container\">\r\n            <svg className=\"part-image\" id={id} viewBox={`${left} ${top} ${width} ${height}`} width={width} height={height}>\r\n              {element}\r\n            </svg>\r\n          </div>\r\n          <div className=\"part-label\">{label}</div>\r\n        </Paper>\r\n    )\r\n  }\r\n\r\n  handleDragStart(id: string, part: Part, e: React.DragEvent<HTMLElement>) {\r\n    Part.data = part;\r\n\r\n    let elem = document.getElementById(id) as HTMLElement;\r\n\r\n    let {x, y} = part.component.geometry.bounds.center;\r\n\r\n    e.dataTransfer.setDragImage(elem, x+2, y+2);\r\n    e.dataTransfer.effectAllowed = \"move\";\r\n\r\n  }\r\n\r\n  handleDragEnd() {\r\n    Part.data = undefined;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <>\r\n          <ListItem dense>\r\n            <Button sx={{width: '100%', borderRadius: '10px'}}\r\n                    variant={'contained'}\r\n                    classes={{endIcon: 'drawer-handle-icon-container'}}\r\n                    onClick={this.handleClick.bind(this)}\r\n                    endIcon={\r\n                      <FontAwesomeIcon className={'drawer-handle-icon'}\r\n                                       icon={faChevronRight}\r\n                                       rotation={!this.state.collapsed ? 90 : undefined}/>\r\n                    }>\r\n              <span style={{flexGrow: 1}}>{this.props.label}</span>\r\n            </Button>\r\n          </ListItem>\r\n\r\n          <Collapse classes={{wrapperInner: \"drawer-contents\"}} in={!this.state.collapsed} timeout=\"auto\">\r\n            {this.props.parts.map(this.renderPart.bind(this))}\r\n          </Collapse>\r\n          <Divider/>\r\n        </>\r\n  )\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState((state) => {\r\n      return {\r\n        collapsed: !state.collapsed,\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default PartsDrawer;","import React from \"react\";\r\nimport Box from \"@mui/material/Box\"\r\nimport List from \"@mui/material/List\"\r\nimport ListSubheader from \"@mui/material/ListSubheader\"\r\nimport Paper from \"@mui/material/Paper\"\r\nimport Tab from \"@mui/material/Tab\"\r\nimport Tabs from \"@mui/material/Tabs\"\r\nimport Part from \"./Part\";\r\n\r\nimport PartsDrawer from \"./PartsDrawer\";\r\nimport \"../css/Sidebar.css\"\r\n\r\n\r\nfunction a11yProps(index: number) {\r\n  return {\r\n    id: `vertical-tab-${index}`,\r\n    'aria-controls': `vertical-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\n\r\ninterface IProps {\r\n  parts: Map<string, Part[]>;\r\n}\r\ninterface IState {\r\n  open: boolean;\r\n  activeTab: string | false;\r\n}\r\n\r\n/**\r\n * Generic container which expands to show contents on mouse hover\r\n *\r\n * Needs work, and may be replaced.\r\n */\r\nclass Sidebar extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n      activeTab: false,\r\n    }\r\n  }\r\n\r\n  renderUnderlay() {\r\n    let sidebarClasses = [\"sidebar\"]\r\n    if (!this.state.activeTab) {\r\n      sidebarClasses.push(\"collapsed\");\r\n    }\r\n    let classNames = sidebarClasses.join(' ');\r\n    return (\r\n        <Box className={classNames}>\r\n          <Paper classes={{root: \"sidebar-content\"}}/>\r\n        </Box>\r\n    );\r\n  }\r\n\r\n  renderPartsView() {\r\n    let sidebarClasses = [\"sidebar\"]\r\n    if (\"Parts\".localeCompare(this.state.activeTab || \"\")) {\r\n      sidebarClasses.push(\"collapsed\");\r\n    }\r\n    let classNames = sidebarClasses.join(' ');\r\n    return (\r\n        <Box className={classNames}>\r\n          <Paper classes={{root: \"sidebar-content\"}} sx={{pointerEvents: \"auto\"}}>\r\n            <List\r\n                subheader={<ListSubheader>Parts</ListSubheader>}\r\n            >\r\n              {[...this.props.parts.entries()].map(([label, parts]) => (\r\n                <PartsDrawer key={label} label={label} parts={parts}/>\r\n                ))}\r\n            </List>\r\n          </Paper>\r\n        </Box>\r\n    );\r\n  }\r\n\r\n  renderProjectView() {\r\n    let sidebarClasses = [\"sidebar\"]\r\n    if (\"Project\".localeCompare(this.state.activeTab || \"\")) {\r\n      sidebarClasses.push(\"collapsed\");\r\n    }\r\n    let classNames = sidebarClasses.join(' ');\r\n    return (\r\n      <Box className={classNames}>\r\n        <Paper classes={{root: \"sidebar-content\"}} sx={{pointerEvents: \"auto\"}}>\r\n          [Project View Placeholder]\r\n        </Paper>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  renderTab(label: string, index: number) {\r\n    return (\r\n    <Tab label={\r\n      <Box sx={{\r\n        writingMode: \"vertical-rl\",\r\n        textOrientation: \"mixed\",\r\n        transform: \"rotate(180deg)\"}}>{label}</Box>}\r\n         value={label} {...a11yProps(index)}\r\n         sx={{minWidth: \"48px\"}}\r\n         onClick={this.handleTabClick.bind(this, label)}/>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <>\r\n          <Tabs\r\n              orientation=\"vertical\"\r\n              variant=\"scrollable\"\r\n              value={this.state.activeTab}\r\n              onChange={this.handleTabChange.bind(this)}\r\n              aria-label=\"Side Controls\"\r\n              sx={{ borderRight: 1, borderColor: 'divider', flexShrink: 0, minWidth: '48px'}}\r\n          >\r\n            {this.renderTab(\"Project\", 0)}\r\n            {this.renderTab(\"Parts\", 1)}\r\n          </Tabs>\r\n          <div style={{position: \"absolute\", left: \"50px\", width: \"100%\", height: \"100%\", overflow: \"hidden\", pointerEvents: \"none\"}}>\r\n            {this.renderUnderlay()}\r\n            {this.renderProjectView()}\r\n            {this.renderPartsView()}\r\n          </div>\r\n        </>\r\n    );\r\n  }\r\n\r\n  handleTabClick(value: string, e: React.MouseEvent<HTMLElement>) {\r\n    if (value.localeCompare(this.state.activeTab || \"\") === 0) {\r\n      this.setState({activeTab: false})\r\n    }\r\n  }\r\n\r\n  handleTabChange(e: React.SyntheticEvent, newValue: string) {\r\n    this.setState({activeTab: newValue})\r\n  }\r\n\r\n  handleMouseEnter(e: React.MouseEvent<HTMLElement>) {\r\n    this.setState({open: true});\r\n  }\r\n}\r\n\r\nexport default Sidebar;","import paper from \"paper\";\r\nimport React from \"react\";\r\n\r\nimport '../css/Board.css';\r\nimport Part from \"./Part\";\r\nimport LogicComponent from \"../logic/LogicComponent\";\r\nimport {GateEventHandlers} from \"./Component\";\r\nimport LogicPin, {PinType} from \"../logic/LogicPin\";\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\n\r\n\r\ninterface MouseEventMapping {\r\n    /** The x-coordinate in svg coordinates */\r\n    x: number,\r\n    /** The y-coordinate in svg coordinates */\r\n    y: number,\r\n    /**\r\n     * The x-coordinate as the relative position within the viewBox\r\n     * <br>\r\n     * 0 is the left side of the viewBox, and 1 is the right side of the viewBox\r\n     * */\r\n    rx: number,\r\n    /**\r\n     * The y-coordinate as the relative position within the viewBox\r\n     * <br>\r\n     * 0 is the top side of the viewBox, and 1 is the bottom side of the viewBox\r\n     * */\r\n    ry: number,\r\n    /** The horizontal distance moved in svg coordinate space since the last mouse event */\r\n    dx: number,\r\n    /** The vertical distance moved in svg coordinate space since the last mouse event */\r\n    dy: number,\r\n}\r\n\r\ninterface IProps {\r\n    board: LogicBoard;\r\n}\r\n\r\ninterface IState {\r\n    /** The size and offset of our view onto the board. */\r\n    viewBox: {\r\n        left: number,\r\n        top: number,\r\n        width: number,\r\n        height: number,\r\n    },\r\n    /** The size on the page of the board */\r\n    viewPort: {\r\n        width: number,\r\n        height: number,\r\n    },\r\n    scaleFactor: number,\r\n    pan: boolean,\r\n    drag: boolean,\r\n}\r\n\r\n/**\r\n * React Component implementation of LogicBoard\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Board extends React.Component<IProps, IState> {\r\n    private ref: React.RefObject<any>;\r\n    private resizeObserer?: ResizeObserver;\r\n    private sPoint: paper.Point | undefined;\r\n    private select: paper.Path | null;\r\n\r\n    constructor(props: Readonly<IProps>) {\r\n        super(props);\r\n\r\n        this.select = null;\r\n        // @ts-ignore\r\n        this.state = {\r\n            viewBox: {\r\n                left: 0,\r\n                top: 0,\r\n                width: 800,\r\n                height: 600,\r\n            },\r\n            viewPort: {\r\n              width: 0,\r\n              height: 0,\r\n            },\r\n            scaleFactor: 1,\r\n            pan: false,\r\n            drag: false,\r\n        }\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    /** Resize handler to make sure the board doesn't scale up when the window is resized */\r\n    onResize(entries: ResizeObserverEntry[]) {\r\n        let {width, height} = entries[0].contentRect;\r\n        this.setState((state) => {\r\n            return {\r\n                viewPort: {\r\n                    width: width,\r\n                    height: height,\r\n                },\r\n                viewBox: {\r\n                    left: state.viewBox.left,\r\n                    top: state.viewBox.top,\r\n                    width: width * state.scaleFactor,\r\n                    height: height * state.scaleFactor,\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called after this component is rendered to the DOM\r\n     * <br>\r\n     * This is useful to perform initialization which requires this component or it's children to have been rendered.\r\n     * @see {@link https://reactjs.org/docs/react-component.html#componentdidmount componentDidMount}\r\n     * */\r\n    componentDidMount() {\r\n        this.setState({});\r\n        let board = this.ref.current;\r\n        this.resizeObserer = new ResizeObserver(this.onResize.bind(this));\r\n        this.resizeObserer.observe(board)\r\n    }\r\n\r\n    /**\r\n     * Called before this element will be removed from the DOM\r\n     * <br>\r\n     * Generally used to clean up any bindings set up in {@link componentDidMount}, and other stray bindings.\r\n     * @see {@link https://reactjs.org/docs/react-component.html#componentwillunmount componentWillUnmount} */\r\n    componentWillUnmount() {\r\n        this.resizeObserer?.disconnect();\r\n    }\r\n\r\n    /** SVG definitions referenced by other svg elements. */\r\n    defs() {\r\n        return (\r\n            <defs key=\"defs\">\r\n                <pattern id=\"grid\" x={0} y={0} width={80} height={80} viewBox=\"0 0 80 80\" patternUnits=\"userSpaceOnUse\">\r\n                    <path className=\"grid\" d=\"M 0 0 L 0 80\" strokeWidth=\"2\"/>\r\n                    <path className=\"grid\" d=\"M 10 0 L 10 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 20 0 L 20 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 30 0 L 30 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 40 0 L 40 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 50 0 L 50 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 60 0 L 60 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 70 0 L 70 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 80 0 L 80 80\" strokeWidth=\"2\"/>\r\n\r\n                    <path className=\"grid\" d=\"M 0 0 L 80 0\" strokeWidth=\"2\"/>\r\n                    <path className=\"grid\" d=\"M 0 10 L 80 10\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 20 L 80 20\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 30 L 80 30\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 40 L 80 40\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 50 L 80 50\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 60 L 80 60\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 70 L 80 70\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 80 L 80 80\" strokeWidth=\"2\"/>\r\n                </pattern>\r\n\r\n                <pattern id=\"bus\" x={0} y={0} width={3} height={3} viewBox=\"0 0 3 3\" patternUnits=\"userSpaceOnUse\">\r\n                    <rect x={2} y={0} width={1} height={1} fill=\"black\"/>\r\n                    <rect x={1} y={1} width={1} height={1} fill=\"black\"/>\r\n                    <rect x={0} y={2} width={1} height={1} fill=\"black\"/>\r\n                </pattern>\r\n\r\n                <radialGradient id=\"bulb-glow\">\r\n                    <stop offset=\"0%\" stopColor=\"rgb(255, 255, 128)\" />\r\n                    <stop offset=\"100%\" stopColor=\"rgba(255, 255, 255, 0)\" />\r\n                </radialGradient>\r\n            </defs>\r\n        );\r\n    }\r\n\r\n    /** Draws the grid background as a repeated pattern on a rectangle which exactly fills the viewBox */\r\n    renderGrid() {\r\n        const left = this.state.viewBox.left,\r\n            width = this.state.viewBox.width,\r\n            top = this.state.viewBox.top,\r\n            height = this.state.viewBox.height;\r\n\r\n        return <rect key=\"grid\" x={left} y={top} width={width} height={height} fill=\"url(#grid)\"/>;\r\n    }\r\n\r\n    render() {\r\n        const left = this.state.viewBox.left,\r\n            width = this.state.viewBox.width,\r\n            top = this.state.viewBox.top,\r\n            height = this.state.viewBox.height;\r\n\r\n        let selectionBox = (this.select?.exportSVG() as SVGElement)?.getAttribute('d');\r\n\r\n        let handlers: GateEventHandlers = {\r\n            onGateMouseDown: this.handleGateMouseDown.bind(this),\r\n            onGateMouseUp: this.handleGateMouseUp.bind(this),\r\n            onGateContextMenu: this.handleGateContextMenu.bind(this),\r\n            onPinMouseDown: this.handlePinMouseDown.bind(this),\r\n        }\r\n\r\n        let renderedConnections: JSX.Element[] = [];\r\n        this.props.board.connections.forEach((c) => renderedConnections.push(c.render()));\r\n\r\n        let renderedComponents: JSX.Element[] = [];\r\n        this.props.board.components.forEach((c) => renderedComponents.push(c.render(handlers)));\r\n\r\n        // Nested svgs is a hack to allow resizing the viewPort without scaling the contents.\r\n        // When the viewport is resized, the inner svg's viewBox is updated so it exactly fits the outer SVG's viewport.\r\n        // Normally, an svg element with a defined viewBox is forced to fit the aspect ratio of its viewbox.\r\n        return (\r\n            <div\r\n                ref={this.ref}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\"\r\n                }}\r\n            >\r\n                <svg className=\"board-wrapper\" style={this.state.viewPort}\r\n                     xmlns=\"http://www.w3.org/2000/svg\"\r\n                     onWheel={(e)=> this.handleWheel(e)}\r\n                     onMouseMove={(e) => this.handleMouseMove(e)}\r\n                     onMouseDown={(e) => this.handleMouseDown(e)}\r\n                     onMouseUp={(e) => this.handleMouseUp(e)}\r\n                     onMouseLeave={(e) => this.handleMouseExit(e)}\r\n                     onDragEnter={this.handleDragEnter.bind(this)}\r\n                     onDragOver={(e) => this.handleDragOver(e)}\r\n                     onDrop={(e) => this.handleDrop(e)}\r\n                >\r\n                    <svg className=\"board\"\r\n                         preserveAspectRatio=\"xMinYMin slice\"\r\n                         xmlns=\"http://www.w3.org/2000/svg\"\r\n                         viewBox={`${left} ${top} ${width} ${height}`}\r\n                         onScroll={() => console.log(\"scroll\")}\r\n                    >\r\n                        {this.defs()}\r\n                        {this.renderGrid()}\r\n                        <circle className={\"origin\"} x=\"0\" y=\"0\" r=\"40\" fill=\"red\"/>\r\n                        {renderedConnections}\r\n                        {renderedComponents}\r\n                        {selectionBox &&\r\n                        <path className=\"select\" d={selectionBox} vectorEffect=\"non-scaling-stroke\"/>\r\n                        }\r\n                    </svg>\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /** Unselects all selected items */\r\n    clearSelection() {\r\n        for(let item of this.scope.project.selectedItems) {\r\n            item.selected = false;\r\n        }\r\n    }\r\n\r\n    /**  Maps a mouse event's position on the page to the viewBox coordinates */\r\n    getViewCoordinates(e: React.MouseEvent<SVGSVGElement, MouseEvent>): MouseEventMapping {\r\n        let rect = e.currentTarget.getBoundingClientRect();\r\n        const l = rect.left,\r\n            t = rect.top,\r\n            w = rect.width,\r\n            h = rect.height;\r\n\r\n        const localX = e.pageX - l,\r\n            localY = e.pageY - t;\r\n\r\n        const dLocalX = e.movementX,\r\n            dLocalY = e.movementY;\r\n\r\n        const viewWidth = this.state.viewBox.width,\r\n            viewHeight = this.state.viewBox.height;\r\n\r\n        const viewRelativeX = localX / w,\r\n            viewRelativeY = localY / h,\r\n            viewX = this.state.viewBox.left + viewRelativeX * viewWidth,\r\n            viewY = this.state.viewBox.top + viewRelativeY * viewHeight,\r\n            dX = dLocalX / w * viewWidth,\r\n            dY = dLocalY / h * viewHeight;\r\n\r\n        return {\r\n            x: viewX,\r\n            y: viewY,\r\n            rx: viewRelativeX,\r\n            ry: viewRelativeY,\r\n            dx: dX,\r\n            dy: dY,\r\n        }\r\n    }\r\n\r\n    /*\r\n    Event handlers and associated helpers\r\n     */\r\n    enableDrag(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        e.stopPropagation()\r\n        this.setState({drag: true})\r\n    }\r\n\r\n    disableDrag(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        e.stopPropagation()\r\n        this.setState({drag: false})\r\n    }\r\n\r\n    handleDragEnter(e: React.DragEvent<SVGSVGElement>) {\r\n        e.preventDefault();\r\n        e.dataTransfer.effectAllowed = \"move\";\r\n    }\r\n\r\n    handleDragOver(e: React.DragEvent<SVGSVGElement>) {\r\n        e.preventDefault();\r\n        e.dataTransfer.effectAllowed = \"move\";\r\n    }\r\n\r\n    handleDrop(e: React.DragEvent<SVGSVGElement>) {\r\n        e.preventDefault();\r\n        let {x, y} = this.getViewCoordinates(e);\r\n        let part = Part.data as Part;\r\n        if (!part) {\r\n            return\r\n        }\r\n        let component = part.make(this.props.board);\r\n        component.geometry.translate(new paper.Point(x - 16, y - 16))\r\n\r\n        this.props.board.addComponent(component);\r\n\r\n        this.setState({})\r\n    }\r\n\r\n    handleMouseDown(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        // This is only called if neither a pin nor component is clicked.\r\n        this.clearSelection();\r\n        const {Path, Point, Rectangle, Size} = this.props.board.scope;\r\n        // this.setState({pan: true});\r\n        const {x, y} = this.getViewCoordinates(e);\r\n        this.sPoint = new Point(x, y);\r\n        let rect = new Rectangle(this.sPoint, new Size(0, 0))\r\n        this.select = new Path.Rectangle(rect)\r\n        this.setState({})\r\n    }\r\n\r\n    handleMouseUp(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        // this.setState({pan: false});\r\n        if (this.select) {\r\n            this.select.remove()\r\n            this.select = null;\r\n        }\r\n\r\n        this.setState({pan: false, drag: false});\r\n    }\r\n\r\n    handleMouseExit(_e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n\r\n        if (this.select) {\r\n            this.select.remove()\r\n            this.select = null;\r\n        }\r\n        this.setState({pan: false, drag: false})\r\n    }\r\n\r\n    isSelected(item: paper.Item): boolean {\r\n        const select = this.select as paper.Item;\r\n        const selectionRect = select.bounds;\r\n        // let clone = item.clone();\r\n        // clone.transform(item.parent.matrix)\r\n        // let isSelected = clone.intersects(select) || clone.isInside(selectionRect) || clone.contains(selectionRect.center)\r\n        // clone.remove()\r\n\r\n        let matrix = item.parent.matrix;\r\n        let imatrix = matrix.inverted();\r\n        item.transform(matrix)\r\n        let isSelected = item.intersects(select) || item.isInside(selectionRect) || item.contains(selectionRect.center)\r\n        item.transform(imatrix)\r\n        return isSelected\r\n    }\r\n\r\n    handleMouseMove(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        let {x, y, dx, dy} = this.getViewCoordinates(e)\r\n\r\n        if (this.state.drag) {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n\r\n            let selected = this.props.board.scope.project.getItems({\r\n                selected: true,\r\n                data: {\r\n                    type: 'Component',\r\n                }\r\n            });\r\n\r\n            for (let s of selected) {\r\n                let dp = new paper.Point(dx, dy);\r\n                s.parent.translate(dp)\r\n                // for (let c of s.parent.children) {\r\n                //     c.translate(dp)\r\n                // }\r\n            }\r\n            this.setState({});\r\n\r\n        }\r\n\r\n        if (this.select && this.sPoint) {\r\n            let select = this.select;\r\n            const [sx, sy] = [this.sPoint.x, this.sPoint.y]\r\n\r\n            if (x === sx && y === sy) {\r\n                for (let s of select.segments) {\r\n                    s.point = this.sPoint;\r\n                }\r\n            }\r\n\r\n            if (x <= sx) {\r\n                select.segments[0].point.x = x\r\n                select.segments[1].point.x = x\r\n                select.segments[2].point.x = sx\r\n                select.segments[3].point.x = sx\r\n            }\r\n            if (x >= sx) {\r\n                select.segments[0].point.x = sx\r\n                select.segments[1].point.x = sx\r\n                select.segments[2].point.x = x\r\n                select.segments[3].point.x = x\r\n            }\r\n            if (y <= sy) {\r\n                select.segments[0].point.y = sy\r\n                select.segments[1].point.y = y\r\n                select.segments[2].point.y = y\r\n                select.segments[3].point.y = sy\r\n            }\r\n            if (y >= sy) {\r\n                select.segments[0].point.y = y\r\n                select.segments[1].point.y = sy\r\n                select.segments[2].point.y = sy\r\n                select.segments[3].point.y = y\r\n            }\r\n\r\n            const {project} = this.props.board.scope;\r\n\r\n            let components = project.getItems({\r\n                data: {\r\n                    type: 'Component'\r\n                }\r\n            })\r\n\r\n            let sc = false;\r\n\r\n            for (let component of components) {\r\n                if (this.isSelected(component)) {\r\n                    sc = true;\r\n                    component.selected = true;\r\n                } else {\r\n                    component.selected = false;\r\n                }\r\n            }\r\n\r\n            let pins = project.getItems({\r\n                data: {\r\n                    type: 'Pin'\r\n                }\r\n            })\r\n\r\n            for (let pin of pins) {\r\n                pin.selected = !sc && this.isSelected(pin);\r\n            }\r\n\r\n            this.setState({});\r\n            this.forceUpdate();\r\n        }\r\n\r\n        if (this.state.pan) {\r\n            this.setState({\r\n                viewBox: {\r\n                    top: this.state.viewBox.top - dy,\r\n                    left: this.state.viewBox.left - dx,\r\n                    width: this.state.viewBox.width,\r\n                    height: this.state.viewBox.height,\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    static between(a: number , b: number, c: number) {\r\n        return Math.min(Math.max(a, b), c);\r\n    }\r\n\r\n    handleWheel(e: React.WheelEvent<SVGSVGElement>)  {\r\n        let {x, y, rx, ry} = this.getViewCoordinates(e);\r\n\r\n        const viewWidth = this.state.viewPort.width,\r\n              viewHeight = this.state.viewPort.height;\r\n\r\n        const MIN_SCALE = 1 / 16.0;\r\n        const MAX_SCALE = 4.0;\r\n        const {scaleFactor} = this.state;\r\n\r\n        const newScaleFactor = Board.between(MIN_SCALE, Math.pow(2, e.deltaY / 1000) * scaleFactor, MAX_SCALE),\r\n              newWidth = viewWidth * newScaleFactor,\r\n              newHeight = viewHeight * newScaleFactor;\r\n\r\n        const newViewBox = {\r\n            left: x - rx * newWidth,\r\n            top: y - ry * newHeight,\r\n            width: newWidth,\r\n            height: newHeight,\r\n        };\r\n\r\n        this.setState({\r\n            scaleFactor: newScaleFactor,\r\n            viewBox: newViewBox,\r\n        });\r\n    }\r\n\r\n\r\n    handleGateMouseDown(logicComponent: LogicComponent, e: React.MouseEvent<SVGElement, MouseEvent>) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        console.log(\"Gate Down\");\r\n        let selected = this.props.board.scope.project.getItems({\r\n            selected: true,\r\n        })\r\n\r\n        let body = logicComponent.body as paper.Item;\r\n\r\n        if (!selected.includes(body)) {\r\n            for (let component of selected) {\r\n                component.selected = false;\r\n            }\r\n            body.selected = true;\r\n        }\r\n\r\n        this.setState({drag: true});\r\n    }\r\n\r\n    handleGateMouseUp(logicComponent: LogicComponent, e: React.MouseEvent<SVGElement, MouseEvent>) {\r\n        e.preventDefault();\r\n        console.log(\"up gate\")\r\n    }\r\n\r\n    handleGateContextMenu(logicComponent: LogicComponent, e:React.MouseEvent<SVGElement, MouseEvent>) {\r\n        if (e.shiftKey) {\r\n            return;\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        console.log(\"context g!\")\r\n    }\r\n\r\n    handlePinMouseDown(logicPin: LogicPin, e:React.MouseEvent<SVGElement, MouseEvent>) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        let {project} = this.props.board.scope;\r\n\r\n        let pins = project.getItems({\r\n            selected: true,\r\n            data: {\r\n                type: 'Pin'\r\n            }\r\n        }).map(p => p.data.logical) as LogicPin[];\r\n\r\n        let numOutputs = pins.filter(p => p.pinType === PinType.OUTPUT).length;\r\n        console.log(`Num outputs: ${numOutputs}`)\r\n        if (numOutputs <= 1) {\r\n            for(let pin of pins) {\r\n                this.makeConnection(pin, logicPin);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    makeConnection(a: LogicPin, b: LogicPin) {\r\n        console.log(\"attempting connection\")\r\n        let connection = a.connectTo(b);\r\n        if (connection) {\r\n            this.props.board.addConnection(connection);\r\n            this.setState({});\r\n        }\r\n    }\r\n\r\n    get scope(): paper.PaperScope {\r\n        return this.props.board.scope;\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","\r\n/** Functional interface that returns 0 when values are equal, <0 when a < b, and >0 when a > b **/\r\ninterface Comparator<T> {\r\n  (a: T, b: T): number;\r\n}\r\n\r\ninterface NodeParams<T> {\r\n  data: T;\r\n}\r\n\r\nclass BinarySearchTreeNode<T> {\r\n  data: T;\r\n  left: BinarySearchTreeNode<T> | null = null;\r\n  right: BinarySearchTreeNode<T> | null = null;\r\n  weight: number = 1;\r\n  max_depth: number = 1;\r\n\r\n  constructor(params: NodeParams<T>) {\r\n    this.data = params.data;\r\n  }\r\n\r\n  private rotateLeft(): BinarySearchTreeNode<T> {\r\n    if (!this.right) {\r\n      throw Error(\"Impossible rotation\")\r\n    }\r\n\r\n    let ret = this.right;\r\n    let side = ret.left;\r\n    this.right = side;\r\n    this.weight -= ret.weight;\r\n    this.weight += side?.weight || 0;\r\n    ret.left = this;\r\n    ret.weight -= side?.weight || 0;\r\n    ret.weight += this.weight;\r\n\r\n    this.max_depth = Math.max(this.left?.max_depth || 0, this.right?.max_depth || 0) + 1\r\n    ret.max_depth = Math.max(ret.left.max_depth, ret.right?.max_depth || 0) + 1\r\n\r\n    return ret;\r\n  }\r\n\r\n  private rotateRight(): BinarySearchTreeNode<T> {\r\n    if (!this.left) {\r\n      throw Error(\"Impossible rotation\")\r\n    }\r\n\r\n    let ret = this.left;\r\n    let side = ret.right;\r\n    this.left = side;\r\n    this.weight -= ret.weight;\r\n    this.weight += side?.weight || 0;\r\n    ret.right = this;\r\n    ret.weight -= side?.weight || 0;\r\n    ret.weight += this.weight;\r\n\r\n    this.max_depth = Math.max(this.left?.max_depth || 0, this.right?.max_depth || 0) + 1\r\n    ret.max_depth = Math.max(ret.left?.max_depth || 0, ret.right.max_depth) + 1\r\n\r\n    return ret;\r\n  }\r\n\r\n  private slant(): number {\r\n    let l = this.left?.max_depth || 0;\r\n    let r = this.right?.max_depth || 0;\r\n    return r - l;\r\n  }\r\n\r\n  private balance(): BinarySearchTreeNode<T> {\r\n    let slant = this.slant();\r\n    if (slant < -1 && this.left) {\r\n      let side_slant = this.left.slant();\r\n      if (side_slant >= 1) {\r\n        this.left = this.left.rotateLeft();\r\n      }\r\n      return this.rotateRight();\r\n    } else if (slant > 1 && this.right) {\r\n      let side_slant = this.right.slant();\r\n      if (side_slant <= -1) {\r\n        this.right = this.right.rotateRight();\r\n      }\r\n      return this.rotateLeft();\r\n    } else {\r\n      return this\r\n    }\r\n  }\r\n\r\n  insert(t: T, cmp: Comparator<T>): [BinarySearchTreeNode<T>, boolean] {\r\n    let result = cmp(t, this.data)\r\n    let added: boolean = false;\r\n    if (result < 0) {\r\n      if (this.left) {\r\n        [this.left, added] = this.left.insert(t, cmp)\r\n      } else {\r\n        this.left = new BinarySearchTreeNode<T>({data: t});\r\n        added = true;\r\n      }\r\n    } else if (result > 0) {\r\n      if (this.right) {\r\n        [this.right, added] = this.right.insert(t, cmp);\r\n      } else {\r\n        this.right = new BinarySearchTreeNode<T>({data: t});\r\n        added = true;\r\n      }\r\n    } else {\r\n      this.data = t;\r\n      return [this, false];\r\n    }\r\n\r\n    let ret: BinarySearchTreeNode<T> = this;\r\n    if (added) {\r\n      this.weight += 1;\r\n      this.max_depth = Math.max(this.left?.max_depth || 0, this.right?.max_depth || 0) + 1;\r\n      ret = this.balance();\r\n    }\r\n    return [ret, added];\r\n  }\r\n\r\n  find(t: T, cmp: Comparator<T>): T | null {\r\n    let result = cmp(t, this.data)\r\n    if (result < 0) {\r\n      return this.left && this.left.find(t, cmp);\r\n    } else if (result > 0) {\r\n      return this.right && this.right.find(t, cmp);\r\n    } else {\r\n      return this.data;\r\n    }\r\n  }\r\n\r\n  popFirst(): [BinarySearchTreeNode<T> | null, T] {\r\n    if (!this.left) {\r\n      return [this.right, this.data];\r\n    } else {\r\n      let [node, val] = this.left.popFirst();\r\n      this.left = node;\r\n\r\n      this.weight -= 1;\r\n      this.max_depth = Math.max(node?.max_depth || 0, this.right?.max_depth || 0) + 1\r\n\r\n      return [this.balance(), val]\r\n    }\r\n  }\r\n\r\n  popLast(): [BinarySearchTreeNode<T> | null, T] {\r\n    if (!this.right) {\r\n      return [this.left, this.data];\r\n    } else {\r\n      let [node, val] = this.right.popFirst();\r\n      this.right = node;\r\n\r\n      this.weight -= 1;\r\n      this.max_depth = Math.max(node?.max_depth || 0, this.left?.max_depth || 0) + 1\r\n\r\n      return [this.balance(), val]\r\n    }\r\n  }\r\n\r\n  remove(t: T, cmp: Comparator<T>): [BinarySearchTreeNode<T> | null, boolean] {\r\n    let result = cmp(t, this.data)\r\n    let removed: boolean;\r\n    let ret: BinarySearchTreeNode<T> | null = this;\r\n    if (result < 0) {\r\n      if (this.left) {\r\n        [this.left, removed] = this.left.remove(t, cmp)\r\n      } else {\r\n        removed = false;\r\n      }\r\n    } else if (result > 0) {\r\n      if (this.right) {\r\n        [this.right, removed] = this.right.remove(t, cmp);\r\n      } else {\r\n        removed = false;\r\n      }\r\n    } else {\r\n      if (this.left) {\r\n        [this.left, this.data] = this.left.popLast();\r\n      } else if (this.right) {\r\n        [this.right, this.data] = this.right.popFirst();\r\n      } else {\r\n        return [null, true];\r\n      }\r\n      removed = true;\r\n    }\r\n\r\n    if (removed) {\r\n      this.weight -= 1;\r\n      this.max_depth = Math.max(this.left?.max_depth || 0, this.right?.max_depth || 0) + 1;\r\n      ret = this.balance();\r\n    }\r\n    return [ret, removed];\r\n  }\r\n\r\n  clear() {\r\n    if (this.left) {\r\n      this.left.clear();\r\n      this.left = null;\r\n    }\r\n    if (this.right) {\r\n      this.right.clear();\r\n      this.right = null;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default BinarySearchTreeNode;","import BinarySearchTreeNode from \"./BinarySearchTreeNode\";\r\n\r\ninterface Comparator<T> {\r\n    (a: T, b: T): number;\r\n}\r\n\r\ninterface IParams<T> {\r\n    cmp: Comparator<T>;\r\n}\r\n\r\nclass BinarySearchTree<T extends Object> {\r\n    private readonly cmp: Comparator<T>;\r\n    root: BinarySearchTreeNode<T> | null = null;\r\n\r\n    constructor(params: IParams<T>) {\r\n        this.cmp = params.cmp;\r\n    }\r\n\r\n    insert(t: T) {\r\n        if (!this.root) {\r\n            this.root = new BinarySearchTreeNode<T>({data: t})\r\n        } else {\r\n            [this.root, ] = this.root.insert(t, this.cmp);\r\n        }\r\n    }\r\n\r\n    remove(t: T): boolean {\r\n        if (!this.root) {\r\n            return false;\r\n        }\r\n\r\n        let ret;\r\n        [this.root, ret] = this.root.remove(t, this.cmp);\r\n        return ret;\r\n    }\r\n\r\n    /** Removes all elements **/\r\n    clear(): void {\r\n        if (!this.root) {\r\n            return;\r\n        }\r\n\r\n        this.root.clear();\r\n        this.root = null;\r\n    }\r\n\r\n    find(t: T, cmp: Comparator<T> | null = null): T | null {\r\n        cmp = cmp || this.cmp\r\n        if (!this.root) {\r\n            return null;\r\n        }\r\n\r\n        return this.root.find(t, cmp) || null;\r\n    }\r\n\r\n    first(): T | null {\r\n        if (!this.root) {\r\n            return null;\r\n        }\r\n\r\n        let node = this.root;\r\n        while(node.left) {\r\n            node = node.left;\r\n        }\r\n\r\n        return node.data;\r\n    }\r\n\r\n    popFirst(): T | null {\r\n        if (!this.root) {\r\n            return null;\r\n        }\r\n\r\n        let [node, val] = this.root.popFirst();\r\n        this.root = node;\r\n        return val;\r\n    }\r\n\r\n    size(): number {\r\n        return this.root?.weight || 0;\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        return inOrderIterator(this);\r\n    }\r\n}\r\n\r\n\r\nfunction* inOrderIterator<T>(bst: BinarySearchTree<T>): Generator<T> {\r\n    if (bst.root === null) {\r\n        return;\r\n    }\r\n\r\n    let stack = [];\r\n    let current: BinarySearchTreeNode<T> | null = bst.root;\r\n\r\n    while (current || stack.length) {\r\n        while (current) {\r\n            stack.push(current);\r\n            current = current.left;\r\n        }\r\n\r\n        // @ts-ignore\r\n        let ret: BinarySearchTreeNode<T> = stack.pop();\r\n        yield ret.data;\r\n        if (ret.right) {\r\n            current = ret.right;\r\n        }\r\n    }\r\n\r\n    return;\r\n}\r\n\r\nexport default BinarySearchTree;","import LogicPin from \"./LogicPin\";\r\nimport LogicState from \"./LogicState\";\r\n\r\ninterface IParams {\r\n  pin: LogicPin,\r\n  time: number,\r\n  state: LogicState,\r\n}\r\n\r\n/**\r\n * Class representing an update to a pin due to the operation of a LogicComponent\r\n *\r\n * For use in a priority queue to enable logic simulation\r\n * */\r\nclass LogicEvent {\r\n  pin: LogicPin;\r\n  time: number;\r\n  state: LogicState\r\n\r\n  constructor(params: IParams) {\r\n    this.pin = params.pin;\r\n    this.time = params.time;\r\n    this.state = params.state;\r\n  }\r\n\r\n  apply() {\r\n    this.pin.setLogicState(this.state);\r\n  }\r\n\r\n  cmp(other: LogicEvent): number {\r\n    if (this.time === other.time) {\r\n      return this.pin.uuid.localeCompare(other.pin.uuid);\r\n    } else {\r\n      return this.time - other.time;\r\n    }\r\n  }\r\n\r\n  // TODO: add comparators\r\n}\r\n\r\nexport default LogicEvent;","import React from \"react\";\r\n\r\nimport Board from \"../components/Board\";\r\nimport LogicComponent from \"./LogicComponent\";\r\nimport LogicConnection from \"./LogicConnection\";\r\nimport paper from \"paper/dist/paper-core\";\r\nimport {makeAndSetupScope} from \"../util/PaperHelp\";\r\nimport LogicState from \"./LogicState\";\r\nimport LogicPin from \"./LogicPin\";\r\nimport BinarySearchTree from \"../BinarySearchTree\";\r\nimport LogicEvent from \"./LogicEvent\";\r\n\r\n/**\r\n *\r\n */\r\nclass LogicBoard {\r\n  /** All components which should be rendered on screen */\r\n  components: Map<string, LogicComponent> = new Map();\r\n  /** All connections which may be rendered */\r\n  connections: Map<string, LogicConnection> = new Map();\r\n  /** Paper scope for this board used to compute geometry, and intersections */\r\n  scope: paper.PaperScope = makeAndSetupScope();\r\n  /** All pending logical events on the board **/\r\n  simulation: BinarySearchTree<LogicEvent> = new BinarySearchTree<LogicEvent>({cmp: (a, b) => a.cmp(b)});\r\n  simulationTimerId: number = -1;\r\n  simulationCurrentTime: number = 0;\r\n  /** Controls how frequently the simulation is updated **/\r\n  simulationIntervalMs: number = 25;\r\n  /** Controls how many time units pass per simulation interval **/\r\n  simulationStepSize: number = 1;\r\n  updateFunc: Function = () => {};\r\n\r\n  render(): React.ReactElement {\r\n    return (\r\n        <Board board={this}/>\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Updates a pin at a simulated time in the future.\r\n   *\r\n   * @param state - The new logical state of the pin\r\n   * @param pin - The pin to be updated\r\n   * @param delay - The amount of time from the current time before the pin's state should be updated.\r\n   */\r\n  postEvent(state: LogicState, pin: LogicPin, delay: number) {\r\n    let event = new LogicEvent({\r\n      pin: pin,\r\n      time: this.simulationCurrentTime + delay,\r\n      state: state\r\n    });\r\n    this.simulation.insert(event);\r\n  }\r\n\r\n  startSimulation() {\r\n    if (this.simulationTimerId === -1) {\r\n      // @ts-ignore\r\n      this.simulationTimerId = setInterval(this.advanceSimulation.bind(this), this.simulationIntervalMs);\r\n    }\r\n  }\r\n\r\n  stopSimulation() {\r\n    if (this.simulationTimerId !== -1) {\r\n      clearInterval(this.simulationTimerId);\r\n      this.simulationTimerId = -1;\r\n      this.simulation.clear();\r\n      this.simulationCurrentTime = 0;\r\n      this.components.forEach(c => c.reset());\r\n      this.components.forEach(c => c.operate());\r\n    }\r\n  }\r\n\r\n  pauseSimulation() {\r\n    if (this.simulationTimerId !== -1) {\r\n      clearInterval(this.simulationTimerId);\r\n      this.simulationTimerId = -1;\r\n    }\r\n  }\r\n\r\n  advanceSimulation() {\r\n    let current = this.simulationCurrentTime;\r\n    let target = current + this.simulationStepSize;\r\n    // TODO(dpasillas): Modify Binary Tree to remove need to check first() on every loop.\r\n    while (this.simulation.size() && this.simulation.first()!.time <= target) {\r\n      let event = this.simulation.popFirst()!;\r\n      // Update the time so that operations triggered by this event use the correct reference time.\r\n      this.simulationCurrentTime = event.time;\r\n      event.apply();\r\n    }\r\n    this.simulationCurrentTime = target;\r\n    this.updateFunc();\r\n  }\r\n\r\n  get simulationRunning() {\r\n    return this.simulationTimerId !== -1;\r\n  }\r\n\r\n  get simulationPaused() {\r\n    return !this.simulationRunning && this.simulationCurrentTime !== 0;\r\n  }\r\n\r\n  get simulationStopped() {\r\n    return !this.simulationRunning && this.simulationCurrentTime === 0;\r\n  }\r\n\r\n  /** Tracks a component to be rendered */\r\n  addComponent(component: LogicComponent) {\r\n    this.components.set(component.uuid, component)\r\n  }\r\n\r\n  /** Tracks a connection to be rendered */\r\n  addConnection(connection: LogicConnection) {\r\n    this.connections.set(connection.uuid, connection)\r\n  }\r\n\r\n  /** Removes a component from being tracked and rendered */\r\n  removeComponent(uuid: string) {\r\n    this.components.delete(uuid);\r\n  }\r\n\r\n  /** Removes a connection from being tracked and rendered */\r\n  removeConnection(uuid: string) {\r\n    this.connections.delete(uuid);\r\n  }\r\n}\r\n\r\nexport default LogicBoard;","import {createTheme} from \"@mui/material\";\r\n\r\nexport const DarkTheme = createTheme({\r\n  palette: {\r\n    mode: 'dark',\r\n  },\r\n});\r\n\r\nexport const LightTheme = createTheme({\r\n  palette: {\r\n    mode: 'light',\r\n  },\r\n})","import React from \"react\";\r\nimport {LightTheme} from \"./Themes\";\r\nimport {Theme} from \"@mui/material\";\r\n\r\n// set the defaults\r\nconst ThemeContext = React.createContext({\r\n  theme: LightTheme,\r\n  setTheme: (theme: Theme) => {}\r\n});\r\n\r\nexport default ThemeContext;\r\n","import React from \"react\"\r\nimport ThemeContext from \"../ThemeContext\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport {DarkTheme, LightTheme} from \"../Themes\";\r\nimport Brightness4 from \"@mui/icons-material/Brightness4\";\r\nimport Brightness7 from \"@mui/icons-material/Brightness7\";\r\n\r\ninterface IProps{}\r\ninterface IState{}\r\n\r\nclass ToggleThemeButton extends React.Component<IProps, IState> {\r\n  render() {\r\n    return (\r\n    <ThemeContext.Consumer>\r\n      {({theme, setTheme}) => (\r\n          <IconButton sx={{ ml: 1 }} onClick={() => setTheme(theme.palette.mode === 'dark' ? LightTheme : DarkTheme)} color=\"inherit\">\r\n            {theme.palette.mode === 'dark' ? <Brightness7/> : <Brightness4/>}\r\n          </IconButton>\r\n      )}\r\n    </ThemeContext.Consumer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ToggleThemeButton;","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPause, faStop, faPlay, faStepForward} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Box from \"@mui/material/Box\"\r\nimport MuiDivider from \"@mui/material/Divider\"\r\nimport Stack from \"@mui/material/Stack\"\r\nimport {styled} from \"@mui/material/styles\";\r\n\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\nimport ToggleThemeButton from \"./ToggleThemeButton\";\r\nimport \"../css/Toolbar.css\";\r\n\r\nconst Divider = styled(MuiDivider)({\r\n  height: \"75%\",\r\n});\r\n\r\ninterface IProps {\r\n  board: LogicBoard;\r\n}\r\n\r\ninterface IState {}\r\n\r\nclass Toolbar extends React.Component<IProps, IState> {\r\n  render() {\r\n    let running = this.props.board.simulationRunning;\r\n    let stopped = !running && this.props.board.simulationStopped;\r\n    return (\r\n        <Stack className=\"toolbar\" spacing={1} direction=\"row\">\r\n          <Divider orientation=\"vertical\"/>\r\n          <Box flexDirection=\"row\">\r\n            <button className={running ? \"pressed\" : \"\"} onClick={this.onPlay.bind(this)}>\r\n              <FontAwesomeIcon className=\"default\" icon={faPlay} style={{position: \"fixed\"}}/>\r\n              <FontAwesomeIcon className=\"active\" icon={faPause}/>\r\n            </button>\r\n            <button onClick={this.onStop.bind(this)} {...{disabled: stopped}}>\r\n              <FontAwesomeIcon icon={faStop}/>\r\n            </button>\r\n            <button onClick={this.onStep.bind(this)} {...{disabled: running}}>\r\n              <FontAwesomeIcon icon={faStepForward}/>\r\n            </button>\r\n            <span>\r\n              {this.props.board.simulationCurrentTime}\r\n            </span>\r\n          </Box>\r\n          <Divider orientation=\"vertical\"/>\r\n          <Box>\r\n            <ToggleThemeButton/>\r\n          </Box>\r\n          <Divider orientation=\"vertical\"/>\r\n        </Stack>\r\n    );\r\n  }\r\n\r\n  onPlay() {\r\n    let board = this.props.board;\r\n    if (board.simulationRunning) {\r\n      this.props.board.pauseSimulation();\r\n    } else {\r\n      this.props.board.startSimulation();\r\n    }\r\n    this.setState({})\r\n  }\r\n\r\n  onStop() {\r\n    this.props.board.stopSimulation();\r\n    this.setState({});\r\n  }\r\n\r\n  onStep() {\r\n    this.props.board.advanceSimulation()\r\n  }\r\n}\r\n\r\nexport default Toolbar;","import React from 'react';\r\nimport Box from \"@mui/material/Box\"\r\nimport {Theme} from \"@mui/material/styles\"\r\nimport {ThemeProvider} from \"@mui/material/styles\"\r\n\r\nimport Sidebar from \"./Sidebar\";\r\nimport Part from \"./Part\";\r\nimport PartType from \"../enums/PartType\";\r\nimport GateType from \"../enums/GateType\";\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\nimport Toolbar from \"./Toolbar\";\r\nimport {LightTheme} from \"../Themes\";\r\nimport ThemeContext from \"../ThemeContext\";\r\nimport '../css/App.css';\r\n\r\ninterface IProps {}\r\ninterface IState {\r\n  theme: Theme,\r\n  setTheme: (theme: Theme) => void,\r\n}\r\n\r\n/**\r\n * Entry point to the app.\r\n */\r\nclass App extends React.Component<IProps , IState>{\r\n  private board: LogicBoard = new LogicBoard();\r\n  private parts: Map<string, Part[]> = new Map([\r\n      [\"Input\", [\r\n        new Part({type: PartType.INPUT, subtype: 0, label: \"Clock\"}),\r\n        new Part({type: PartType.INPUT, subtype: 1, label:\"Switch\"}),\r\n      ]],\r\n      [\"Output\", [\r\n        new Part({type: PartType.OUTPUT, subtype: 0, label:\"Bulb\"}),\r\n      ]],\r\n      [\"Gates\", [\r\n        new Part({type: PartType.GATE, subtype: GateType.AND, label:\"AND\"}),\r\n        new Part({type: PartType.GATE, subtype: GateType.NAND, label:\"NAND\"}),\r\n        new Part({type: PartType.GATE, subtype: GateType.OR, label:\"OR\"}),\r\n        new Part({type: PartType.GATE, subtype: GateType.NOR, label:\"NOR\"}),\r\n        new Part({type: PartType.GATE, subtype: GateType.XOR, label:\"XOR\"}),\r\n        new Part({type: PartType.GATE, subtype: GateType.XNOR, label:\"XNOR\"}),\r\n        new Part({type: PartType.GATE, subtype: GateType.BUF, label:\"BUF\"}),\r\n        new Part({type: PartType.GATE, subtype: GateType.NOT, label:\"NOT\"}),\r\n      ]],\r\n      [\"Other\", [\r\n        new Part({type: PartType.COMPOSITE_BUILT_IN, subtype: 0, label: \"Half-Adder\"}),\r\n        new Part({type: PartType.COMPOSITE_BUILT_IN, subtype: 1, label: \"Adder\"}),\r\n      ]]\r\n  ]);\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      theme: LightTheme,\r\n      setTheme: this.setTheme.bind(this),\r\n    }\r\n  }\r\n\r\n  setTheme(theme: Theme) {\r\n    console.log(`Setting theme (${theme.palette.mode})...`)\r\n    this.setState({theme: theme});\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.board.updateFunc = () => this.setState({})\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.board.updateFunc = () => {};\r\n  }\r\n\r\n  render()\r\n  {\r\n    return (\r\n        <ThemeContext.Provider value={this.state}>\r\n          <ThemeProvider theme={this.state.theme}>\r\n            <div style={{width: \"100%\", height: \"100%\"}}>\r\n              <div>\r\n                Menu\r\n                <Toolbar board={this.board}/>\r\n              </div>\r\n              <Box sx={{bgcolor: 'background.default', width: \"100%\", height: \"100%\", display: \"flex\"}}>\r\n                <Sidebar parts={this.parts}>\r\n                </Sidebar>\r\n                {this.board.render()}\r\n              </Box>\r\n            </div>\r\n          </ThemeProvider>\r\n        </ThemeContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport 'typeface-roboto';\r\nimport 'typeface-roboto-mono';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './components/App';\r\nimport {StyledEngineProvider} from \"@mui/styled-engine\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <StyledEngineProvider>\r\n        <App/>\r\n      </StyledEngineProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}