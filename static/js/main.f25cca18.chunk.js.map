{"version":3,"sources":["logic/LogicComponent.tsx","reportWebVitals.ts","components/Sidebar.tsx","components/Component.tsx","enums/PartType.ts","util/PaperHelp.ts","Constants.ts","logic/LogicPin.tsx","components/Pin.tsx","logic/LogicState.ts","components/Connection.tsx","logic/LogicConnection.tsx","enums/GateType.ts","logic/LogicGate.tsx","logic/Bulb.tsx","logic/Clock.tsx","logic/Switch.tsx","components/Part.tsx","components/PartsDrawer.tsx","components/Board.tsx","BinarySearchTreeNode.ts","BinarySearchTree.ts","logic/LogicEvent.ts","logic/LogicBoard.tsx","components/Toolbar.tsx","components/App.tsx","index.tsx"],"names":["LogicFlag","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Sidebar","props","state","open","sidebarClasses","this","push","className","join","onMouseLeave","e","handleMouseExit","onMouseEnter","handleMouseEnter","content","onClick","handleMouseDown","setState","prevState","prevProps","React","Component","logicComponent","geometry","position","x","y","rotation","handlers","onGateMouseDown","onGateMouseUp","onGateContextMenu","pins","map","p","render","gate","classNames","body","selected","subtype","uuid","transform","getTransforms","d","onMouseDown","onMouseUp","onMouseMove","onGateMouseMove","onContextMenu","extraRender","PartType","LogicComponent","params","__fieldWidth","__width","__d","flags","type","scope","board","delay","inputPins","outputPins","uuidv4","width","fieldWidth","reset","Group","Point","remove","setUpBody","pivot","applyMatrix","setUpPins","addChild","addChildren","exportSVG","getAttribute","data","logic","flag","bitMask","numBits","setUpInputPins","setUpSelectorPins","setUpOutputPins","updateGeometry","pin","postEvent","clearPins","removeComponent","getRenderParams","bind","undefined","onPinMouseDown","onPinMouseUp","onPinMouseMove","onPinContextMenu","makeAndSetupScope","paper","PaperScope","setup","project","draw","PinOrientation","PinType","GLOBAL_SCOPE","OR_PATH","Pin","pathAttributes","anchor","console","log","cx","cy","r","LogicState","v","z","other","mask","Connection","fillClass","i","ix","iy","o","ox","oy","ic","icx","icy","oc","ocx","ocy","end1_1","end1_2","end2_1","end2_2","fillRule","LogicConnection","source","sink","hidden","connections","delete","removeConnection","ianchor","idir","oanchor","odir","Math","min","getDistance","add","multiply","connection","GateType","LogicPin","parent","connectionAnchor","not","orientation","pinType","Map","LEFT","INPUT","operate","OUTPUT","updateNext","Error","values","inputPin","ne","setLogicState","forEach","c","clear","canConnect","isConnectedTo","disconnect","set","connectTo","has","pos","CompoundPath","Path","NOT_PATH","UP","rotate","DOWN","RIGHT","translate","subtract","logical","matrix","divide","isNot","NAND","NOR","XNOR","NOT","AND","OR","XOR","BUF","maxPins","LogicGate","GATE","opFunc","opFuncs","value","unknown","zeroes","opAnd","negated","opOr","opXor","logicState","Constants","pathFromGateType","slice","offset","spacing","length","prototype","opNand","opNor","opXnor","opBuf","opNot","UNKNOWN","Bulb","on","display","bottom","bounds","Clock","output","selfConnection","s","Size","Rectangle","clockPath","fill","Switch","switches","classnames","stateString","handleClick","color","Part","label","component","make","makeInput","PartsDrawer","part","element","left","top","height","id","replace","draggable","onDragStart","handleDragStart","onDragEnd","handleDragEnd","viewBox","elem","document","getElementById","center","dataTransfer","setDragImage","effectAllowed","parts","renderPart","Board","ref","resizeObserer","sPoint","select","viewPort","scaleFactor","pan","drag","createRef","entries","contentRect","current","ResizeObserver","onResize","observe","patternUnits","strokeWidth","stopColor","selectionBox","handleGateMouseDown","handleGateMouseUp","handleGateContextMenu","handlePinMouseDown","renderedConnections","renderedComponents","components","style","xmlns","onWheel","handleWheel","handleMouseMove","handleMouseUp","onDragEnter","handleDragEnter","onDragOver","handleDragOver","onDrop","handleDrop","preserveAspectRatio","onScroll","defs","renderGrid","vectorEffect","selectedItems","rect","currentTarget","getBoundingClientRect","l","t","w","h","localX","pageX","localY","pageY","dLocalX","movementX","dLocalY","movementY","viewWidth","viewHeight","viewRelativeX","viewRelativeY","rx","ry","dx","dy","stopPropagation","preventDefault","getViewCoordinates","addComponent","clearSelection","_e","item","selectionRect","imatrix","inverted","isSelected","intersects","isInside","contains","getItems","dp","sx","sy","segments","point","sc","forceUpdate","newScaleFactor","between","pow","deltaY","newWidth","newHeight","newViewBox","includes","shiftKey","logicPin","numOutputs","filter","makeConnection","a","b","addConnection","max","BinarySearchTreeNode","right","weight","max_depth","ret","side","slant","rotateLeft","rotateRight","cmp","result","added","insert","balance","find","popFirst","node","val","removed","popLast","inOrderIterator","bst","root","stack","pop","BinarySearchTree","Symbol","iterator","LogicEvent","time","localeCompare","LogicBoard","simulation","simulationTimerId","simulationCurrentTime","simulationIntervalMs","simulationStepSize","updateFunc","event","setInterval","advanceSimulation","clearInterval","target","size","first","apply","simulationRunning","Toolbar","running","stopped","simulationStopped","role","onPlay","icon","faPlay","faPause","onStop","disabled","faStop","onStep","faStepForward","pauseSimulation","startSimulation","stopSimulation","App","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.f25cca18.chunk.js","sourcesContent":["import React from \"react\";\r\nimport paper from \"paper\";\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nimport PartType from \"../enums/PartType\";\r\nimport GateType from \"../enums/GateType\";\r\nimport LogicPin from \"./LogicPin\";\r\nimport Component, {GateEventHandlers, GateProps} from \"../components/Component\";\r\nimport LogicState from \"./LogicState\";\r\nimport LogicBoard from \"./LogicBoard\";\r\n\r\n\r\nconst MAX_FLAGS = 32\r\n\r\n/**\r\n * Bit flags indicating rendering hints and allowable user interactions\r\n *\r\n * This was imported from a previous logic simulator project, and may be subject to change.\r\n * */\r\nenum LogicFlag {\r\n  VariableShape = 0x00000001,  // 1 << 0\r\n  IBussable = 0x00000002,      // 1 << 1\r\n  OBussable = 0x00000004,      // 1 << 2\r\n  SingleOutput = 0x00000008,   // 1 << 3\r\n  MergingPins = 0x00000010,    // 1 << 4\r\n  Mux = 0x00000020,            // 1 << 5\r\n  Bussed = 0x00000040,         // 1 << 6\r\n}\r\n\r\n\r\nexport interface LogicComponentParams {\r\n  /** Rendering and interaction hints as specified by LogicFlag */\r\n  flags: number;\r\n  /** The type of the component, required for serialization */\r\n  type: PartType;\r\n  /** The subtype of the component, required for serialization */\r\n  subtype: GateType;\r\n  /** The scope in which this component will be rendered and interacted with. */\r\n  scope: paper.PaperScope;\r\n  /**\r\n   * The number of input pins, excluding control pins.\r\n   *\r\n   * The specific meaning of this field depends on the specific LogicComponent implementation.\r\n   * */\r\n  fieldWidth?: number;\r\n  /** The number of bits of data handled on a single pin, excluding control pins. */\r\n  width?: number;\r\n  /**\r\n   * The propagation delay of this component\r\n   *\r\n   * More specifically, the amount of time it takes for a change in one or more of the inputs of this component to be\r\n   * reflected in the outputs.\r\n   * */\r\n  delay?: number;\r\n  /** The logical board where rendering and interaction are done, and where logical events will be handled. */\r\n  board?: LogicBoard;\r\n}\r\n\r\n/**\r\n * Base class for all logical components which may or may not be rendered\r\n *\r\n * A logical component is any object which may send or receive logical signals.\r\n * */\r\nabstract class LogicComponent {\r\n  private __fieldWidth: number = 0;\r\n  private __width: number;\r\n  private __d: string = \"\";\r\n  private flags: number;\r\n  /** The unique id of this component, used for rendering, and serialization */\r\n  readonly uuid: string;\r\n  readonly type: PartType;\r\n  readonly subtype: GateType;\r\n  readonly scope: paper.PaperScope;\r\n  board?: LogicBoard;\r\n  /**\r\n   * The propagation delay of this component\r\n   *\r\n   * More specifically, the amount of time it takes for a change in one or more of the inputs of this component to be\r\n   * reflected in the outputs.\r\n   * */\r\n  delay: number;\r\n  /** The shape of this component used for rendering and interactions */\r\n  body!: paper.Item;\r\n  /** A grouping of this component's body and pins which stores translation and rotation information. */\r\n  geometry!: paper.Item;\r\n  inputPins: LogicPin[] = [];\r\n  outputPins: LogicPin[] = [];\r\n\r\n  protected constructor(params: LogicComponentParams) {\r\n\r\n    this.uuid = uuidv4();\r\n    this.scope = params.scope\r\n    this.flags = params.flags;\r\n    this.type = params.type;\r\n    this.subtype = params.subtype;\r\n    this.delay = params.delay ?? 1;\r\n    this.__width = params.width ?? 1;\r\n\r\n    this.board = params.board;\r\n\r\n    this.fieldWidth = params.fieldWidth ?? 0;\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /** Handler for updating this component's body and pins in response to property updates */\r\n  updateGeometry(fieldWidth: number) {\r\n    let {Group, Point} = this.scope;\r\n    if (this.body) {\r\n      this.body.remove()\r\n    }\r\n    this.body = this.setUpBody(fieldWidth);\r\n\r\n    if (!this.geometry) {\r\n      this.geometry = new Group();\r\n      this.geometry.pivot = new Point(0, 0);\r\n      this.geometry.applyMatrix = false;\r\n    }\r\n\r\n    this.setUpPins(fieldWidth);\r\n    this.geometry.addChild(this.body);\r\n    this.geometry.addChildren(this.pins().map(p => p.geometry as paper.Item));\r\n\r\n    this.__d = (this.body.exportSVG() as SVGElement).getAttribute('d')!;\r\n\r\n    this.body.data = {\r\n      type: 'Component',\r\n      logic: this,\r\n      geometry: this.geometry,\r\n    }\r\n  }\r\n\r\n  /** Checks if a property indicated by a LogicFlag is set */\r\n  hasProperty(flag: LogicFlag): boolean {\r\n    return (this.flags & flag) !== 0;\r\n  }\r\n\r\n  /** Sets a property indicated by a LogicFlag */\r\n  setProperty(flag: LogicFlag): void {\r\n    this.flags |= flag;\r\n  }\r\n\r\n  /** Unsets a property indicated by a LogicFlag */\r\n  clearProperty(flag: LogicFlag): void {\r\n    this.flags &= this.bitMask(MAX_FLAGS) ^ flag;\r\n  }\r\n\r\n  /**\r\n   * Creates a bitmask of the specified width\r\n   *\r\n   * If no width is specified, defaults to this component's width.\r\n   * */\r\n  bitMask(numBits?: number): number {\r\n    numBits = numBits ?? this.width;\r\n    return (1 << numBits) - 1;\r\n  }\r\n\r\n  /** Returns all pins associated with this component */\r\n  pins(): LogicPin[] {\r\n    return [\r\n        ...this.inputPins,\r\n        ...this.outputPins,\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * Removes all logical pins on this component\r\n   *\r\n   * Removed pins are disconnected from all other pins, and all events associated with the pin are purged.\r\n   * */\r\n  clearPins() {\r\n    //TODO(dpasillas): remove logic events associated with pins\r\n    for (let pin of this.pins()) {\r\n      pin.remove();\r\n    }\r\n\r\n    this.inputPins = [];\r\n    this.outputPins = [];\r\n  }\r\n\r\n  /** Sets up all pins required for this component */\r\n  setUpPins(fieldWidth: number) {\r\n    this.inputPins = [...this.setUpInputPins(fieldWidth), ...this.setUpSelectorPins(fieldWidth)];\r\n    this.outputPins = this.setUpOutputPins(fieldWidth);\r\n  }\r\n\r\n  /** Virtual method to set up input pins */\r\n  setUpInputPins(fieldWidth: number): LogicPin[] {\r\n    return [];\r\n  }\r\n\r\n  /** Virtual method to set up output pins. */\r\n  setUpOutputPins(fieldWidth: number): LogicPin[] {\r\n    return [];\r\n  }\r\n\r\n  /** Virtual method to set up selector pins, as required for -plexer type ICs. */\r\n  setUpSelectorPins(fieldWidth: number): LogicPin[] {\r\n    return []\r\n  }\r\n\r\n  set fieldWidth(fieldWidth: number) {\r\n    this.updateGeometry(fieldWidth)\r\n    this.__fieldWidth = fieldWidth\r\n  }\r\n\r\n  get fieldWidth(): number {\r\n    return this.__fieldWidth;\r\n  }\r\n\r\n  set width(width: number) {\r\n    // TODO(dpasillas): update geometry in response to width changes.\r\n    if (this.__width === width) {\r\n      return;\r\n    }\r\n    this.__width = width;\r\n  }\r\n\r\n  get width() {\r\n    return this.__width;\r\n  }\r\n\r\n  /** Path description of the component's body */\r\n  get d() {\r\n    return this.__d;\r\n  }\r\n\r\n  /** Sets the specified logical state on the specified pin after the propagation delay. */\r\n  postEvent(state: LogicState, pin?: LogicPin) {\r\n    pin = pin ?? this.outputPins[0];\r\n    this.board?.postEvent(state, pin, this.delay);\r\n  }\r\n\r\n  /** Delete this component, and all associated pins/connections */\r\n  remove() {\r\n    this.clearPins();\r\n    delete this.body.data.logic;\r\n    this.body.remove();\r\n    this.geometry.remove();\r\n    this.board?.removeComponent(this.uuid);\r\n  }\r\n\r\n  /**\r\n   * Virtual method to perform additional drawing on top of the base component\r\n   *\r\n   * For example, this may be used to draw pin labels, light from activated bulbs, or the interactive part of a button.\r\n   * */\r\n  extraRender(): React.ReactElement[] {\r\n    return [];\r\n  }\r\n\r\n  /** Maps this logical component to a React Component */\r\n  render(handlers?: GateEventHandlers): React.ReactElement {\r\n    return (\r\n        <Component\r\n            key={this.uuid}\r\n            {...this.getRenderParams(handlers)}/>\r\n    );\r\n  }\r\n\r\n  /** Specifies required properties for rendering */\r\n  getRenderParams(handlers?: GateEventHandlers): Required<GateProps> {\r\n    return {\r\n      type: this.subtype,\r\n      logicComponent: this,\r\n      scope: this.scope,\r\n      handlers: {\r\n        onGateMouseDown: handlers?.onGateMouseDown?.bind(undefined, this),\r\n        onGateMouseUp: handlers?.onGateMouseUp?.bind(undefined, this),\r\n        onGateMouseMove: handlers?.onGateMouseMove?.bind(undefined, this),\r\n        onGateContextMenu: handlers?.onGateContextMenu?.bind(undefined, this),\r\n        onPinMouseDown: handlers?.onPinMouseDown,\r\n        onPinMouseUp: handlers?.onPinMouseUp,\r\n        onPinMouseMove: handlers?.onPinMouseMove,\r\n        onPinContextMenu: handlers?.onPinContextMenu,\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Sets up the shape of this component */\r\n  abstract setUpBody(fieldWidth: number): paper.Item\r\n  /** Performs a logical operation */\r\n  abstract operate(): void\r\n  /** Returns the component to its initial state at power up */\r\n  abstract reset(): void\r\n}\r\n\r\nexport default LogicComponent;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport \"../css/Sidebar.css\"\r\n\r\ninterface IProps {\r\n  content: React.ReactElement | HTMLElement | string;\r\n}\r\ninterface IState {\r\n  open: boolean;\r\n}\r\n\r\n/**\r\n * Generic container which expands to show contents on mouse hover\r\n *\r\n * Needs work, and may be replaced.\r\n */\r\nclass Sidebar extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let sidebarClasses = [\"sidebar\"]\r\n    if (!this.state.open) {\r\n      sidebarClasses.push(\"collapsed\")\r\n    }\r\n    return (\r\n        <div className={sidebarClasses.join(' ')}\r\n             onMouseLeave={(e) => this.handleMouseExit(e)}\r\n        >\r\n          <div className=\"floaty\"\r\n               onMouseEnter={(e) => this.handleMouseEnter(e)}\r\n          />\r\n          <div className=\"sidebar-content\">\r\n            {this.props.content}\r\n          </div>\r\n          <div className=\"divider\">\r\n            <button className=\"handle\"\r\n                    onClick={(e) => this.handleMouseDown(e)}\r\n            >*</button>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  handleMouseEnter(e: React.MouseEvent<HTMLElement>) {\r\n    this.setState({open: true});\r\n  }\r\n\r\n  handleMouseExit(e: React.MouseEvent<HTMLElement>) {\r\n    this.setState({open: false});\r\n  }\r\n\r\n  handleMouseDown(e: React.MouseEvent<HTMLElement>) {\r\n    this.setState((prevState, prevProps) => {\r\n      return {\r\n        open: !prevState.open\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default Sidebar;","import React from \"react\";\r\nimport {PinEventHandlers} from \"./Pin\";\r\nimport paper from 'paper';\r\nimport GateType from \"../enums/GateType\";\r\nimport {ComponentMouseEventHandler, MouseEventHandler} from \"../util/Types\";\r\nimport LogicComponent from \"../logic/LogicComponent\";\r\n\r\nexport interface GateEventHandlers<T = ComponentMouseEventHandler> extends PinEventHandlers {\r\n    onGateMouseDown?: T;\r\n    onGateMouseUp?: T;\r\n    onGateMouseMove?: T;\r\n    onGateContextMenu?: T;\r\n}\r\n\r\nexport interface GateProps {\r\n    scope?: paper.PaperScope,\r\n    handlers: GateEventHandlers<MouseEventHandler>,\r\n    type: GateType,\r\n    logicComponent: LogicComponent,\r\n}\r\n\r\ninterface IState {}\r\n\r\n/**\r\n * React Component implementation of LogicComponent\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Component extends React.Component<GateProps, IState> {\r\n    constructor(props: Readonly<GateProps>) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Gets the translation and rotation transforms of the component.\r\n     */\r\n    getTransforms() {\r\n        let {x, y} = this.props.logicComponent.geometry.position\r\n        let offset_transform = `translate(${x} ${y})`\r\n        let rotate_transform = `rotate(${this.props.logicComponent.geometry.rotation})`\r\n        return [offset_transform, rotate_transform].join(' ')\r\n    }\r\n\r\n    render() {\r\n        let {onGateMouseDown, onGateMouseUp, onGateContextMenu, ...handlers} = this.props.handlers;\r\n\r\n        let logicPins = this.props.logicComponent.pins();\r\n        let pins = logicPins.map(p => p.render(handlers))\r\n\r\n        let gate = this.props.logicComponent;\r\n        let body = gate.body as paper.Item;\r\n\r\n        let classNames = ['component']\r\n\r\n        if (body.selected) {\r\n            classNames.push('selected')\r\n        }\r\n\r\n        return (\r\n            <g className={classNames.join(' ')}\r\n               data-ctype={gate.subtype}\r\n               data-uuid={gate.uuid}\r\n               transform={this.getTransforms()}\r\n            >\r\n                <path d={gate.d}\r\n                      onMouseDown={this.props.handlers.onGateMouseDown}\r\n                      onMouseUp={this.props.handlers.onGateMouseUp}\r\n                      onMouseMove={this.props.handlers.onGateMouseMove}\r\n                      onContextMenu={this.props.handlers.onGateContextMenu}\r\n                />\r\n                {gate.extraRender()}\r\n                {pins}\r\n            </g>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Component;","\r\nenum PartType {\r\n  UNKNOWN,\r\n  GATE,\r\n  INPUT,\r\n  OUTPUT,\r\n  COMPOSITE_BUILT_IN,\r\n  COMPOSITE_CUSTOM\r\n}\r\n\r\nexport default PartType;\r\n\r\n","import paper from \"paper\";\r\n\r\n/**\r\n * Creates and sets up a paper scope\r\n *\r\n * Primarily intended to allow initializing scopes inline as class or global variables.\r\n * */\r\nexport function makeAndSetupScope() {\r\n  let scope = new paper.PaperScope();\r\n  // @ts-ignore\r\n  scope.setup();\r\n  // Performance testing indicated that paperjs was spending a lot of time drawing the project.\r\n  // This paperjs isn't being used to draw directly to a canvas, this is useless, so we make this a no-op.\r\n  // @ts-ignore\r\n  scope.project.draw = () => {}\r\n  return scope;\r\n}","import {makeAndSetupScope} from \"./util/PaperHelp\";\r\n\r\nexport const GLOBAL_SCOPE = makeAndSetupScope();\r\nexport const BULB_PATH = \"M 27.3137084989848 27.3137084989848 A 16 16 90 1 0 4.68629150101524 27.3137084989848 Q 9.238107812 31.86552481 10.71553501 36 Q 11.21553501 37.39921453 11.71553501 40 C 12.21553501 42.60078547 19.78446499 42.60078547 20.28446499 40 Q 20.78446499 37.39921453 21.28446499 36 Q 22.76189219 31.86552481 27.3137085 27.3137085\";\r\nexport const AND_PATH = \"M 0 0 L 16 0 A 16 16 -180 0 1 16 32 L 0 32 L 0 0 Z\";\r\nexport const OR_PATH = \"M 0 0 L 8 0 Q 22.72 0 32 16 Q 22.72 32 8 32 L 0 32 Q 8 16 0 0 Z\";\r\nconst XOR_TAIL = \"M -4 0 Q 4 16 -4 32 Q 4 16 -4 0 Z\";\r\nexport const XOR_PATH = OR_PATH + \" \" + XOR_TAIL;\r\nexport const BUF_PATH = \"M 0 0 L 32 16 L 0 32 L 0 0 Z\";\r\nexport const PIN_PATH = \"M -4 -2 L 18.5 -2 L 20 0 L 18.5 2 L -4 2 Z\";\r\nexport const NOT_PATH = \"M -4 0 A 4 4 180 0 1 4 0 A 4 4 180 0 1 -4 0 Z\";\r\nexport const NOT_PIN_PATH = NOT_PATH + \" M 3.47 -2 L 18.5 -2 L 20 0 L 18.5 2 L 3.467 2 A 4 4 -20 0 0 3.467 -2 Z\";","import {v4 as uuidv4} from 'uuid';\r\nimport LogicComponent from \"./LogicComponent\";\r\nimport * as Constants from \"../Constants\";\r\nimport Pin, {PinEventHandlers, PinProps} from \"../components/Pin\";\r\nimport React from \"react\";\r\nimport LogicState from \"./LogicState\";\r\nimport LogicConnection from \"./LogicConnection\";\r\nimport * as paper from \"paper\";\r\nimport LogicBoard from \"./LogicBoard\";\r\n\r\nexport enum PinOrientation {\r\n  UNKNOWN,\r\n  UP,\r\n  DOWN,\r\n  LEFT,\r\n  RIGHT,\r\n}\r\n\r\n/** Indicates whether a pin receives or sends logic signals */\r\nexport enum PinType {\r\n  UNKNOWN,\r\n  INPUT,\r\n  OUTPUT,\r\n}\r\n\r\ninterface IParams {\r\n  /** LogicComponent which receives or sends signals from this pin */\r\n  parent: LogicComponent,\r\n  /** Indicates whether this pin receives or sends logic signals */\r\n  pinType: PinType,\r\n  /** Rendering hint to show a pin as negated */\r\n  not?: boolean,\r\n  /** The number of bits of data which may be received or transmitted by this pin */\r\n  width?: number,\r\n  /** Direction in which the pin is mounted on the parent */\r\n  orientation?: PinOrientation,\r\n  /** The board which processes events, and optionally renders this pin */\r\n  board?: LogicBoard,\r\n}\r\n\r\n/**\r\n * Logical representation of a pin which may or may not be rendered\r\n *\r\n * A pin is any input or output to/from a LogicComponent\r\n * */\r\nclass LogicPin {\r\n  private parent: LogicComponent;\r\n  private connectionAnchor?: paper.Point;\r\n  readonly uuid: string;\r\n  board?: LogicBoard;\r\n  width: number;\r\n  geometry?: paper.PathItem;\r\n  not: boolean;\r\n  orientation: PinOrientation;\r\n  pinType: PinType;\r\n  state: LogicState;\r\n  connections: Map<string /* UUID of connected pin */, LogicConnection> = new Map<string, LogicConnection>();\r\n\r\n  constructor(params: IParams) {\r\n    this.uuid = uuidv4();\r\n    this.parent = params.parent;\r\n    this.width = params.width ?? 1;\r\n    this.orientation = params.orientation ?? PinOrientation.LEFT;\r\n    this.pinType = params.pinType;\r\n    this.not = params.not ?? false;\r\n    this.state = new LogicState({});\r\n    this.board = params.board;\r\n  }\r\n\r\n  /** Helper function which causes logic states to propagate */\r\n  setLogicState(state: LogicState) {\r\n    this.state = state;\r\n    switch (this.pinType) {\r\n      case PinType.INPUT:\r\n        this.parent.operate();\r\n        break;\r\n      case PinType.OUTPUT:\r\n        this.updateNext();\r\n        break;\r\n      default:\r\n        throw new Error();\r\n    }\r\n  }\r\n\r\n  /** Updates all pins with connections leading from this pin */\r\n  updateNext() {\r\n    if (this.pinType !== PinType.OUTPUT) {\r\n      throw new Error();\r\n    }\r\n\r\n    for (let connection of this.connections.values()) {\r\n      let inputPin = connection.sink;\r\n      // No need to simulate events which won't affect the output\r\n      if (this.state.ne(inputPin.state)) {\r\n        inputPin.setLogicState(this.state)\r\n      }\r\n      // This ensures that self referencing components (such as Clock) operates appropriately\r\n      inputPin.parent.operate();\r\n    }\r\n  }\r\n\r\n  /** Removes all connections associated with this pin */\r\n  disconnect() {\r\n    this.connections.forEach((c) => c.remove());\r\n    this.connections.clear();\r\n  }\r\n\r\n  /** Indicates whether this pin may be connected to another */\r\n  canConnect(other: LogicPin) {\r\n    if (this.width !== other.width) {\r\n      return false;\r\n    }\r\n\r\n    switch (this.pinType) {\r\n      case PinType.INPUT:\r\n        return other.pinType === PinType.OUTPUT;\r\n      case PinType.OUTPUT:\r\n        return other.pinType === PinType.INPUT;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** Creates a connection between this pin with another */\r\n  connectTo(other: LogicPin): LogicConnection | null {\r\n    if (!this.canConnect(other)) {\r\n      return null;\r\n    }\r\n\r\n    if (this.pinType === PinType.INPUT) {\r\n      if (this.isConnectedTo(other)) {\r\n        return null;\r\n      } else {\r\n        this.disconnect()\r\n      }\r\n      let connection = new LogicConnection({source: other, sink: this, board: this.board})\r\n      this.connections.set(connection.uuid, connection);\r\n      other.connections.set(connection.uuid, connection);\r\n      this.setLogicState(other.state);\r\n      return connection;\r\n    } else {\r\n      return other.connectTo(this);\r\n    }\r\n  }\r\n\r\n  /** Tests if connection exists between this pin and another */\r\n  isConnectedTo(other: LogicPin): boolean {\r\n    return this.connections.has(other.uuid);\r\n  }\r\n\r\n  remove() {\r\n    this.disconnect()\r\n    this.geometry?.remove();\r\n    delete this.geometry?.data.logic\r\n  }\r\n\r\n  render(handlers?: PinEventHandlers): React.ReactElement {\r\n    return (\r\n        <Pin key={this.uuid}\r\n             {...this.getRenderParams(handlers)}\r\n        />\r\n    )\r\n  }\r\n\r\n  getRenderParams(handlers?: PinEventHandlers): PinProps {\r\n    return {\r\n      pin: this,\r\n      type: this.pinType,\r\n      handlers: {\r\n        onPinMouseUp: handlers?.onPinMouseUp?.bind(undefined, this),\r\n        onPinMouseDown: handlers?.onPinMouseDown?.bind(undefined, this),\r\n        onPinMouseMove: handlers?.onPinMouseMove?.bind(undefined, this),\r\n        onPinContextMenu: handlers?.onPinContextMenu?.bind(undefined, this),\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Places the pin at a location on the parent, and subtracts the parent's body from its geometry. */\r\n  updateGeometry(pos: paper.Point) {\r\n    if(this.geometry) {\r\n      this.geometry.remove()\r\n    }\r\n    let {CompoundPath, Path, Point} = this.parent.scope;\r\n    let pin;\r\n    if (this.not) {\r\n      pin = new CompoundPath(Constants.NOT_PIN_PATH)\r\n    } else {\r\n      pin = new Path(Constants.PIN_PATH);\r\n    }\r\n    pin.pivot = new Point(0, 0);\r\n\r\n    switch (this.orientation) {\r\n      case PinOrientation.UP:\r\n        pin.rotate(-90);\r\n        this.connectionAnchor = new Point(0, -18);\r\n        break;\r\n      case PinOrientation.DOWN:\r\n        pin.rotate(90);\r\n        this.connectionAnchor = new Point(0, 18);\r\n        break;\r\n      case PinOrientation.LEFT:\r\n        pin.rotate(180);\r\n        this.connectionAnchor = new Point(-18, 0);\r\n        break;\r\n      case PinOrientation.RIGHT:\r\n        this.connectionAnchor = new Point(18, 0);\r\n        break;\r\n      default:\r\n        throw new Error(\"Unknown pin orientation\")\r\n    }\r\n\r\n    pin.translate(pos);\r\n    this.geometry = pin.subtract(this.parent.body as paper.PathItem);\r\n    pin.remove();\r\n    this.geometry.data.type = 'Pin'\r\n    this.geometry.data.logical = this;\r\n  }\r\n\r\n  /** Maps a point from local coordinates to svg coordinates */\r\n  transform(p: paper.Point): paper.Point {\r\n    return this.parent.geometry.matrix.transform(p);\r\n  }\r\n\r\n  get rotation(): number {\r\n    return this.parent.geometry.rotation;\r\n  }\r\n\r\n  get pos(): paper.Point {\r\n    return this.geometry!.position\r\n  }\r\n\r\n  /**\r\n   * Returns a tuple containing a point near the end of the pin, and the direction the pin is pointing\r\n   *\r\n   * This information is used to render connections, and interaction aids.\r\n   * */\r\n  get anchor(): [paper.Point, paper.Point] {\r\n    return [\r\n      this.pos.add(this.connectionAnchor!),\r\n      this.connectionAnchor!.rotate(this.rotation, new this.parent.scope.Point(0, 0)).divide(18)]\r\n  }\r\n}\r\n\r\nexport default LogicPin;","import React from \"react\";\r\nimport LogicPin, {PinType} from \"../logic/LogicPin\";\r\nimport {MouseEventHandler, PinMouseEventHandler} from \"../util/Types\";\r\n\r\nexport interface PinEventHandlers<T = PinMouseEventHandler> {\r\n    onPinMouseDown?: T;\r\n    onPinMouseUp?: T;\r\n    onPinMouseMove?: T;\r\n    onPinContextMenu?: T;\r\n}\r\n\r\nexport interface PinProps {\r\n    // @ts-ignore\r\n    pin: LogicPin,\r\n    type: PinType,\r\n    handlers: PinEventHandlers<MouseEventHandler>\r\n}\r\n\r\ninterface IState {\r\n\r\n}\r\n\r\n/**\r\n * React Component implementation of LogicPin\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Pin extends React.Component<PinProps, IState> {\r\n    constructor(props: PinProps) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        let data = this.props.pin.geometry!.data;\r\n        this.props.pin.geometry!.data = {}\r\n        //@ts-ignore\r\n        let d = this.props.pin.geometry!.exportSVG().getAttribute('d')\r\n        this.props.pin.geometry!.data = data;\r\n        let pathAttributes = {\r\n            d: d\r\n        }\r\n\r\n        let classNames = [\r\n            'pin'\r\n        ];\r\n\r\n        if (this.props.pin.geometry?.selected) {\r\n            classNames.push('selected')\r\n        }\r\n\r\n        let [anchor, ] = this.props.pin.anchor;\r\n\r\n\r\n        return (\r\n            <g key={this.props.pin.uuid} className={classNames.join(' ')}\r\n               onMouseDown={this.props.handlers?.onPinMouseDown}\r\n               onMouseUp={this.props.handlers?.onPinMouseUp}\r\n               onContextMenu={() => console.log(\"context p!\")}\r\n            >\r\n                <circle className=\"anchor\" cx={anchor.x} cy={anchor.y} r={5}/>\r\n                <path {...pathAttributes}/>\r\n            </g>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pin;","\r\ninterface IParams {\r\n  v?: number; // non-error value\r\n  x?: number; // unknown\r\n  z?: number; // high-impedance\r\n}\r\n\r\n/**\r\n * An arbitrary-width logical state with logical value, and error states.\r\n *\r\n * For every logical bit at a given position n, at most one of v, x, or z should be set for bit n.\r\n *\r\n * @example\r\n * // Returns logical state '01xz1'\r\n * new LogicState({v: 0b01001, x: 0b00100, z: 0b00010})\r\n * */\r\nclass LogicState {\r\n  /** Represents whether bits are on or off */\r\n  v: number;\r\n  /** Represents whether bits are in an unknown state */\r\n  x: number;\r\n  /** Represents whether bits are disconnected from an input source */\r\n  z: number;\r\n\r\n  constructor(params: IParams) {\r\n    this.v = params.v ?? 0;\r\n    this.x = params.x ?? 0;\r\n    this.z = params.z ?? 0;\r\n  }\r\n\r\n  eq(other: LogicState) {\r\n    return (\r\n        this.v === other.v &&\r\n        this.x === other.x &&\r\n        this.z === other.z\r\n    );\r\n  }\r\n\r\n  ne(other: LogicState) {\r\n    return (\r\n        this.v !== other.v ||\r\n        this.x !== other.x ||\r\n        this.z !== other.z\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a new negated the logical state while keeping only the specified number bits\r\n   *\r\n   * @example\r\n   * // Creates logical state '01xz1'\r\n   * let state = new LogicState({v: 0b01001, x: 0b00100, z: 0b00010})\r\n   * // Negates logical state to '10xz1'\r\n   * state.negate(5)\r\n   * */\r\n  negated(numBits: number) {\r\n    // (2^n) - 1 will result in a mask with the lower n bits set.\r\n    let mask = (1 << numBits) - 1\r\n\r\n    // Bits with corresponding errors should be masked out\r\n    let v = ~this.v & ~this.x & ~this.z & mask;\r\n    return new LogicState({\r\n      v: v,\r\n      x: this.x,\r\n      z: this.z\r\n    });\r\n  }\r\n}\r\n\r\nexport default LogicState;","import React from \"react\";\r\nimport LogicConnection from \"../logic/LogicConnection\";\r\nimport LogicState from \"../logic/LogicState\";\r\n\r\ninterface Point {\r\n  x: number,\r\n  y: number\r\n}\r\n\r\ninterface IProps {\r\n  connection: LogicConnection;\r\n  state: LogicState;\r\n  width: number;\r\n  /** The first endpoint of this connection */\r\n  i: Point;\r\n  /** The second endpoint of this connection */\r\n  o: Point;\r\n  /** The first control point, as required to render this connection as a bezier curve */\r\n  ic: Point;\r\n  /** The second control point, as required to render this connection as a bezier curve */\r\n  oc: Point;\r\n\r\n}\r\n\r\ninterface IState {}\r\n\r\n/**\r\n * React Component implementation of LogicConnection\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Connection extends React.Component<IProps, IState> {\r\n  render() {\r\n\r\n    let {x: ix, y: iy} = this.props.i;\r\n    let {x: ox, y: oy} = this.props.o;\r\n\r\n    let {x: icx, y: icy} = this.props.ic;\r\n    let {x: ocx, y: ocy} = this.props.oc;\r\n\r\n    let r = 1\r\n    // Render each endpoint of the connection as a circle.\r\n    // Each endpoint is split into two half circles, as it's impossible to render a full circle with a single arc\r\n    // command.\r\n    let end1_1 = `M ${ix - r} ${iy} A ${r} ${r} 180 0 0 ${ix + r} ${iy} `\r\n    let end1_2 = `A ${r} ${r} 180 0 0 ${ix - r} ${iy} `\r\n    let end2_1 = `M ${ox - r} ${oy} A ${r} ${r} 180 0 0 ${ox + r} ${oy} `\r\n    let end2_2 = `A ${r} ${r} 180 0 0 ${ox - r} ${oy} `\r\n    // The path of a connection is both endpoints drawn as circles, connected by a bezier curve.\r\n    let d = `${end1_1} ${end1_2} M ${ix} ${iy} C ${icx} ${icy} ${ocx} ${ocy} ${ox} ${oy} ${end2_1} ${end2_2}`;\r\n\r\n    let fillClass;\r\n    let state = this.props.state;\r\n    if (state.x) {\r\n      fillClass = \"error\"\r\n    } else if (state.z) {\r\n      fillClass = \"error\"\r\n    } else if (state.v) {\r\n      fillClass = \"on\";\r\n    } else {\r\n      fillClass = \"off\"\r\n    }\r\n\r\n    /*\r\n    The connection is drawn twice with different stroke widths:\r\n\r\n    - First to draw the outline of the curve.\r\n    - Second to draw the interior.\r\n\r\n    This simulates the appearance the component was rendered as a single path with a normal fill and stroke.\r\n    The alternative is to compute the path offset curve, which is difficult to compute.\r\n    */\r\n    return (\r\n        <g>\r\n          <path className=\"connection-outer\" d={d}/>\r\n          <path fillRule=\"nonzero\"\r\n              className={`connection-inner ${fillClass}`} d={d}/>\r\n          { this.props.width > 1 &&\r\n            <path fillRule=\"nonzero\" className=\"connection-inner bus\" d={d}/>}\r\n        </g>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Connection;","import LogicPin from \"./LogicPin\";\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport Connection from \"../components/Connection\";\r\nimport LogicBoard from \"./LogicBoard\";\r\n\r\ninterface IParams {\r\n  uuid?: string;\r\n  source: LogicPin;\r\n  sink: LogicPin;\r\n  board?: LogicBoard;\r\n  hidden?: boolean;\r\n}\r\n\r\n/**\r\n * Class representing a connection between two pins\r\n *\r\n * Rendering is optional\r\n * */\r\nclass LogicConnection {\r\n  uuid: string;\r\n  source: LogicPin;\r\n  sink: LogicPin;\r\n  hidden: boolean;\r\n  board?: LogicBoard;\r\n\r\n  constructor(params: IParams) {\r\n    this.uuid = params.uuid ?? uuidv4();\r\n    this.source = params.source;\r\n    this.sink = params.sink;\r\n    this.hidden = params.hidden ?? false;\r\n    this.board = params.board;\r\n  }\r\n\r\n  remove() {\r\n    this.source.connections.delete(this.uuid);\r\n    this.sink.connections.delete(this.uuid);\r\n    this.board?.removeConnection(this.uuid);\r\n  }\r\n\r\n  render() {\r\n    let [ianchor, idir] = this.source.anchor;\r\n    let [oanchor, odir] = this.sink.anchor;\r\n\r\n    ianchor = this.source.transform(ianchor);\r\n    oanchor = this.sink.transform(oanchor);\r\n\r\n    let d = Math.min(ianchor.getDistance(oanchor), 30)\r\n\r\n    let ic = ianchor.add(idir.multiply(d));\r\n    let oc = oanchor.add(odir.multiply(d));\r\n\r\n    return (\r\n        <Connection key={this.uuid}\r\n                    connection={this}\r\n                    state={this.source.state}\r\n                    width={this.source.width}\r\n                    i={ianchor}\r\n                    o={oanchor}\r\n                    ic={ic}\r\n                    oc={oc}\r\n        />\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default LogicConnection;","\r\nenum GateType {\r\n  UNKNOWN,\r\n  AND,\r\n  NAND,\r\n  OR,\r\n  NOR,\r\n  XOR,\r\n  XNOR,\r\n  BUF,\r\n  NOT,\r\n}\r\n\r\nexport default GateType;","import paper from \"paper\";\r\n\r\nimport LogicComponent, {LogicComponentParams} from \"./LogicComponent\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\nimport GateType from \"../enums/GateType\";\r\nimport * as Constants from \"../Constants\";\r\nimport LogicState from \"./LogicState\";\r\n\r\n/** Helper function which maps Gate types to svg paths.*/\r\nfunction pathFromGateType(type: GateType) {\r\n  switch (type) {\r\n    case GateType.AND:\r\n    case GateType.NAND:\r\n      return Constants.AND_PATH;\r\n    case GateType.OR:\r\n    case GateType.NOR:\r\n      return Constants.OR_PATH;\r\n    case GateType.XOR:\r\n    case GateType.XNOR:\r\n      return Constants.XOR_PATH;\r\n    case GateType.BUF:\r\n    case GateType.NOT:\r\n      return Constants.BUF_PATH;\r\n    default:\r\n      throw new Error(\"Unsupported Gate Type\")\r\n  }\r\n}\r\n\r\n/** Helper function which indicates of a particular gate type is negated. */\r\nfunction isNot(type: GateType) {\r\n  switch (type) {\r\n    case GateType.NAND:\r\n    case GateType.NOR:\r\n    case GateType.XNOR:\r\n    case GateType.NOT:\r\n      return true;\r\n    case GateType.AND:\r\n    case GateType.OR:\r\n    case GateType.XOR:\r\n    case GateType.BUF:\r\n      return false;\r\n    default:\r\n      throw new Error(`Unsupported Gate Type(${type})`)\r\n  }\r\n}\r\n\r\nfunction maxPins(type: GateType): number {\r\n  switch (type) {\r\n    case GateType.AND:\r\n    case GateType.NAND:\r\n    case GateType.OR:\r\n    case GateType.NOR:\r\n    case GateType.XOR:\r\n    case GateType.XNOR:\r\n      return 4;\r\n    case GateType.BUF:\r\n    case GateType.NOT:\r\n      return 1;\r\n    default:\r\n      throw new Error(`Unsupported Gate Type(${type})`)\r\n  }\r\n}\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"flags\" | \"type\"> {}\r\n\r\n/** Primitive Logic Gates */\r\nclass LogicGate extends LogicComponent {\r\n  static opFuncs: Record<GateType, () => LogicState> = {\r\n    [GateType.AND]: LogicGate.prototype.opAnd,\r\n    [GateType.NAND]: LogicGate.prototype.opNand,\r\n    [GateType.OR]: LogicGate.prototype.opOr,\r\n    [GateType.NOR]: LogicGate.prototype.opNor,\r\n    [GateType.XOR]: LogicGate.prototype.opXor,\r\n    [GateType.XNOR]: LogicGate.prototype.opXnor,\r\n    [GateType.BUF]: LogicGate.prototype.opBuf,\r\n    [GateType.NOT]: LogicGate.prototype.opNot,\r\n    [GateType.UNKNOWN]: () => {throw new Error(\"Unsupported type\")}\r\n  }\r\n\r\n  private readonly opFunc: () => LogicState;\r\n\r\n  constructor(params: IParams) {\r\n    super({flags: 0, type: PartType.GATE, fieldWidth: Math.min(2, maxPins(params.subtype)), ...params});\r\n    this.opFunc = LogicGate.opFuncs[this.subtype].bind(this)\r\n  }\r\n\r\n  /* BEGIN logical gate implementations */\r\n  opAnd(): LogicState {\r\n    let value = this.bitMask();\r\n    let unknown = 0;\r\n    let high_impedance = 0;\r\n\r\n    // Keep track of input zeroes so we can ignore errors from other pins at these outputs\r\n    let zeroes = 0;\r\n\r\n    for (let pin of this.inputPins) {\r\n        // Count zeroes only if no error state exists for that bit.\r\n        zeroes |= ~(pin.state.v | pin.state.x | pin.state.z)\r\n        value &= pin.state.v;\r\n        unknown |= pin.state.x;\r\n        // Treat input z as unknown.\r\n        unknown |= pin.state.z;\r\n    }\r\n\r\n    // An input zero sets the corresponding output bit to zero, so we clear the error states on these bits.\r\n    // Because 0 AND X = 0\r\n    unknown &= ~zeroes;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance,\r\n    });\r\n  }\r\n\r\n  opNand(): LogicState {\r\n    let state = this.opAnd();\r\n    return state.negated(this.width);\r\n  }\r\n\r\n  opOr(): LogicState{\r\n    let value = 0;\r\n    let unknown = 0;\r\n    let high_impedance = 0;\r\n\r\n    for (let pin of this.inputPins) {\r\n      value |= pin.state.v;\r\n      unknown |= pin.state.x;\r\n      // Treat input z as unknown.\r\n      unknown |= pin.state.z;\r\n    }\r\n\r\n    // Unlike AND gates, we can use the value above to indicate an error-free one at an input.\r\n    // An input one sets the corresponding output bit to one, so we clear the error states on these bits.\r\n    // Because 1 OR X = 1\r\n    unknown &= ~value;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance,\r\n    });\r\n  }\r\n\r\n  opNor(): LogicState {\r\n    let state = this.opOr();\r\n    return state.negated(this.width);\r\n  }\r\n\r\n  opXor(): LogicState {\r\n    let value = 0;\r\n    let unknown = 0;\r\n    let high_impedance = 0;\r\n\r\n    for (let pin of this.inputPins) {\r\n      value ^= pin.state.v;\r\n      unknown |= pin.state.x;\r\n      // Treat input z as unknown.\r\n      unknown |= pin.state.z;\r\n    }\r\n\r\n    // We don't ignore errors at inputs for XOR because we need all inputs in every case to determine the output.\r\n\r\n    return new LogicState({\r\n      v: value & ~unknown,\r\n      x: unknown,\r\n      z: high_impedance,\r\n    });\r\n  }\r\n\r\n  opXnor(): LogicState {\r\n    let state = this.opXor();\r\n    return state.negated(this.width);\r\n  }\r\n\r\n  opBuf(): LogicState {\r\n    let [inputPin,] = this.inputPins;\r\n    let value = inputPin.state.v;\r\n    let unknown = inputPin.state.x | inputPin.state.z;\r\n    let high_impedance = 0;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance\r\n    })\r\n  }\r\n\r\n  opNot(): LogicState {\r\n    let [inputPin,] = this.inputPins;\r\n    let unknown = inputPin.state.x | inputPin.state.z;\r\n    let value = ~inputPin.state.v & this.bitMask() & ~unknown;\r\n    let high_impedance = 0;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance\r\n    });\r\n  }\r\n\r\n  operate(): void {\r\n    let logicState = this.opFunc();\r\n    this.postEvent(logicState, this.outputPins[0])\r\n  }\r\n\r\n\r\n  setUpBody(): paper.Item {\r\n    let {CompoundPath} = this.scope;\r\n    return new CompoundPath(pathFromGateType(this.subtype))\r\n  }\r\n\r\n  setUpInputPins(fieldWidth: number): LogicPin[] {\r\n    // Keep pins that fit within tne new field width to maintain old connections\r\n    let inputPins = this.inputPins.slice(0, fieldWidth);\r\n    let nuke = this.inputPins.slice(fieldWidth);\r\n    nuke.forEach(p => p.remove());\r\n\r\n    for (let i = this.fieldWidth; i < fieldWidth; ++i) {\r\n      inputPins.push(new LogicPin({\r\n        parent: this,\r\n        pinType: PinType.INPUT,\r\n        orientation: PinOrientation.LEFT,\r\n        board: this.board,\r\n      }))\r\n    }\r\n\r\n    let offset =\r\n        fieldWidth === 1 ? 16 :\r\n            fieldWidth === 2 ? 32 / 3 :\r\n                fieldWidth === 3 ? 6 :\r\n                    2;\r\n    let spacing =\r\n        fieldWidth === 2 ? 32 / 3 :\r\n            fieldWidth === 3 ? 10 :\r\n                28 / 3;\r\n\r\n    for (let i = 0; i < fieldWidth; ++i) {\r\n      inputPins[i].updateGeometry(new paper.Point(0, offset + i * spacing));\r\n    }\r\n\r\n    return inputPins;\r\n  }\r\n\r\n  setUpOutputPins(): LogicPin[] {\r\n    if (this.outputPins.length > 0) {\r\n      return this.outputPins;\r\n    }\r\n    let pin = new LogicPin({\r\n      parent: this,\r\n      pinType: PinType.OUTPUT,\r\n      orientation: PinOrientation.RIGHT,\r\n      not: isNot(this.subtype),\r\n      board: this.board,\r\n    })\r\n    pin.updateGeometry(new paper.Point(32, 16))\r\n\r\n    return [pin];\r\n  }\r\n\r\n  reset() {\r\n    let [output] = this.outputPins;\r\n    output.setLogicState(new LogicState({x: this.bitMask()}))\r\n  }\r\n}\r\n\r\nexport default LogicGate;","import paper from \"paper/dist/paper-core\";\r\nimport React from \"react\";\r\n\r\nimport LogicComponent, {LogicComponentParams} from \"./LogicComponent\";\r\nimport {BULB_PATH} from \"../Constants\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"flags\" | \"type\"> {\r\n}\r\n\r\n/** Light Bulb implementation */\r\nclass Bulb extends LogicComponent {\r\n  on: boolean = false;\r\n  constructor(params: IParams) {\r\n    super({...params, type: PartType.OUTPUT, flags: 0});\r\n  }\r\n\r\n  operate(): void {\r\n    this.on = this.inputPins[0].state.v === 1;\r\n  }\r\n\r\n  /** Renders the glow of the bulb if the bulb is in the on state */\r\n  extraRender(): React.ReactElement[] {\r\n    // TODO: Render the glow on top of all other components.\r\n    //   SVG renders elements in document order.\r\n    let display = this.on ? \"auto\" : \"none\"\r\n    return [\r\n        <circle key={0} className={\"bulb-glow\"} cx={16} cy={16} r={32} display={display}/>\r\n    ];\r\n  }\r\n\r\n  setUpBody(): paper.Item {\r\n    return new this.scope.Path(BULB_PATH);\r\n  }\r\n\r\n  setUpInputPins(fieldWidth: number): LogicPin[] {\r\n    let {bottom} = this.body.bounds;\r\n    let pin = new LogicPin({\r\n      parent: this,\r\n      pinType: PinType.INPUT,\r\n      orientation: PinOrientation.DOWN,\r\n      board: this.board\r\n    });\r\n\r\n    pin.updateGeometry(new paper.Point(16, bottom));\r\n    return [pin];\r\n  }\r\n\r\n  /** No-op */\r\n  reset() {\r\n  }\r\n\r\n}\r\n\r\nexport default Bulb;","import React from \"react\";\r\n\r\nimport LogicComponent, {LogicComponentParams} from \"./LogicComponent\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicConnection from \"./LogicConnection\";\r\nimport LogicState from \"./LogicState\";\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"flags\" | \"type\" | \"width\"> {}\r\n\r\nclass Clock extends LogicComponent {\r\n  static clockPath: string = \"M4,12L8,12L8,20L16,20L16,12L24,12L24,20L28,20\"\r\n\r\n  constructor(params: IParams) {\r\n    super({...params, type: PartType.INPUT, flags: 0, delay: 10});\r\n    let [output] = this.outputPins\r\n    // This hack ensures that the clock triggers itself to change.\r\n    let selfConnection = new LogicConnection({source: output, sink: output})\r\n    output.connections.set(output.uuid, selfConnection);\r\n  }\r\n\r\n  operate(): void {\r\n    let s = this.outputPins[0].state.negated(1);\r\n    this.postEvent(s);\r\n  }\r\n\r\n  setUpBody(fieldWidth: number): paper.Item {\r\n    let {Path, Point, Size} = this.scope;\r\n    return new Path.Rectangle(new Point(0, 0), new Size(32, 32));\r\n\r\n  }\r\n\r\n  setUpOutputPins(fieldWidth: number): LogicPin[] {\r\n    let pin = new LogicPin({\r\n      parent: this,\r\n      pinType: PinType.OUTPUT,\r\n      orientation: PinOrientation.RIGHT,\r\n      board: this.board\r\n    })\r\n    pin.updateGeometry(new this.scope.Point(32, 16));\r\n    return [pin];\r\n  }\r\n\r\n  extraRender(): React.ReactElement[] {\r\n    return [\r\n      <path className=\"decoration\" key={0} d={Clock.clockPath} fill=\"none\"/>\r\n    ];\r\n  }\r\n\r\n  reset() {\r\n    let [output] = this.outputPins;\r\n    output.setLogicState(new LogicState({v: 0}));\r\n    this.operate();\r\n  }\r\n}\r\n\r\nexport default Clock;","import LogicComponent, {LogicComponentParams} from \"./LogicComponent\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicState from \"./LogicState\";\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"flags\" | \"type\"> {}\r\n\r\nclass Switch extends LogicComponent {\r\n    constructor(params: IParams) {\r\n        super({...params, type: PartType.INPUT, flags: 0});\r\n    }\r\n\r\n    operate(): void {\r\n    }\r\n\r\n    setUpBody(fieldWidth: number): paper.Item {\r\n        let {Path, Point, Size} = this.scope;\r\n        return new Path.Rectangle(new Point(0, 0), new Size(32 * this.width, 32));\r\n    }\r\n\r\n    setUpOutputPins(fieldWidth: number): LogicPin[] {\r\n        let pin = new LogicPin({\r\n            parent: this,\r\n            pinType: PinType.OUTPUT,\r\n            orientation: PinOrientation.RIGHT,\r\n            board: this.board,\r\n            width: this.width,\r\n        });\r\n\r\n        pin.updateGeometry(new this.scope.Point(32*this.width, 16));\r\n\r\n        return [pin];\r\n    }\r\n\r\n    extraRender(): React.ReactElement[] {\r\n        let [pin] = this.outputPins\r\n        let switches = []\r\n        for (let i = 0; i < this.width; i++) {\r\n            let classnames = [\"switch\"]\r\n            let stateString = \"0\"\r\n            if ((pin.state.v >> i) & 1) {\r\n                classnames.push(\"on\")\r\n                stateString = \"1\"\r\n            }\r\n\r\n            let x = 16 + 32 * (this.width - i - 1);\r\n            let y = 16;\r\n\r\n            switches.push(\r\n                <circle key={i}\r\n                        className={classnames.join(' ')}\r\n                        cx={x}\r\n                        cy={y}\r\n                        r={12}\r\n                        onClick={this.handleClick.bind(this, i)}/>\r\n            )\r\n            switches.push(\r\n                <text className=\"center\" color=\"red\" x={x} y={y}>\r\n                    {stateString}\r\n                </text>\r\n            )\r\n        }\r\n        return switches\r\n\r\n    }\r\n\r\n    handleClick(i: number) {\r\n        let [pin] = this.outputPins\r\n        let v = (pin.state.v ^ (1 << i))\r\n        pin.setLogicState(new LogicState({\r\n            v: v\r\n        }))\r\n    }\r\n\r\n    /** Intentionally no-op */\r\n    reset(): void { }\r\n}\r\n\r\nexport default Switch;","import GateType from \"../enums/GateType\";\r\nimport LogicComponent from \"../logic/LogicComponent\";\r\nimport LogicGate from \"../logic/LogicGate\";\r\nimport PartType from \"../enums/PartType\";\r\nimport {GLOBAL_SCOPE} from \"../Constants\";\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\nimport Bulb from \"../logic/Bulb\";\r\nimport Clock from \"../logic/Clock\";\r\nimport Switch from \"../logic/Switch\";\r\nimport paper from \"paper\";\r\n\r\ninterface PartParams {\r\n  type: PartType,\r\n  subtype: GateType,\r\n  label?: string;\r\n}\r\n\r\n/**\r\n * Part is a factory class used to generate logic components.\r\n */\r\nclass Part {\r\n  readonly subtype: GateType;\r\n  readonly type: PartType;\r\n  readonly label: string;\r\n  static data?: Part;\r\n  component: LogicComponent;\r\n\r\n  constructor(params: PartParams) {\r\n    this.type = params.type;\r\n    this.subtype = params.subtype;\r\n    this.label = params.label ?? \"<NO LABEL>\";\r\n    this.component = this.make();\r\n  }\r\n\r\n  make(board?: LogicBoard): LogicComponent {\r\n    let scope = board?.scope ?? GLOBAL_SCOPE;\r\n    switch (this.type) {\r\n      case PartType.GATE:\r\n        return new LogicGate({subtype: this.subtype, scope: scope, board: board});\r\n      case PartType.OUTPUT:\r\n        return new Bulb({subtype: 0, board: board, scope: scope})\r\n      case PartType.INPUT:\r\n        return this.makeInput(this.subtype, scope, board)\r\n\r\n      default:\r\n        throw new Error(\"Unsupported Part Type\");\r\n    }\r\n  }\r\n\r\n  makeInput(subtype: number, scope: paper.PaperScope, board?: LogicBoard) {\r\n    switch (subtype){\r\n      case 0:\r\n        return new Clock({board: board, scope: scope, subtype: 0})\r\n      case 1:\r\n        return new Switch({subtype: 1, board: board, scope: scope})\r\n      default:\r\n        throw Error(\"Unsupported Part Type\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default Part;","import React from \"react\";\r\nimport \"../css/PartsDrawer.css\"\r\nimport Part from \"./Part\";\r\n\r\ninterface IProps {\r\n  parts: Array<Part>,\r\n}\r\ninterface IState {}\r\n\r\n/**\r\n * A container which renders multiple parts together, and enables parts to be dragged and dropped onto a board\r\n *\r\n * For organizational purposes, a full suite of components may consist of multiple drawers.\r\n * */\r\nclass PartsDrawer extends React.Component<IProps, IState> {\r\n\r\n  renderPart(part: Part) {\r\n    let component = part.component;\r\n    let element = component.render();\r\n    let {label} = part\r\n    let {left, top, width, height} = component.geometry.bounds;\r\n    left -= 2;\r\n    top -= 2;\r\n    width += 4;\r\n    height += 4;\r\n\r\n    let id = label.replace(' ', '_');\r\n    return (\r\n        <div className=\"part\"\r\n             key={component.uuid}\r\n             draggable\r\n             onDragStart={this.handleDragStart.bind(this, id, part)}\r\n             onDragEnd={this.handleDragEnd.bind(this)}\r\n        >\r\n          <div className=\"part-image-container\">\r\n            <svg className=\"part-image\" id={id} viewBox={`${left} ${top} ${width} ${height}`} width={width} height={height}>\r\n              {element}\r\n            </svg>\r\n          </div>\r\n          <div className=\"part-label\">{label}</div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  handleDragStart(id: string, part: Part, e: React.DragEvent<HTMLElement>) {\r\n    Part.data = part;\r\n\r\n    let elem = document.getElementById(id) as HTMLElement;\r\n\r\n    let {x, y} = part.component.geometry.bounds.center;\r\n\r\n    e.dataTransfer.setDragImage(elem, x+2, y+2);\r\n    e.dataTransfer.effectAllowed = \"move\";\r\n\r\n  }\r\n\r\n  handleDragEnd() {\r\n    Part.data = undefined;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"drawer\">\r\n          {this.props.parts.map(this.renderPart.bind(this))}\r\n        </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default PartsDrawer;","import paper from \"paper\";\r\nimport React from \"react\";\r\n\r\nimport '../css/Board.css';\r\nimport Part from \"./Part\";\r\nimport LogicComponent from \"../logic/LogicComponent\";\r\nimport {GateEventHandlers} from \"./Component\";\r\nimport LogicPin, {PinType} from \"../logic/LogicPin\";\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\n\r\n\r\ninterface MouseEventMapping {\r\n    /** The x-coordinate in svg coordinates */\r\n    x: number,\r\n    /** The y-coordinate in svg coordinates */\r\n    y: number,\r\n    /**\r\n     * The x-coordinate as the relative position within the viewBox\r\n     * <br>\r\n     * 0 is the left side of the viewBox, and 1 is the right side of the viewBox\r\n     * */\r\n    rx: number,\r\n    /**\r\n     * The y-coordinate as the relative position within the viewBox\r\n     * <br>\r\n     * 0 is the top side of the viewBox, and 1 is the bottom side of the viewBox\r\n     * */\r\n    ry: number,\r\n    /** The horizontal distance moved in svg coordinate space since the last mouse event */\r\n    dx: number,\r\n    /** The vertical distance moved in svg coordinate space since the last mouse event */\r\n    dy: number,\r\n}\r\n\r\ninterface IProps {\r\n    board: LogicBoard;\r\n}\r\n\r\ninterface IState {\r\n    /** The size and offset of our view onto the board. */\r\n    viewBox: {\r\n        left: number,\r\n        top: number,\r\n        width: number,\r\n        height: number,\r\n    },\r\n    /** The size on the page of the board */\r\n    viewPort: {\r\n        width: number,\r\n        height: number,\r\n    },\r\n    scaleFactor: number,\r\n    pan: boolean,\r\n    drag: boolean,\r\n}\r\n\r\n/**\r\n * React Component implementation of LogicBoard\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Board extends React.Component<IProps, IState> {\r\n    private ref: React.RefObject<any>;\r\n    private resizeObserer?: ResizeObserver;\r\n    private sPoint: paper.Point | undefined;\r\n    private select: paper.Path | null;\r\n\r\n    constructor(props: Readonly<IProps>) {\r\n        super(props);\r\n\r\n        this.select = null;\r\n        // @ts-ignore\r\n        this.state = {\r\n            viewBox: {\r\n                left: 0,\r\n                top: 0,\r\n                width: 800,\r\n                height: 600,\r\n            },\r\n            viewPort: {\r\n              width: 0,\r\n              height: 0,\r\n            },\r\n            scaleFactor: 1,\r\n            pan: false,\r\n            drag: false,\r\n        }\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    /** Resize handler to make sure the board doesn't scale up when the window is resized */\r\n    onResize(entries: ResizeObserverEntry[]) {\r\n        let {width, height} = entries[0].contentRect;\r\n        this.setState((state) => {\r\n            return {\r\n                viewPort: {\r\n                    width: width,\r\n                    height: height,\r\n                },\r\n                viewBox: {\r\n                    left: state.viewBox.left,\r\n                    top: state.viewBox.top,\r\n                    width: width * state.scaleFactor,\r\n                    height: height * state.scaleFactor,\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called after this component is rendered to the DOM\r\n     * <br>\r\n     * This is useful to perform initialization which requires this component or it's children to have been rendered.\r\n     * @see {@link https://reactjs.org/docs/react-component.html#componentdidmount componentDidMount}\r\n     * */\r\n    componentDidMount() {\r\n        this.setState({});\r\n        let board = this.ref.current;\r\n        this.resizeObserer = new ResizeObserver(this.onResize.bind(this));\r\n        this.resizeObserer.observe(board)\r\n    }\r\n\r\n    /**\r\n     * Called before this element will be removed from the DOM\r\n     * <br>\r\n     * Generally used to clean up any bindings set up in {@link componentDidMount}, and other stray bindings.\r\n     * @see {@link https://reactjs.org/docs/react-component.html#componentwillunmount componentWillUnmount} */\r\n    componentWillUnmount() {\r\n        this.resizeObserer?.disconnect();\r\n    }\r\n\r\n    /** SVG definitions referenced by other svg elements. */\r\n    defs() {\r\n        return (\r\n            <defs key=\"defs\">\r\n                <pattern id=\"grid\" x={0} y={0} width={80} height={80} viewBox=\"0 0 80 80\" patternUnits=\"userSpaceOnUse\">\r\n                    <path className=\"grid\" d=\"M 0 0 L 0 80\" strokeWidth=\"2\"/>\r\n                    <path className=\"grid\" d=\"M 10 0 L 10 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 20 0 L 20 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 30 0 L 30 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 40 0 L 40 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 50 0 L 50 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 60 0 L 60 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 70 0 L 70 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 80 0 L 80 80\" strokeWidth=\"2\"/>\r\n\r\n                    <path className=\"grid\" d=\"M 0 0 L 80 0\" strokeWidth=\"2\"/>\r\n                    <path className=\"grid\" d=\"M 0 10 L 80 10\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 20 L 80 20\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 30 L 80 30\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 40 L 80 40\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 50 L 80 50\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 60 L 80 60\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 70 L 80 70\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 80 L 80 80\" strokeWidth=\"2\"/>\r\n                </pattern>\r\n\r\n                <pattern id=\"bus\" x={0} y={0} width={3} height={3} viewBox=\"0 0 3 3\" patternUnits=\"userSpaceOnUse\">\r\n                    <rect x={2} y={0} width={1} height={1} fill=\"black\"/>\r\n                    <rect x={1} y={1} width={1} height={1} fill=\"black\"/>\r\n                    <rect x={0} y={2} width={1} height={1} fill=\"black\"/>\r\n                </pattern>\r\n\r\n                <radialGradient id=\"bulb-glow\">\r\n                    <stop offset=\"0%\" stopColor=\"rgb(255, 255, 128)\" />\r\n                    <stop offset=\"100%\" stopColor=\"rgba(255, 255, 255, 0)\" />\r\n                </radialGradient>\r\n            </defs>\r\n        );\r\n    }\r\n\r\n    /** Draws the grid background as a repeated pattern on a rectangle which exactly fills the viewBox */\r\n    renderGrid() {\r\n        const left = this.state.viewBox.left,\r\n            width = this.state.viewBox.width,\r\n            top = this.state.viewBox.top,\r\n            height = this.state.viewBox.height;\r\n\r\n        return <rect key=\"grid\" x={left} y={top} width={width} height={height} fill=\"url(#grid)\"/>;\r\n    }\r\n\r\n    render() {\r\n        const left = this.state.viewBox.left,\r\n            width = this.state.viewBox.width,\r\n            top = this.state.viewBox.top,\r\n            height = this.state.viewBox.height;\r\n\r\n        let selectionBox = (this.select?.exportSVG() as SVGElement)?.getAttribute('d');\r\n\r\n        let handlers: GateEventHandlers = {\r\n            onGateMouseDown: this.handleGateMouseDown.bind(this),\r\n            onGateMouseUp: this.handleGateMouseUp.bind(this),\r\n            onGateContextMenu: this.handleGateContextMenu.bind(this),\r\n            onPinMouseDown: this.handlePinMouseDown.bind(this),\r\n        }\r\n\r\n        let renderedConnections: JSX.Element[] = [];\r\n        this.props.board.connections.forEach((c) => renderedConnections.push(c.render()));\r\n\r\n        let renderedComponents: JSX.Element[] = [];\r\n        this.props.board.components.forEach((c) => renderedComponents.push(c.render(handlers)));\r\n\r\n        // Nested svgs is a hack to allow resizing the viewPort without scaling the contents.\r\n        // When the viewport is resized, the inner svg's viewBox is updated so it exactly fits the outer SVG's viewport.\r\n        // Normally, an svg element with a defined viewBox is forced to fit the aspect ratio of its viewbox.\r\n        return (\r\n            <div\r\n                ref={this.ref}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\"\r\n                }}\r\n            >\r\n                <svg className=\"board-wrapper\" style={this.state.viewPort}\r\n                     xmlns=\"http://www.w3.org/2000/svg\"\r\n                     onWheel={(e)=> this.handleWheel(e)}\r\n                     onMouseMove={(e) => this.handleMouseMove(e)}\r\n                     onMouseDown={(e) => this.handleMouseDown(e)}\r\n                     onMouseUp={(e) => this.handleMouseUp(e)}\r\n                     onMouseLeave={(e) => this.handleMouseExit(e)}\r\n                     onDragEnter={this.handleDragEnter.bind(this)}\r\n                     onDragOver={(e) => this.handleDragOver(e)}\r\n                     onDrop={(e) => this.handleDrop(e)}\r\n                >\r\n                    <svg className=\"board\"\r\n                         preserveAspectRatio=\"xMinYMin slice\"\r\n                         xmlns=\"http://www.w3.org/2000/svg\"\r\n                         viewBox={`${left} ${top} ${width} ${height}`}\r\n                         onScroll={() => console.log(\"scroll\")}\r\n                    >\r\n                        {this.defs()}\r\n                        {this.renderGrid()}\r\n                        <circle className={\"origin\"} x=\"0\" y=\"0\" r=\"40\" fill=\"red\"/>\r\n                        {renderedConnections}\r\n                        {renderedComponents}\r\n                        {selectionBox &&\r\n                        <path className=\"select\" d={selectionBox} vectorEffect=\"non-scaling-stroke\"/>\r\n                        }\r\n                    </svg>\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /** Unselects all selected items */\r\n    clearSelection() {\r\n        for(let item of this.scope.project.selectedItems) {\r\n            item.selected = false;\r\n        }\r\n    }\r\n\r\n    /**  Maps a mouse event's position on the page to the viewBox coordinates */\r\n    getViewCoordinates(e: React.MouseEvent<SVGSVGElement, MouseEvent>): MouseEventMapping {\r\n        let rect = e.currentTarget.getBoundingClientRect();\r\n        const l = rect.left,\r\n            t = rect.top,\r\n            w = rect.width,\r\n            h = rect.height;\r\n\r\n        const localX = e.pageX - l,\r\n            localY = e.pageY - t;\r\n\r\n        const dLocalX = e.movementX,\r\n            dLocalY = e.movementY;\r\n\r\n        const viewWidth = this.state.viewBox.width,\r\n            viewHeight = this.state.viewBox.height;\r\n\r\n        const viewRelativeX = localX / w,\r\n            viewRelativeY = localY / h,\r\n            viewX = this.state.viewBox.left + viewRelativeX * viewWidth,\r\n            viewY = this.state.viewBox.top + viewRelativeY * viewHeight,\r\n            dX = dLocalX / w * viewWidth,\r\n            dY = dLocalY / h * viewHeight;\r\n\r\n        return {\r\n            x: viewX,\r\n            y: viewY,\r\n            rx: viewRelativeX,\r\n            ry: viewRelativeY,\r\n            dx: dX,\r\n            dy: dY,\r\n        }\r\n    }\r\n\r\n    /*\r\n    Event handlers and associated helpers\r\n     */\r\n    enableDrag(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        e.stopPropagation()\r\n        this.setState({drag: true})\r\n    }\r\n\r\n    disableDrag(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        e.stopPropagation()\r\n        this.setState({drag: false})\r\n    }\r\n\r\n    handleDragEnter(e: React.DragEvent<SVGSVGElement>) {\r\n        e.preventDefault();\r\n        e.dataTransfer.effectAllowed = \"move\";\r\n    }\r\n\r\n    handleDragOver(e: React.DragEvent<SVGSVGElement>) {\r\n        e.preventDefault();\r\n        e.dataTransfer.effectAllowed = \"move\";\r\n    }\r\n\r\n    handleDrop(e: React.DragEvent<SVGSVGElement>) {\r\n        e.preventDefault();\r\n        let {x, y} = this.getViewCoordinates(e);\r\n        let part = Part.data as Part;\r\n        if (!part) {\r\n            return\r\n        }\r\n        let component = part.make(this.props.board);\r\n        component.geometry.translate(new paper.Point(x - 16, y - 16))\r\n\r\n        this.props.board.addComponent(component);\r\n\r\n        this.setState({})\r\n    }\r\n\r\n    handleMouseDown(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        // This is only called if neither a pin nor component is clicked.\r\n        this.clearSelection();\r\n        const {Path, Point, Rectangle, Size} = this.props.board.scope;\r\n        // this.setState({pan: true});\r\n        const {x, y} = this.getViewCoordinates(e);\r\n        this.sPoint = new Point(x, y);\r\n        let rect = new Rectangle(this.sPoint, new Size(0, 0))\r\n        this.select = new Path.Rectangle(rect)\r\n        this.setState({})\r\n    }\r\n\r\n    handleMouseUp(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        // this.setState({pan: false});\r\n        if (this.select) {\r\n            this.select.remove()\r\n            this.select = null;\r\n        }\r\n\r\n        this.setState({pan: false, drag: false});\r\n    }\r\n\r\n    handleMouseExit(_e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n\r\n        if (this.select) {\r\n            this.select.remove()\r\n            this.select = null;\r\n        }\r\n        this.setState({pan: false, drag: false})\r\n    }\r\n\r\n    isSelected(item: paper.Item): boolean {\r\n        const select = this.select as paper.Item;\r\n        const selectionRect = select.bounds;\r\n        // let clone = item.clone();\r\n        // clone.transform(item.parent.matrix)\r\n        // let isSelected = clone.intersects(select) || clone.isInside(selectionRect) || clone.contains(selectionRect.center)\r\n        // clone.remove()\r\n\r\n        let matrix = item.parent.matrix;\r\n        let imatrix = matrix.inverted();\r\n        item.transform(matrix)\r\n        let isSelected = item.intersects(select) || item.isInside(selectionRect) || item.contains(selectionRect.center)\r\n        item.transform(imatrix)\r\n        return isSelected\r\n    }\r\n\r\n    handleMouseMove(e: React.MouseEvent<SVGSVGElement, MouseEvent>) {\r\n        let {x, y, dx, dy} = this.getViewCoordinates(e)\r\n\r\n        if (this.state.drag) {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n\r\n            let selected = this.props.board.scope.project.getItems({\r\n                selected: true,\r\n                data: {\r\n                    type: 'Component',\r\n                }\r\n            });\r\n\r\n            for (let s of selected) {\r\n                let dp = new paper.Point(dx, dy);\r\n                s.parent.translate(dp)\r\n                // for (let c of s.parent.children) {\r\n                //     c.translate(dp)\r\n                // }\r\n            }\r\n            this.setState({});\r\n\r\n        }\r\n\r\n        if (this.select && this.sPoint) {\r\n            let select = this.select;\r\n            const [sx, sy] = [this.sPoint.x, this.sPoint.y]\r\n\r\n            if (x === sx && y === sy) {\r\n                for (let s of select.segments) {\r\n                    s.point = this.sPoint;\r\n                }\r\n            }\r\n\r\n            if (x <= sx) {\r\n                select.segments[0].point.x = x\r\n                select.segments[1].point.x = x\r\n                select.segments[2].point.x = sx\r\n                select.segments[3].point.x = sx\r\n            }\r\n            if (x >= sx) {\r\n                select.segments[0].point.x = sx\r\n                select.segments[1].point.x = sx\r\n                select.segments[2].point.x = x\r\n                select.segments[3].point.x = x\r\n            }\r\n            if (y <= sy) {\r\n                select.segments[0].point.y = sy\r\n                select.segments[1].point.y = y\r\n                select.segments[2].point.y = y\r\n                select.segments[3].point.y = sy\r\n            }\r\n            if (y >= sy) {\r\n                select.segments[0].point.y = y\r\n                select.segments[1].point.y = sy\r\n                select.segments[2].point.y = sy\r\n                select.segments[3].point.y = y\r\n            }\r\n\r\n            const {project} = this.props.board.scope;\r\n\r\n            let components = project.getItems({\r\n                data: {\r\n                    type: 'Component'\r\n                }\r\n            })\r\n\r\n            let sc = false;\r\n\r\n            for (let component of components) {\r\n                if (this.isSelected(component)) {\r\n                    sc = true;\r\n                    component.selected = true;\r\n                } else {\r\n                    component.selected = false;\r\n                }\r\n            }\r\n\r\n            let pins = project.getItems({\r\n                data: {\r\n                    type: 'Pin'\r\n                }\r\n            })\r\n\r\n            for (let pin of pins) {\r\n                pin.selected = !sc && this.isSelected(pin);\r\n            }\r\n\r\n            this.setState({});\r\n            this.forceUpdate();\r\n        }\r\n\r\n        if (this.state.pan) {\r\n            this.setState({\r\n                viewBox: {\r\n                    top: this.state.viewBox.top - dy,\r\n                    left: this.state.viewBox.left - dx,\r\n                    width: this.state.viewBox.width,\r\n                    height: this.state.viewBox.height,\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    static between(a: number , b: number, c: number) {\r\n        return Math.min(Math.max(a, b), c);\r\n    }\r\n\r\n    handleWheel(e: React.WheelEvent<SVGSVGElement>)  {\r\n        let {x, y, rx, ry} = this.getViewCoordinates(e);\r\n\r\n        const viewWidth = this.state.viewPort.width,\r\n              viewHeight = this.state.viewPort.height;\r\n\r\n        const MIN_SCALE = 1 / 16.0;\r\n        const MAX_SCALE = 4.0;\r\n        const {scaleFactor} = this.state;\r\n\r\n        const newScaleFactor = Board.between(MIN_SCALE, Math.pow(2, e.deltaY / 1000) * scaleFactor, MAX_SCALE),\r\n              newWidth = viewWidth * newScaleFactor,\r\n              newHeight = viewHeight * newScaleFactor;\r\n\r\n        const newViewBox = {\r\n            left: x - rx * newWidth,\r\n            top: y - ry * newHeight,\r\n            width: newWidth,\r\n            height: newHeight,\r\n        };\r\n\r\n        this.setState({\r\n            scaleFactor: newScaleFactor,\r\n            viewBox: newViewBox,\r\n        });\r\n    }\r\n\r\n\r\n    handleGateMouseDown(logicComponent: LogicComponent, e: React.MouseEvent<SVGElement, MouseEvent>) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        console.log(\"Gate Down\");\r\n        let selected = this.props.board.scope.project.getItems({\r\n            selected: true,\r\n        })\r\n\r\n        let body = logicComponent.body as paper.Item;\r\n\r\n        if (!selected.includes(body)) {\r\n            for (let component of selected) {\r\n                component.selected = false;\r\n            }\r\n            body.selected = true;\r\n        }\r\n\r\n        this.setState({drag: true});\r\n    }\r\n\r\n    handleGateMouseUp(logicComponent: LogicComponent, e: React.MouseEvent<SVGElement, MouseEvent>) {\r\n        e.preventDefault();\r\n        console.log(\"up gate\")\r\n    }\r\n\r\n    handleGateContextMenu(logicComponent: LogicComponent, e:React.MouseEvent<SVGElement, MouseEvent>) {\r\n        if (e.shiftKey) {\r\n            return;\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        console.log(\"context g!\")\r\n    }\r\n\r\n    handlePinMouseDown(logicPin: LogicPin, e:React.MouseEvent<SVGElement, MouseEvent>) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        let {project} = this.props.board.scope;\r\n\r\n        let pins = project.getItems({\r\n            selected: true,\r\n            data: {\r\n                type: 'Pin'\r\n            }\r\n        }).map(p => p.data.logical) as LogicPin[];\r\n\r\n        let numOutputs = pins.filter(p => p.pinType === PinType.OUTPUT).length;\r\n        console.log(`Num outputs: ${numOutputs}`)\r\n        if (numOutputs <= 1) {\r\n            for(let pin of pins) {\r\n                this.makeConnection(pin, logicPin);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    makeConnection(a: LogicPin, b: LogicPin) {\r\n        console.log(\"attempting connection\")\r\n        let connection = a.connectTo(b);\r\n        if (connection) {\r\n            this.props.board.addConnection(connection);\r\n            this.setState({});\r\n        }\r\n    }\r\n\r\n    get scope(): paper.PaperScope {\r\n        return this.props.board.scope;\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","\r\n/** Functional interface that returns 0 when values are equal, <0 when a < b, and >0 when a > b **/\r\ninterface Comparator<T> {\r\n  (a: T, b: T): number;\r\n}\r\n\r\ninterface NodeParams<T> {\r\n  data: T;\r\n}\r\n\r\nclass BinarySearchTreeNode<T> {\r\n  data: T;\r\n  left: BinarySearchTreeNode<T> | null = null;\r\n  right: BinarySearchTreeNode<T> | null = null;\r\n  weight: number = 1;\r\n  max_depth: number = 1;\r\n\r\n  constructor(params: NodeParams<T>) {\r\n    this.data = params.data;\r\n  }\r\n\r\n  private rotateLeft(): BinarySearchTreeNode<T> {\r\n    if (!this.right) {\r\n      throw Error(\"Impossible rotation\")\r\n    }\r\n\r\n    let ret = this.right;\r\n    let side = ret.left;\r\n    this.right = side;\r\n    this.weight -= ret.weight;\r\n    this.weight += side?.weight || 0;\r\n    ret.left = this;\r\n    ret.weight -= side?.weight || 0;\r\n    ret.weight += this.weight;\r\n\r\n    this.max_depth = Math.max(this.left?.max_depth || 0, this.right?.max_depth || 0) + 1\r\n    ret.max_depth = Math.max(ret.left.max_depth, ret.right?.max_depth || 0) + 1\r\n\r\n    return ret;\r\n  }\r\n\r\n  private rotateRight(): BinarySearchTreeNode<T> {\r\n    if (!this.left) {\r\n      throw Error(\"Impossible rotation\")\r\n    }\r\n\r\n    let ret = this.left;\r\n    let side = ret.right;\r\n    this.left = side;\r\n    this.weight -= ret.weight;\r\n    this.weight += side?.weight || 0;\r\n    ret.right = this;\r\n    ret.weight -= side?.weight || 0;\r\n    ret.weight += this.weight;\r\n\r\n    this.max_depth = Math.max(this.left?.max_depth || 0, this.right?.max_depth || 0) + 1\r\n    ret.max_depth = Math.max(ret.left?.max_depth || 0, ret.right.max_depth) + 1\r\n\r\n    return ret;\r\n  }\r\n\r\n  private slant(): number {\r\n    let l = this.left?.max_depth || 0;\r\n    let r = this.right?.max_depth || 0;\r\n    return r - l;\r\n  }\r\n\r\n  private balance(): BinarySearchTreeNode<T> {\r\n    let slant = this.slant();\r\n    if (slant < -1 && this.left) {\r\n      let side_slant = this.left.slant();\r\n      if (side_slant >= 1) {\r\n        this.left = this.left.rotateLeft();\r\n      }\r\n      return this.rotateRight();\r\n    } else if (slant > 1 && this.right) {\r\n      let side_slant = this.right.slant();\r\n      if (side_slant <= -1) {\r\n        this.right = this.right.rotateRight();\r\n      }\r\n      return this.rotateLeft();\r\n    } else {\r\n      return this\r\n    }\r\n  }\r\n\r\n  insert(t: T, cmp: Comparator<T>): [BinarySearchTreeNode<T>, boolean] {\r\n    let result = cmp(t, this.data)\r\n    let added: boolean = false;\r\n    if (result < 0) {\r\n      if (this.left) {\r\n        [this.left, added] = this.left.insert(t, cmp)\r\n      } else {\r\n        this.left = new BinarySearchTreeNode<T>({data: t});\r\n        added = true;\r\n      }\r\n    } else if (result > 0) {\r\n      if (this.right) {\r\n        [this.right, added] = this.right.insert(t, cmp);\r\n      } else {\r\n        this.right = new BinarySearchTreeNode<T>({data: t});\r\n        added = true;\r\n      }\r\n    } else {\r\n      this.data = t;\r\n      return [this, false];\r\n    }\r\n\r\n    let ret: BinarySearchTreeNode<T> = this;\r\n    if (added) {\r\n      this.weight += 1;\r\n      this.max_depth = Math.max(this.left?.max_depth || 0, this.right?.max_depth || 0) + 1;\r\n      ret = this.balance();\r\n    }\r\n    return [ret, added];\r\n  }\r\n\r\n  find(t: T, cmp: Comparator<T>): T | null {\r\n    let result = cmp(t, this.data)\r\n    if (result < 0) {\r\n      return this.left && this.left.find(t, cmp);\r\n    } else if (result > 0) {\r\n      return this.right && this.right.find(t, cmp);\r\n    } else {\r\n      return this.data;\r\n    }\r\n  }\r\n\r\n  popFirst(): [BinarySearchTreeNode<T> | null, T] {\r\n    if (!this.left) {\r\n      return [this.right, this.data];\r\n    } else {\r\n      let [node, val] = this.left.popFirst();\r\n      this.left = node;\r\n\r\n      this.weight -= 1;\r\n      this.max_depth = Math.max(node?.max_depth || 0, this.right?.max_depth || 0) + 1\r\n\r\n      return [this.balance(), val]\r\n    }\r\n  }\r\n\r\n  popLast(): [BinarySearchTreeNode<T> | null, T] {\r\n    if (!this.right) {\r\n      return [this.left, this.data];\r\n    } else {\r\n      let [node, val] = this.right.popFirst();\r\n      this.right = node;\r\n\r\n      this.weight -= 1;\r\n      this.max_depth = Math.max(node?.max_depth || 0, this.left?.max_depth || 0) + 1\r\n\r\n      return [this.balance(), val]\r\n    }\r\n  }\r\n\r\n  remove(t: T, cmp: Comparator<T>): [BinarySearchTreeNode<T> | null, boolean] {\r\n    let result = cmp(t, this.data)\r\n    let removed: boolean;\r\n    let ret: BinarySearchTreeNode<T> | null = this;\r\n    if (result < 0) {\r\n      if (this.left) {\r\n        [this.left, removed] = this.left.remove(t, cmp)\r\n      } else {\r\n        removed = false;\r\n      }\r\n    } else if (result > 0) {\r\n      if (this.right) {\r\n        [this.right, removed] = this.right.remove(t, cmp);\r\n      } else {\r\n        removed = false;\r\n      }\r\n    } else {\r\n      if (this.left) {\r\n        [this.left, this.data] = this.left.popLast();\r\n      } else if (this.right) {\r\n        [this.right, this.data] = this.right.popFirst();\r\n      } else {\r\n        return [null, true];\r\n      }\r\n      removed = true;\r\n    }\r\n\r\n    if (removed) {\r\n      this.weight -= 1;\r\n      this.max_depth = Math.max(this.left?.max_depth || 0, this.right?.max_depth || 0) + 1;\r\n      ret = this.balance();\r\n    }\r\n    return [ret, removed];\r\n  }\r\n\r\n  clear() {\r\n    if (this.left) {\r\n      this.left.clear();\r\n      this.left = null;\r\n    }\r\n    if (this.right) {\r\n      this.right.clear();\r\n      this.right = null;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default BinarySearchTreeNode;","import BinarySearchTreeNode from \"./BinarySearchTreeNode\";\r\n\r\ninterface Comparator<T> {\r\n    (a: T, b: T): number;\r\n}\r\n\r\ninterface IParams<T> {\r\n    cmp: Comparator<T>;\r\n}\r\n\r\nclass BinarySearchTree<T extends Object> {\r\n    private readonly cmp: Comparator<T>;\r\n    root: BinarySearchTreeNode<T> | null = null;\r\n\r\n    constructor(params: IParams<T>) {\r\n        this.cmp = params.cmp;\r\n    }\r\n\r\n    insert(t: T) {\r\n        if (!this.root) {\r\n            this.root = new BinarySearchTreeNode<T>({data: t})\r\n        } else {\r\n            [this.root, ] = this.root.insert(t, this.cmp);\r\n        }\r\n    }\r\n\r\n    remove(t: T): boolean {\r\n        if (!this.root) {\r\n            return false;\r\n        }\r\n\r\n        let ret;\r\n        [this.root, ret] = this.root.remove(t, this.cmp);\r\n        return ret;\r\n    }\r\n\r\n    /** Removes all elements **/\r\n    clear(): void {\r\n        if (!this.root) {\r\n            return;\r\n        }\r\n\r\n        this.root.clear();\r\n        this.root = null;\r\n    }\r\n\r\n    find(t: T, cmp: Comparator<T> | null = null): T | null {\r\n        cmp = cmp || this.cmp\r\n        if (!this.root) {\r\n            return null;\r\n        }\r\n\r\n        return this.root.find(t, cmp) || null;\r\n    }\r\n\r\n    first(): T | null {\r\n        if (!this.root) {\r\n            return null;\r\n        }\r\n\r\n        let node = this.root;\r\n        while(node.left) {\r\n            node = node.left;\r\n        }\r\n\r\n        return node.data;\r\n    }\r\n\r\n    popFirst(): T | null {\r\n        if (!this.root) {\r\n            return null;\r\n        }\r\n\r\n        let [node, val] = this.root.popFirst();\r\n        this.root = node;\r\n        return val;\r\n    }\r\n\r\n    size(): number {\r\n        return this.root?.weight || 0;\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        return inOrderIterator(this);\r\n    }\r\n}\r\n\r\n\r\nfunction* inOrderIterator<T>(bst: BinarySearchTree<T>): Generator<T> {\r\n    if (bst.root === null) {\r\n        return;\r\n    }\r\n\r\n    let stack = [];\r\n    let current: BinarySearchTreeNode<T> | null = bst.root;\r\n\r\n    while (current || stack.length) {\r\n        while (current) {\r\n            stack.push(current);\r\n            current = current.left;\r\n        }\r\n\r\n        // @ts-ignore\r\n        let ret: BinarySearchTreeNode<T> = stack.pop();\r\n        yield ret.data;\r\n        if (ret.right) {\r\n            current = ret.right;\r\n        }\r\n    }\r\n\r\n    return;\r\n}\r\n\r\nexport default BinarySearchTree;","import LogicPin from \"./LogicPin\";\r\nimport LogicState from \"./LogicState\";\r\n\r\ninterface IParams {\r\n  pin: LogicPin,\r\n  time: number,\r\n  state: LogicState,\r\n}\r\n\r\n/**\r\n * Class representing an update to a pin due to the operation of a LogicComponent\r\n *\r\n * For use in a priority queue to enable logic simulation\r\n * */\r\nclass LogicEvent {\r\n  pin: LogicPin;\r\n  time: number;\r\n  state: LogicState\r\n\r\n  constructor(params: IParams) {\r\n    this.pin = params.pin;\r\n    this.time = params.time;\r\n    this.state = params.state;\r\n  }\r\n\r\n  apply() {\r\n    this.pin.setLogicState(this.state);\r\n  }\r\n\r\n  cmp(other: LogicEvent): number {\r\n    if (this.time === other.time) {\r\n      return this.pin.uuid.localeCompare(other.pin.uuid);\r\n    } else {\r\n      return this.time - other.time;\r\n    }\r\n  }\r\n\r\n  // TODO: add comparators\r\n}\r\n\r\nexport default LogicEvent;","import React from \"react\";\r\n\r\nimport Board from \"../components/Board\";\r\nimport LogicComponent from \"./LogicComponent\";\r\nimport LogicConnection from \"./LogicConnection\";\r\nimport paper from \"paper/dist/paper-core\";\r\nimport {makeAndSetupScope} from \"../util/PaperHelp\";\r\nimport LogicState from \"./LogicState\";\r\nimport LogicPin from \"./LogicPin\";\r\nimport BinarySearchTree from \"../BinarySearchTree\";\r\nimport LogicEvent from \"./LogicEvent\";\r\n\r\n/**\r\n *\r\n */\r\nclass LogicBoard {\r\n  /** All components which should be rendered on screen */\r\n  components: Map<string, LogicComponent> = new Map();\r\n  /** All connections which may be rendered */\r\n  connections: Map<string, LogicConnection> = new Map();\r\n  /** Paper scope for this board used to compute geometry, and intersections */\r\n  scope: paper.PaperScope = makeAndSetupScope();\r\n  /** All pending logical events on the board **/\r\n  simulation: BinarySearchTree<LogicEvent> = new BinarySearchTree<LogicEvent>({cmp: (a, b) => a.cmp(b)});\r\n  simulationTimerId: number = -1;\r\n  simulationCurrentTime: number = 0;\r\n  /** Controls how frequently the simulation is updated **/\r\n  simulationIntervalMs: number = 25;\r\n  /** Controls how many time units pass per simulation interval **/\r\n  simulationStepSize: number = 1;\r\n  updateFunc: Function = () => {};\r\n\r\n  render(): React.ReactElement {\r\n    return (\r\n        <Board board={this}/>\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Updates a pin at a simulated time in the future.\r\n   *\r\n   * @param state - The new logical state of the pin\r\n   * @param pin - The pin to be updated\r\n   * @param delay - The amount of time from the current time before the pin's state should be updated.\r\n   */\r\n  postEvent(state: LogicState, pin: LogicPin, delay: number) {\r\n    let event = new LogicEvent({\r\n      pin: pin,\r\n      time: this.simulationCurrentTime + delay,\r\n      state: state\r\n    });\r\n    this.simulation.insert(event);\r\n  }\r\n\r\n  startSimulation() {\r\n    if (this.simulationTimerId === -1) {\r\n      // @ts-ignore\r\n      this.simulationTimerId = setInterval(this.advanceSimulation.bind(this), this.simulationIntervalMs);\r\n    }\r\n  }\r\n\r\n  stopSimulation() {\r\n    if (this.simulationTimerId !== -1) {\r\n      clearInterval(this.simulationTimerId);\r\n      this.simulationTimerId = -1;\r\n      this.simulation.clear();\r\n      this.simulationCurrentTime = 0;\r\n      this.components.forEach(c => c.reset());\r\n      this.components.forEach(c => c.operate());\r\n    }\r\n  }\r\n\r\n  pauseSimulation() {\r\n    if (this.simulationTimerId !== -1) {\r\n      clearInterval(this.simulationTimerId);\r\n      this.simulationTimerId = -1;\r\n    }\r\n  }\r\n\r\n  advanceSimulation() {\r\n    let current = this.simulationCurrentTime;\r\n    let target = current + this.simulationStepSize;\r\n    // TODO(dpasillas): Modify Binary Tree to remove need to check first() on every loop.\r\n    while (this.simulation.size() && this.simulation.first()!.time <= target) {\r\n      let event = this.simulation.popFirst()!;\r\n      // Update the time so that operations triggered by this event use the correct reference time.\r\n      this.simulationCurrentTime = event.time;\r\n      event.apply();\r\n    }\r\n    this.simulationCurrentTime = target;\r\n    this.updateFunc();\r\n  }\r\n\r\n  get simulationRunning() {\r\n    return this.simulationTimerId !== -1;\r\n  }\r\n\r\n  get simulationPaused() {\r\n    return !this.simulationRunning && this.simulationCurrentTime !== 0;\r\n  }\r\n\r\n  get simulationStopped() {\r\n    return !this.simulationRunning && this.simulationCurrentTime === 0;\r\n  }\r\n\r\n  /** Tracks a component to be rendered */\r\n  addComponent(component: LogicComponent) {\r\n    this.components.set(component.uuid, component)\r\n  }\r\n\r\n  /** Tracks a connection to be rendered */\r\n  addConnection(connection: LogicConnection) {\r\n    this.connections.set(connection.uuid, connection)\r\n  }\r\n\r\n  /** Removes a component from being tracked and rendered */\r\n  removeComponent(uuid: string) {\r\n    this.components.delete(uuid);\r\n  }\r\n\r\n  /** Removes a connection from being tracked and rendered */\r\n  removeConnection(uuid: string) {\r\n    this.connections.delete(uuid);\r\n  }\r\n}\r\n\r\nexport default LogicBoard;","import React from \"react\";\r\nimport \"../css/Toolbar.css\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPause,\r\n  faStop,\r\n  faPlay,\r\n  faStepForward,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\n\r\ninterface IProps {\r\n  board: LogicBoard;\r\n}\r\n\r\ninterface IState {}\r\n\r\nclass Toolbar extends React.Component<IProps, IState> {\r\n  render() {\r\n    let running = this.props.board.simulationRunning;\r\n    let stopped = !running && this.props.board.simulationStopped;\r\n    return (\r\n        <div className=\"toolbar\" role=\"toolbar\">\r\n          <div className=\"group\">\r\n            <button className={running ? \"pressed\" : \"\"} onClick={this.onPlay.bind(this)}>\r\n              <FontAwesomeIcon className=\"default\" icon={faPlay} style={{position: \"fixed\"}}/>\r\n              <FontAwesomeIcon className=\"active\" icon={faPause}/>\r\n            </button>\r\n            <button onClick={this.onStop.bind(this)} {...{disabled: stopped}}>\r\n              <FontAwesomeIcon icon={faStop}/>\r\n            </button>\r\n            <button onClick={this.onStep.bind(this)} {...{disabled: running}}>\r\n              <FontAwesomeIcon icon={faStepForward}/>\r\n            </button>\r\n            <div>\r\n              {this.props.board.simulationCurrentTime}\r\n            </div>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  onPlay() {\r\n    let board = this.props.board;\r\n    if (board.simulationRunning) {\r\n      this.props.board.pauseSimulation();\r\n    } else {\r\n      this.props.board.startSimulation();\r\n    }\r\n    this.setState({})\r\n  }\r\n\r\n  onStop() {\r\n    this.props.board.stopSimulation();\r\n    this.setState({});\r\n  }\r\n\r\n  onStep() {\r\n    this.props.board.advanceSimulation()\r\n  }\r\n}\r\n\r\nexport default Toolbar;","import React from 'react';\r\nimport '../css/App.css';\r\nimport Sidebar from \"./Sidebar\";\r\nimport PartsDrawer from \"./PartsDrawer\";\r\nimport Part from \"./Part\";\r\nimport PartType from \"../enums/PartType\";\r\nimport GateType from \"../enums/GateType\";\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\nimport Toolbar from \"./Toolbar\";\r\n\r\ninterface IProps {}\r\ninterface IState {}\r\n\r\n/**\r\n * Entry point to the app.\r\n */\r\nclass App extends React.Component<IProps , IState>{\r\n  private board: LogicBoard = new LogicBoard();\r\n  private parts: Part[] = [\r\n    new Part({type: PartType.GATE, subtype: GateType.AND, label:\"AND\"}),\r\n    new Part({type: PartType.GATE, subtype: GateType.NAND, label:\"NAND\"}),\r\n    new Part({type: PartType.GATE, subtype: GateType.OR, label:\"OR\"}),\r\n    new Part({type: PartType.GATE, subtype: GateType.NOR, label:\"NOR\"}),\r\n    new Part({type: PartType.GATE, subtype: GateType.XOR, label:\"XOR\"}),\r\n    new Part({type: PartType.GATE, subtype: GateType.XNOR, label:\"XNOR\"}),\r\n    new Part({type: PartType.GATE, subtype: GateType.BUF, label:\"BUF\"}),\r\n    new Part({type: PartType.GATE, subtype: GateType.NOT, label:\"NOT\"}),\r\n    new Part({type: PartType.OUTPUT, subtype: 0, label:\"Bulb\"}),\r\n    new Part({type: PartType.INPUT, subtype: 0, label: \"Clock\"}),\r\n    new Part({type: PartType.INPUT, subtype: 1, label:\"Switch\"}),\r\n  ]\r\n\r\n  componentDidMount() {\r\n    this.board.updateFunc = () => this.setState({})\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.board.updateFunc = () => {};\r\n  }\r\n\r\n  render()\r\n  {\r\n    return (\r\n        <div style={{width: \"100%\", height: \"100%\"}}>\r\n          <div>\r\n            Menu\r\n            <Toolbar board={this.board}/>\r\n          </div>\r\n          <div style={{width: \"100%\", height: \"100%\"}}>\r\n            <Sidebar content={\r\n              <PartsDrawer parts={this.parts}/>\r\n            }/>\r\n            {this.board.render()}\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}