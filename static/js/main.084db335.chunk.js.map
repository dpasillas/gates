{"version":3,"sources":["enums/PartType.ts","reportWebVitals.ts","components/Component.tsx","logic/LogicComponent.tsx","util/PaperHelp.ts","Constants.ts","logic/LogicPin.tsx","components/Pin.tsx","logic/LogicState.ts","components/Connection.tsx","logic/LogicConnection.tsx","enums/GateType.ts","logic/LogicGate.tsx","logic/Bulb.tsx","logic/Clock.tsx","logic/Switch.tsx","logic/Adder.tsx","logic/Ground.tsx","components/Part.tsx","components/PartsDrawer.tsx","util/MouseManager.ts","components/Sidebar.tsx","util/OperableSet.ts","components/Board.tsx","BinarySearchTreeNode.ts","BinarySearchTree.ts","logic/LogicEvent.ts","logic/LogicBoard.tsx","Themes.tsx","ThemeContext.tsx","components/ToggleThemeButton.tsx","components/Toolbar.tsx","components/App.tsx","index.tsx"],"names":["PartType","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Component","props","state","logicComponent","updateSelf","setState","this","geometry","position","x","y","rotation","join","handlers","onGateMouseDown","onGateMouseUp","onGateContextMenu","pins","map","p","render","gate","classNames","body","selected","push","className","subtype","uuid","transform","getTransforms","onMouseDown","onMouseUp","onMouseMove","onGateMouseMove","onContextMenu","d","extraRender","i","renderLabel","React","LogicComponent","params","__fieldWidth","__width","__d","type","scope","board","delay","adjustableWidth","adjustableFieldWidth","minFieldWidth","maxFieldWidth","canMerge","isMerged","isMux","hasDelay","inputPins","outputPins","uuidv4","width","fieldWidth","updateGeometry","reset","fullParams","makeUpdateGeometryParams","Group","Point","remove","setUpBody","pivot","applyMatrix","setUpPins","addChild","addChildren","exportSVG","getAttribute","data","logic","numBits","setUpInputPins","setUpSelectorPins","setUpOutputPins","select","matrix","imatrix","inverted","isSelected","intersects","contains","update","delta","translate","flatMap","pin","connections","values","forEach","connection","postEvent","clearPins","removeComponent","getRenderParams","bind","undefined","onPinMouseDown","onPinMouseUp","onPinMouseMove","onPinContextMenu","makeAndSetupScope","paper","PaperScope","setup","project","draw","PinOrientation","PinType","GLOBAL_SCOPE","OR_PATH","Pin","pathAttributes","anchor","Tooltip","title","console","log","cx","cy","r","LogicState","v","z","other","mask","Connection","source","sink","ianchor","idir","oanchor","odir","fillClass","dist","Math","min","getDistance","ic","add","multiply","oc","ix","iy","ox","oy","icx","icy","ocx","ocy","end1_1","end1_2","end2_1","end2_2","fillRule","LogicConnection","hidden","delete","removeConnection","GateType","LogicPin","parent","connectionAnchor","not","orientation","pinType","label","Map","LEFT","addPin","INPUT","operate","OUTPUT","updateNext","Error","force","inputPin","ne","setLogicState","c","clear","canConnect","isConnectedTo","disconnect","set","connectTo","has","removePin","textClass","UP","DOWN","RIGHT","split","text","subscript","pos","CompoundPath","Path","NOT_PATH","rotate","subtract","logical","divide","size","bitMask","isNot","NAND","NOR","XNOR","NOT","AND","OR","XOR","BUF","minPins","maxPins","LogicGate","GATE","opFunc","opFuncs","value","unknown","zeroes","opAnd","negated","opOr","opXor","logicState","Constants","pathFromGateType","slice","max","offset","spacing","length","prototype","opNand","opNor","opXnor","opBuf","opNot","UNKNOWN","Bulb","on","display","bottom","bounds","Clock","output","selfConnection","s","Size","Rectangle","clockPath","fill","Switch","extras","classnames","stateString","onClick","handleClick","diff","Adder","COMPOSITE_BUILT_IN","a","b","cout","sum","cin","error","Ground","Part","component","make","makeInput","makeComposite","PartsDrawer","collapsed","part","element","left","top","height","id","replace","Paper","elevation","classes","root","draggable","onDragStart","handleDragStart","onDragEnd","handleDragEnd","viewBox","e","elem","document","getElementById","center","dataTransfer","setDragImage","effectAllowed","ListItem","dense","Button","sx","borderRadius","variant","endIcon","icon","faChevronRight","style","flexGrow","Collapse","wrapperInner","in","timeout","parts","renderPart","Divider","MouseAction","Sidebar","open","activeTab","sidebarClasses","Box","localeCompare","pointerEvents","List","subheader","ListSubheader","entries","index","Tab","writingMode","textOrientation","a11yProps","minWidth","minHeight","handleTabClick","Tabs","onChange","handleTabChange","borderRight","borderColor","flexShrink","renderTab","zIndex","overflow","renderUnderlay","renderProjectView","renderPartsView","newValue","OperableSet","result","symmetricDifference","Set","SelectionType","MouseManager","sPoint","selectBox","mouseButton","targetComponent","action","NONE","priorSelectionType","priorSelection","currentSelection","getViewCoordinates","name","handler","window","addEventListener","key","removeEventListener","removeHandlers","button","preventDefault","stopPropagation","altKey","getModifierState","SELECT_APPEND","SELECT_XOR","SELECT","clearSelection","rect","addHandler","handleMouseMoveSelect","handleMouseUp","PAN","handleMouseMovePan","target","selectedComponents","handleMouseMoveDrag","selectedPins","numOutputs","makeConnection","addConnection","COMPONENT","addAll","PIN","sy","segments","point","components","collides","union","xor","updateProperties","dx","dy","includes","current","Board","mouseManager","ref","resizeObserver","viewPort","scaleFactor","pan","drag","createRef","contentRect","ResizeObserver","onResize","observe","patternUnits","strokeWidth","stopColor","selectionBox","mm","handleGateMouseDown","handleGateContextMenu","handlePinMouseDown","renderedConnections","renderedComponents","xmlns","onWheel","handleWheel","handleBoardMouseDown","onDragEnter","handleDragEnter","onDragOver","handleDragOver","onDrop","handleDrop","preserveAspectRatio","onScroll","defs","renderGrid","vectorEffect","getBoundingClientRect","l","t","w","h","localX","pageX","localY","pageY","dLocalX","movementX","devicePixelRatio","dLocalY","movementY","viewLeft","viewTop","viewWidth","viewHeight","viewRelativeX","viewRelativeY","rx","ry","addComponent","newScaleFactor","between","pow","deltaY","newWidth","newHeight","newViewBox","shiftKey","BinarySearchTreeNode","right","weight","max_depth","ret","side","slant","rotateLeft","rotateRight","cmp","added","insert","balance","find","popFirst","node","val","removed","popLast","inOrderIterator","bst","stack","pop","BinarySearchTree","Symbol","iterator","LogicEvent","time","LogicBoard","_viewBox","simulation","simulationTimerId","simulationCurrentTime","simulationIntervalMs","simulationStepSize","updateApp","viewbox","event","setInterval","advanceSimulation","pauseSimulation","clearInterval","first","apply","simulationRunning","DarkTheme","createTheme","palette","mode","background","default","grey","LightTheme","ThemeContext","createContext","theme","setTheme","ToggleThemeButton","Consumer","IconButton","Toolbar","running","stopped","simulationStopped","Stack","backgroundColor","border","divider","flexItem","direction","flexDirection","onPlay","faPlay","faPause","onStop","disabled","faStop","onStep","faStepForward","startSimulation","stopSimulation","App","Provider","ThemeProvider","bgcolor","ReactDOM","StrictMode","StyledEngineProvider"],"mappings":"+OACKA,E,iCCaUC,G,qBAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,oSC4ECQ,E,kDAvDX,WAAYC,GAA6B,IAAD,8BACpC,cAAMA,IAEDC,MAAQ,GACb,EAAKD,MAAME,eAAeC,WAAa,kBAAM,EAAKC,SAAS,KAJvB,E,iDAUxC,WACI,MAAaC,KAAKL,MAAME,eAAeI,SAASC,SAA3CC,EAAL,EAAKA,EAAGC,EAAR,EAAQA,EAGR,MAAO,CAFa,oBAAgBD,EAAhB,YAAqBC,EAArB,KACA,iBAAaJ,KAAKL,MAAME,eAAeI,SAASI,SAAhD,MACwBC,KAAK,O,oBAGrD,WACI,MAAuEN,KAAKL,MAAMY,SAAvBA,GAA3D,EAAKC,gBAAL,EAAsBC,cAAtB,EAAqCC,kBAArC,kBAGIC,EADYX,KAAKL,MAAME,eAAec,OACrBC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,OAAOP,MAEnCQ,EAAOf,KAAKL,MAAME,eAGlBmB,EAAa,CAAC,aAMlB,OARWD,EAAKE,KAIPC,UACLF,EAAWG,KAAK,YAIhB,oBAAGC,UAAWJ,EAAWV,KAAK,KAC3B,aAAYS,EAAKM,QACjB,YAAWN,EAAKO,KAChBC,UAAWvB,KAAKwB,gBAHnB,UAKI,oBACIC,YAAazB,KAAKL,MAAMY,SAASC,gBACjCkB,UAAW1B,KAAKL,MAAMY,SAASE,cAC/BkB,YAAa3B,KAAKL,MAAMY,SAASqB,gBACjCC,cAAe7B,KAAKL,MAAMY,SAASG,kBAJvC,UAMI,sBAAMoB,EAAGf,EAAKe,IAEbf,EAAKgB,iBAET/B,KAAKL,MAAME,eAAec,OAAOC,KAAI,SAACC,EAAGmB,GAAJ,OAAUnB,EAAEoB,YAAYD,MAC7DrB,S,GAlDOuB,IAAMxC,WC4UfyC,E,WA7Pb,WAAsBC,GAAmC,IAAD,mDArChDC,cAAwB,EAqCwB,KApChDC,SAAmB,EAoC6B,KAnChDC,IAAc,GAmCkC,KAjC/CjB,UAiC+C,OAhC/CkB,UAgC+C,OA/B/CnB,aA+B+C,OA9B/CoB,WA8B+C,OA7BxDC,WA6BwD,OAtBxDC,WAsBwD,OApB/CC,qBAoB+C,OAnB/CC,0BAmB+C,OAlB/CC,mBAkB+C,OAjB/CC,mBAiB+C,OAhB/CC,cAgB+C,OAfxDC,cAewD,OAd/CC,WAc+C,OAb/CC,cAa+C,OAVxDlC,UAUwD,OARxDhB,cAQwD,OAPxDmD,UAAwB,GAOgC,KANxDC,WAAyB,GAM+B,KAFxDvD,gBAEwD,EAEtDE,KAAKsB,KAAOgC,cACZtD,KAAKyC,MAAQL,EAAOK,MACpBzC,KAAKwC,KAAOJ,EAAOI,KACnBxC,KAAKqB,QAAUe,EAAOf,QACtBrB,KAAK2C,MAAL,UAAaP,EAAOO,aAApB,QAA6B,EAE7B3C,KAAK4C,gBAAL,UAAuBR,EAAOQ,uBAA9B,SACA5C,KAAK6C,qBAAL,UAA4BT,EAAOS,4BAAnC,SACA7C,KAAK8C,cAAL,UAAqBV,EAAOU,qBAA5B,QAA6C,EAC7C9C,KAAK+C,cAAL,UAAqBX,EAAOW,qBAA5B,QAA6C,EAC7C/C,KAAKgD,SAAL,UAAgBZ,EAAOY,gBAAvB,SACAhD,KAAKiD,SAAW,UAACb,EAAOa,gBAAR,UAA8BjD,KAAKgD,SACnDhD,KAAKkD,MAAL,UAAad,EAAOc,aAApB,SACAlD,KAAKmD,SAAL,UAAgBf,EAAOe,gBAAvB,SAEAnD,KAAK0C,MAAQN,EAAOM,MAEpB,IAAIa,EAAK,UAAGnB,EAAOmB,aAAV,QAAmB,EACxBC,EAAU,UAAGpB,EAAOoB,kBAAV,QAAwB,EAEtCxD,KAAKyD,eAAe,CAACF,QAAOC,eAE5BxD,KAAKqC,aAAL,UAAoBD,EAAOoB,kBAA3B,QAAyC,EACzCxD,KAAKsC,QAAL,UAAeF,EAAOmB,aAAtB,QAA+B,EAE/BvD,KAAK0D,Q,4DAGP,SAAiCtB,GAA8D,IAAD,IAC5F,MAAO,CACLoB,WAAU,UAAEpB,EAAOoB,kBAAT,QAAuBxD,KAAKwD,WACtCD,MAAK,UAAEnB,EAAOmB,aAAT,QAAkBvD,KAAKuD,S,4BAKhC,SAAenB,GACb,IAAIuB,EAAa3D,KAAK4D,yBAAyBxB,GAC/C,EAAqBpC,KAAKyC,MAArBoB,EAAL,EAAKA,MAAOC,EAAZ,EAAYA,MACR5C,GAAW,EACXlB,KAAKiB,OACPjB,KAAKiB,KAAK8C,SACV7C,EAAWlB,KAAKiB,KAAKC,UAEvBlB,KAAKiB,KAAOjB,KAAKgE,UAAUL,GAC3B3D,KAAKiB,KAAKC,SAAWA,EAEhBlB,KAAKC,WACRD,KAAKC,SAAW,IAAI4D,EACpB7D,KAAKC,SAASgE,MAAQ,IAAIH,EAAM,EAAG,GACnC9D,KAAKC,SAASiE,aAAc,GAG9BlE,KAAKmE,UAAUR,GACf3D,KAAKC,SAASmE,SAASpE,KAAKiB,MAC5BjB,KAAKC,SAASoE,YAAYrE,KAAKW,OAAOC,KAAI,SAAAC,GAAC,OAAIA,EAAEZ,aAEjDD,KAAKuC,IAAOvC,KAAKiB,KAAKqD,YAA2BC,aAAa,KAE9DvE,KAAKiB,KAAKuD,KAAO,CACfhC,KAAM,YACNiC,MAAOzE,KACPC,SAAUD,KAAKC,Y,qBASnB,SAAQyE,GAA2B,IAAD,EAEhC,OAAQ,IADRA,EAAO,UAAGA,SAAH,QAAc1E,KAAKuD,QACF,I,kBAI1B,WACE,MAAM,GAAN,mBACOvD,KAAKoD,WADZ,YAEOpD,KAAKqD,e,uBASd,WAAY,oBAEMrD,KAAKW,QAFX,IAEV,2BAA6B,SACvBoD,UAHI,8BAMV/D,KAAKoD,UAAY,GACjBpD,KAAKqD,WAAa,K,uBAIpB,SAAUjB,GACRpC,KAAKoD,UAAL,sBAAqBpD,KAAK2E,eAAevC,IAAzC,YAAqDpC,KAAK4E,kBAAkBxC,KAC5EpC,KAAKqD,WAAarD,KAAK6E,gBAAgBzC,K,4BAIzC,SAAeA,GACb,MAAO,K,6BAIT,SAAgBA,GACd,MAAO,K,+BAIT,SAAkBA,GAChB,MAAO,K,sBAGT,SAAS0C,GACP,IAAIC,EAAS/E,KAAKC,SAAS8E,OACvBC,EAAUD,EAAOE,WACjBhE,EAAOjB,KAAKiB,KAChB6D,EAAOvD,UAAUyD,GACjB,IAAIE,EAAajE,EAAKkE,WAAWL,IAAWA,EAAOM,SAASnE,EAAKf,WAAae,EAAKmE,SAASN,EAAO5E,UAEnG,OADA4E,EAAOvD,UAAUwD,GACVG,I,sBAYT,WACE,OAAOlF,KAAKqC,c,IAVd,SAAemB,GACTxD,KAAKqC,eAAiBmB,IAG1BxD,KAAKyD,eAAe,CAACD,eACrBxD,KAAKqC,aAAemB,EACpBxD,KAAKF,YAAcE,KAAKF,gB,iBAgB1B,WACE,OAAOE,KAAKsC,S,IAVd,SAAUiB,GACJvD,KAAKsC,UAAYiB,IAGrBvD,KAAKyD,eAAe,CAACF,UACrBvD,KAAKsC,QAAUiB,EACfvD,KAAKF,YAAcE,KAAKF,gB,aAQ1B,WACE,OAAOE,KAAKuC,M,oBAGd,WACE,OAAOvC,KAAKiB,KAAKC,U,IAGnB,SAAaA,GACPlB,KAAKiB,KAAKC,WAAaA,IACzBlB,KAAKiB,KAAKC,SAAWA,EACrBlB,KAAKqF,Y,uBAIT,SAAUC,GACRtF,KAAKC,SAASsF,UAAUD,GACxBtF,KAAKqF,SACLrF,KAAKW,OACA6E,SAAQ,SAAAC,GAAG,mBAAQA,EAAIC,YAAYC,aACnCC,SAAQ,SAAAC,GAAU,OAAIA,EAAWR,c,uBAIxC,SAAUzF,EAAmB6F,GAAiB,IAAD,IAC3CA,EAAG,UAAGA,SAAH,QAAUzF,KAAKqD,WAAW,GAC7B,UAAArD,KAAK0C,aAAL,SAAYoD,UAAUlG,EAAO6F,EAAKzF,KAAK2C,S,oBAIzC,WAAU,IAAD,EACP3C,KAAK+F,mBACE/F,KAAKiB,KAAKuD,KAAKC,MACtBzE,KAAKiB,KAAK8C,SACV/D,KAAKC,SAAS8D,SACd,UAAA/D,KAAK0C,aAAL,SAAYsD,gBAAgBhG,KAAKsB,Q,yBAQnC,WACE,OAAO,+B,oBAIT,SAAOf,GACL,OACI,cAAC,EAAD,eAEQP,KAAKiG,gBAAgB1F,IADpBP,KAAKsB,Q,oBAMpB,WACEtB,KAAKF,YAAcE,KAAKF,e,6BAI1B,SAAgBS,GAAoD,IAAD,QACjE,MAAO,CACLiC,KAAMxC,KAAKqB,QACXxB,eAAgBG,KAChByC,MAAOzC,KAAKyC,MACZlC,SAAU,CACRC,gBAAe,OAAED,QAAF,IAAEA,GAAF,UAAEA,EAAUC,uBAAZ,aAAE,EAA2B0F,UAAKC,EAAWnG,MAC5DS,cAAa,OAAEF,QAAF,IAAEA,GAAF,UAAEA,EAAUE,qBAAZ,aAAE,EAAyByF,UAAKC,EAAWnG,MACxD4B,gBAAe,OAAErB,QAAF,IAAEA,GAAF,UAAEA,EAAUqB,uBAAZ,aAAE,EAA2BsE,UAAKC,EAAWnG,MAC5DU,kBAAiB,OAAEH,QAAF,IAAEA,GAAF,UAAEA,EAAUG,yBAAZ,aAAE,EAA6BwF,UAAKC,EAAWnG,MAChEoG,eAAc,OAAE7F,QAAF,IAAEA,OAAF,EAAEA,EAAU6F,eAC1BC,aAAY,OAAE9F,QAAF,IAAEA,OAAF,EAAEA,EAAU8F,aACxBC,eAAc,OAAE/F,QAAF,IAAEA,OAAF,EAAEA,EAAU+F,eAC1BC,iBAAgB,OAAEhG,QAAF,IAAEA,OAAF,EAAEA,EAAUgG,qB,mBAYlC,WAAS,IAAD,gBACUvG,KAAKW,QADf,IACN,2BAA6B,SACvB+C,SAFA,mC,eHjWL1E,O,qBAAAA,I,eAAAA,I,iBAAAA,I,mBAAAA,I,2CAAAA,I,wCAAAA,M,KASUA,QIHR,SAASwH,IACd,IAAI/D,EAAQ,IAAIgE,IAAMC,WAOtB,OALAjE,EAAMkE,QAINlE,EAAMmE,QAAQC,KAAO,aACdpE,ECbF,ICQKqE,EASAC,EDjBCC,EAAeR,IAGfS,EAAU,kE,SEqERC,E,kDA3CX,WAAYvH,GAAkB,IAAD,8BACzB,cAAMA,IACDC,MAAQ,GAEb,EAAKD,MAAM8F,IAAI3F,WAAa,kBAAM,EAAKC,SAAS,KAJvB,E,0CAM7B,WAAU,IAAD,MACDyE,EAAOxE,KAAKL,MAAM8F,IAAIxF,SAAUuE,KACpCxE,KAAKL,MAAM8F,IAAIxF,SAAUuE,KAAO,GAEhC,IAAI1C,EAAI9B,KAAKL,MAAM8F,IAAIxF,SAAUqE,YAAYC,aAAa,KAC1DvE,KAAKL,MAAM8F,IAAIxF,SAAUuE,KAAOA,EAChC,IAAI2C,EAAiB,CACjBrF,EAAGA,GAGHd,EAAa,CACb,QAGJ,UAAIhB,KAAKL,MAAM8F,IAAIxF,gBAAnB,aAAI,EAAyBiB,WACzBF,EAAWG,KAAK,YAGpB,IAAKiG,EAAL,YAAiBpH,KAAKL,MAAM8F,IAAI2B,OAAhC,MAGA,OACI,cAACC,EAAA,EAAD,CAASC,MAAK,iBAAYtH,KAAKL,MAAM8F,IAAIlC,OAAzC,SACI,oBAA6BnC,UAAWJ,EAAWV,KAAK,KACrDmB,YAAW,UAAEzB,KAAKL,MAAMY,gBAAb,aAAE,EAAqB6F,eAClC1E,UAAS,UAAE1B,KAAKL,MAAMY,gBAAb,aAAE,EAAqB8F,aAChCxE,cAAe,kBAAM0F,QAAQC,IAAI,eAHpC,UAKI,wBAAQpG,UAAU,SAASqG,GAAIL,EAAOjH,EAAGuH,GAAIN,EAAOhH,EAAGuH,EAAG,IAC1D,oCAAUR,IACTnH,KAAKL,MAAM8F,IAAIlC,MAAQ,GAAK,kCAAMnC,UAAU,QAAW+F,MAPpDnH,KAAKL,MAAM8F,IAAInE,Y,GA9BrBY,IAAMxC,WCuCTkI,E,WA7Cb,WAAYxF,GAAkB,IAAD,+BAN7ByF,OAM6B,OAJ7B1H,OAI6B,OAF7B2H,OAE6B,EAC3B9H,KAAK6H,EAAL,UAASzF,EAAOyF,SAAhB,QAAqB,EACrB7H,KAAKG,EAAL,UAASiC,EAAOjC,SAAhB,QAAqB,EACrBH,KAAK8H,EAAL,UAAS1F,EAAO0F,SAAhB,QAAqB,E,sCAGvB,SAAGC,GACD,OACI/H,KAAK6H,IAAME,EAAMF,GACjB7H,KAAKG,IAAM4H,EAAM5H,GACjBH,KAAK8H,IAAMC,EAAMD,I,gBAIvB,SAAGC,GACD,OACI/H,KAAK6H,IAAME,EAAMF,GACjB7H,KAAKG,IAAM4H,EAAM5H,GACjBH,KAAK8H,IAAMC,EAAMD,I,qBAavB,SAAQpD,GAEN,IAAIsD,GAAQ,GAAKtD,GAAW,EAI5B,OAAO,IAAIkD,EAAW,CACpBC,GAFO7H,KAAK6H,GAAK7H,KAAKG,GAAKH,KAAK8H,EAAIE,EAGpC7H,EAAGH,KAAKG,EACR2H,EAAG9H,KAAK8H,Q,KC2BCG,E,kDA3Eb,WAAYtI,GAAgB,IAAD,8BACzB,cAAMA,IACDC,MAAQ,GAEb,EAAKD,MAAMkG,WAAW/F,WAAa,kBAAM,EAAKC,SAAS,KAJ9B,E,0CAO3B,WAEE,MAAqBC,KAAKL,MAAMkG,WAA3BqC,EAAL,EAAKA,OAAQC,EAAb,EAAaA,KAEb,cAAsBD,EAAOd,OAA7B,GAAKgB,EAAL,KAAcC,EAAd,KACA,cAAsBF,EAAKf,OAA3B,GAAKkB,EAAL,KAAcC,EAAd,KAEAH,EAAUF,EAAO3G,UAAU6G,GAC3BE,EAAUH,EAAK5G,UAAU+G,GAEzB,IAwBIE,EAxBAC,EAAOC,KAAKC,IAAIP,EAAQQ,YAAYN,GAAU,IAE9CO,EAAKT,EAAQU,IAAIT,EAAKU,SAASN,IAC/BO,EAAKV,EAAQQ,IAAIP,EAAKQ,SAASN,IAEnC,EAAqBL,EAAba,EAAR,EAAK9I,EAAU+I,EAAf,EAAY9I,EACZ,EAAqBkI,EAAba,EAAR,EAAKhJ,EAAUiJ,EAAf,EAAYhJ,EAIJiJ,EAAeR,EAAlB1I,EAAWmJ,EAAOT,EAAVzI,EACLmJ,EAAeP,EAAlB7I,EAAWqJ,EAAOR,EAAV5I,EAMTqJ,EAAM,YAAQR,EAJV,EAIE,YAAkBC,EAAlB,cAJF,EAIE,YAJF,EAIE,oBAA4CD,EAJ9C,EAIE,YAAsDC,EAAtD,KACNQ,EAAM,YALF,EAKE,YALF,EAKE,oBAA0BT,EAL5B,EAKE,YAAoCC,EAApC,KACNS,EAAM,YAAQR,EANV,EAME,YAAkBC,EAAlB,cANF,EAME,YANF,EAME,oBAA4CD,EAN9C,EAME,YAAsDC,EAAtD,KACNQ,EAAM,YAPF,EAOE,YAPF,EAOE,oBAA0BT,EAP5B,EAOE,YAAoCC,EAApC,KAENtH,EAAC,UAAM2H,EAAN,YAAgBC,EAAhB,cAA4BT,EAA5B,YAAkCC,EAAlC,cAA0CG,EAA1C,YAAiDC,EAAjD,YAAwDC,EAAxD,YAA+DC,EAA/D,YAAsEL,EAAtE,YAA4EC,EAA5E,YAAkFO,EAAlF,YAA4FC,GAG7FhK,EAAQI,KAAKL,MAAMkG,WAAWqC,OAAOtI,MAoBzC,OAlBE4I,EADE5I,EAAMO,GAECP,EAAMkI,EADH,QAGHlI,EAAMiI,EACH,KAEA,MAaV,oBAAGzG,UAAU,aAAb,UACE,sBAAMA,UAAU,mBAAmBU,EAAGA,IACtC,sBAAM+H,SAAS,UACXzI,UAAS,2BAAsBoH,GAAa1G,EAAGA,IACjD9B,KAAKL,MAAMkG,WAAWqC,OAAO3E,MAAQ,GACrC,sBAAMsG,SAAS,UAAUzI,UAAU,uBAAuBU,EAAGA,W,GArEhDI,IAAMxC,WCyChBoK,E,WA3Bb,WAAY1H,GAAkB,IAAD,6BAV7Bd,UAU6B,OAT7B4G,YAS6B,OAR7BC,UAQ6B,OAP7B4B,YAO6B,OAN7BrH,WAM6B,OAF7B5C,gBAE6B,EAC3BE,KAAKsB,KAAL,UAAYc,EAAOd,YAAnB,QAA2BgC,cAC3BtD,KAAKkI,OAAS9F,EAAO8F,OACrBlI,KAAKmI,KAAO/F,EAAO+F,KACnBnI,KAAK+J,OAAL,UAAc3H,EAAO2H,cAArB,SACA/J,KAAK0C,MAAQN,EAAOM,M,0CAGtB,WAAU,IAAD,EACP1C,KAAKkI,OAAOxC,YAAYsE,OAAOhK,KAAKsB,MACpCtB,KAAKmI,KAAKzC,YAAYsE,OAAOhK,KAAKsB,MAClC,UAAAtB,KAAK0C,aAAL,SAAYuH,iBAAiBjK,KAAKsB,Q,oBAGpC,WACE,OACI,cAAC,EAAD,CAA4BuE,WAAY7F,MAAvBA,KAAKsB,Q,oBAM5B,WACEtB,KAAKF,YAAcE,KAAKF,iB,eJ1ChBgH,O,qBAAAA,I,WAAAA,I,eAAAA,I,eAAAA,I,kBAAAA,M,cASAC,O,qBAAAA,I,iBAAAA,I,oBAAAA,M,SKlBPmD,ELiVUC,E,WAlRb,WAAY/H,GAAkB,IAAD,iCAjBrBgI,YAiBqB,OAhBrBC,sBAgBqB,OAfpB/I,UAeoB,OAd7BoB,WAc6B,OAb7Ba,WAa6B,OAZ7BtD,cAY6B,OAX7BqK,SAW6B,OAV7BC,iBAU6B,OAT7BC,aAS6B,OAR7B5K,WAQ6B,OAP7B6K,WAO6B,OAN7B/E,YAAwE,IAAIgF,IAM/C,KAF7B5K,gBAE6B,EAC3BE,KAAKsB,KAAOgC,cACZtD,KAAKoK,OAAShI,EAAOgI,OACrBpK,KAAKuD,MAAL,UAAanB,EAAOmB,aAApB,QAA6B,EAC7BvD,KAAKuK,YAAL,UAAmBnI,EAAOmI,mBAA1B,QAAyCzD,EAAe6D,KACxD3K,KAAKwK,QAAUpI,EAAOoI,QACtBxK,KAAKsK,IAAL,UAAWlI,EAAOkI,WAAlB,SACAtK,KAAKJ,MAAQ,IAAIgI,EAAW,IAC5B5H,KAAK0C,MAAQN,EAAOM,MACpB1C,KAAKyK,MAAQrI,EAAOqI,MAEpB,UAAAzK,KAAK0C,aAAL,SAAYkI,OAAO5K,M,iDAIrB,SAAcJ,GAEZ,OADAI,KAAKJ,MAAQA,EACLI,KAAKwK,SACX,KAAKzD,EAAQ8D,MACX7K,KAAKoK,OAAOU,UACZ,MACF,KAAK/D,EAAQgE,OACX/K,KAAKgL,aACL,MACF,QACE,MAAM,IAAIC,S,wBAKhB,WAAoC,IAAzBC,EAAwB,wDACjC,GAAIlL,KAAKwK,UAAYzD,EAAQgE,OAC3B,MAAM,IAAIE,MAFqB,oBAKVjL,KAAK0F,YAAYC,UALP,IAKjC,2BAAkD,CAAC,IAA1CE,EAAyC,QAChDA,EAAWR,SACX,IAAI8F,EAAWtF,EAAWsC,MAEtB+C,GAASlL,KAAKJ,MAAMwL,GAAGD,EAASvL,SAClCuL,EAASE,cAAcrL,KAAKJ,OAG9BuL,EAASf,OAAOU,WAbe,iC,wBAkBnC,WACE9K,KAAK0F,YAAYE,SAAQ,SAAC0F,GAAD,OAAOA,EAAEvH,YAClC/D,KAAK0F,YAAY6F,U,wBAInB,SAAWxD,GACT,GAAI/H,KAAKuD,QAAUwE,EAAMxE,MACvB,OAAO,EAGT,OAAQvD,KAAKwK,SACX,KAAKzD,EAAQ8D,MACX,OAAO9C,EAAMyC,UAAYzD,EAAQgE,OACnC,KAAKhE,EAAQgE,OACX,OAAOhD,EAAMyC,UAAYzD,EAAQ8D,MAGrC,OAAO,I,uBAIT,SAAU9C,GACR,IAAK/H,KAAKwL,WAAWzD,GACnB,OAAO,KAGT,GAAI/H,KAAKwK,UAAYzD,EAAQ8D,MAAO,CAClC,GAAI7K,KAAKyL,cAAc1D,GACrB,OAAO,KAEP/H,KAAK0L,aAEP,IAAI7F,EAAa,IAAIiE,EAAgB,CAAC5B,OAAQH,EAAOI,KAAMnI,KAAM0C,MAAO1C,KAAK0C,QAI7E,OAHA1C,KAAK0F,YAAYiG,IAAI9F,EAAWvE,KAAMuE,GACtCkC,EAAMrC,YAAYiG,IAAI9F,EAAWvE,KAAMuE,GACvC7F,KAAKqL,cAActD,EAAMnI,OAClBiG,EAEP,OAAOkC,EAAM6D,UAAU5L,Q,2BAK3B,SAAc+H,GACZ,OAAO/H,KAAK0F,YAAYmG,IAAI9D,EAAMzG,Q,oBAGpC,WAAU,IAAD,MACPtB,KAAK0L,aACL,UAAA1L,KAAKC,gBAAL,SAAe8D,SACf,UAAO/D,KAAKC,gBAAZ,cAAO,EAAeuE,KAAKC,MAC3B,UAAAzE,KAAK0C,aAAL,SAAYoJ,UAAU9L,KAAKsB,Q,yBAG7B,SAAYU,GACV,GAAKhC,KAAKyK,MAAV,CAIA,IAAIsB,EACJ,OAAQ/L,KAAKuK,aACX,KAAKzD,EAAekF,GAClBD,EAAY,MACZ,MACF,KAAKjF,EAAemF,KAClBF,EAAY,SACZ,MACF,KAAKjF,EAAe6D,KAClBoB,EAAY,OACZ,MACF,KAAKjF,EAAeoF,MAClBH,EAAY,QACZ,MACF,QACEA,EAAY,GAGhB,MAAwB/L,KAAKyK,MAAM0B,MAAM,MAAzC,mBAAKC,EAAL,KAAWC,EAAX,KACA,OACI,uBAAcjL,UAAW2K,EAAW5L,EAAGH,KAAKsM,IAAInM,EAAGC,EAAGJ,KAAKsM,IAAIlM,EAA/D,UACGgM,EACAC,GAAa,gCAAQA,MAFbrK,M,oBAOjB,SAAOzB,GACL,OACI,cAAC,EAAD,eACSP,KAAKiG,gBAAgB1F,IADpBP,KAAKsB,Q,6BAMrB,SAAgBf,GAAwC,IAAD,QACrD,MAAO,CACLkF,IAAKzF,KACLwC,KAAMxC,KAAKwK,QACXjK,SAAU,CACR8F,aAAY,OAAE9F,QAAF,IAAEA,GAAF,UAAEA,EAAU8F,oBAAZ,aAAE,EAAwBH,UAAKC,EAAWnG,MACtDoG,eAAc,OAAE7F,QAAF,IAAEA,GAAF,UAAEA,EAAU6F,sBAAZ,aAAE,EAA0BF,UAAKC,EAAWnG,MAC1DsG,eAAc,OAAE/F,QAAF,IAAEA,GAAF,UAAEA,EAAU+F,sBAAZ,aAAE,EAA0BJ,UAAKC,EAAWnG,MAC1DuG,iBAAgB,OAAEhG,QAAF,IAAEA,GAAF,UAAEA,EAAUgG,wBAAZ,aAAE,EAA4BL,UAAKC,EAAWnG,U,4BAMpE,SAAesM,GACVtM,KAAKC,UACND,KAAKC,SAAS8D,SAEhB,IACI0B,EADJ,EAAkCzF,KAAKoK,OAAO3H,MAAzC8J,EAAL,EAAKA,aAAcC,EAAnB,EAAmBA,KAAM1I,EAAzB,EAAyBA,MASzB,QANE2B,EADEzF,KAAKsK,IACD,IAAIiC,EDzNYE,wHC2NhB,IAAID,ED7NQ,+CC+NhBvI,MAAQ,IAAIH,EAAM,EAAG,GAEjB9D,KAAKuK,aACX,KAAKzD,EAAekF,GAClBvG,EAAIiH,QAAQ,IACZ1M,KAAKqK,iBAAmB,IAAIvG,EAAM,GAAI,IACtC,MACF,KAAKgD,EAAemF,KAClBxG,EAAIiH,OAAO,IACX1M,KAAKqK,iBAAmB,IAAIvG,EAAM,EAAG,IACrC,MACF,KAAKgD,EAAe6D,KAClBlF,EAAIiH,OAAO,KACX1M,KAAKqK,iBAAmB,IAAIvG,GAAO,GAAI,GACvC,MACF,KAAKgD,EAAeoF,MAClBlM,KAAKqK,iBAAmB,IAAIvG,EAAM,GAAI,GACtC,MACF,QACE,MAAM,IAAImH,MAAM,2BAGpBxF,EAAIF,UAAU+G,GACdtM,KAAKC,SAAWwF,EAAIkH,SAAS3M,KAAKoK,OAAOnJ,MACzCwE,EAAI1B,SACJ/D,KAAKC,SAASuE,KAAKhC,KAAO,MAC1BxC,KAAKC,SAASuE,KAAKoI,QAAU5M,O,oBAI/B,WACEA,KAAKF,YAAcE,KAAKF,e,uBAI1B,SAAUe,GACR,OAAOb,KAAKoK,OAAOnK,SAAS8E,OAAOxD,UAAUV,K,oBAG/C,WACE,OAAOb,KAAKoK,OAAOnK,SAASI,W,eAG9B,WACE,OAAOL,KAAKC,SAAUC,W,oBAGxB,WAAyB,IAAD,IACtB,2BAAOF,KAAKC,gBAAZ,aAAO,EAAeiB,gBAAtB,U,IAGF,SAAaA,GACPlB,KAAKC,UAAYD,KAAKC,SAASiB,WAAaA,IAC9ClB,KAAKC,SAASiB,SAAWA,EACzBlB,KAAKqF,Y,kBAST,WACE,MAAO,CACLrF,KAAKsM,IAAIxD,IAAI9I,KAAKqK,kBAClBrK,KAAKqK,iBAAkBqC,OAAO1M,KAAKK,SAAU,IAAIL,KAAKoK,OAAO3H,MAAMqB,MAAM,EAAG,IAAI+I,OAAO,O,sBAG3F,SAAS/H,GACP,IAAI7D,EAAOjB,KAAKC,SACZ8E,EAAS9D,EAAKmJ,OAAOrF,OACrBC,EAAUD,EAAOE,WACrBH,EAAOvD,UAAUyD,GACjB,IAAIE,EAAajE,EAAKkE,WAAWL,IAAWA,EAAOM,SAASnE,EAAKf,WAAae,EAAKmE,SAASN,EAAO5E,UAEnG,OADA4E,EAAOvD,UAAUwD,GACVG,I,qBAQT,SAAQR,GAA2B,IAAD,EAEhC,OAAQ,IADRA,EAAO,UAAGA,SAAH,QAAc1E,KAAKuD,QACF,I,mBAI1B,WAEMvD,KAAKwK,UAAYzD,EAAQ8D,OAAmC,IAA1B7K,KAAK0F,YAAYoH,OAInD9M,KAAKwK,UAAYzD,EAAQ8D,OAC3B7K,KAAKqL,cAAc,IAAIzD,EAAW,CAACE,EAAG9H,KAAK+M,aAC3C/M,KAAKoK,OAAOU,YAEZ9K,KAAKqL,cAAc,IAAIzD,EAAW,CAACzH,EAAGH,KAAK+M,aAC3C/M,KAAKgL,YAAW,S,eK5UjBd,O,qBAAAA,I,aAAAA,I,eAAAA,I,WAAAA,I,aAAAA,I,aAAAA,I,eAAAA,I,aAAAA,I,cAAAA,M,KAYUA,I,EAAAA,KCiBf,SAAS8C,GAAMxK,GACb,OAAQA,GACN,KAAK0H,GAAS+C,KACd,KAAK/C,GAASgD,IACd,KAAKhD,GAASiD,KACd,KAAKjD,GAASkD,IACZ,OAAO,EACT,KAAKlD,GAASmD,IACd,KAAKnD,GAASoD,GACd,KAAKpD,GAASqD,IACd,KAAKrD,GAASsD,IACZ,OAAO,EACT,QACE,MAAM,IAAIvC,MAAJ,gCAAmCzI,EAAnC,OAIZ,SAASiL,GAAQjL,GACf,OAAQA,GACN,KAAK0H,GAASmD,IACd,KAAKnD,GAAS+C,KACd,KAAK/C,GAASoD,GACd,KAAKpD,GAASgD,IACd,KAAKhD,GAASqD,IACd,KAAKrD,GAASiD,KACZ,OAAO,EACT,KAAKjD,GAASsD,IACd,KAAKtD,GAASkD,IACZ,OAAO,EACT,QACE,MAAM,IAAInC,MAAJ,gCAAmCzI,EAAnC,OAIZ,SAASkL,GAAQlL,GACf,OAAQA,GACN,KAAK0H,GAASmD,IACd,KAAKnD,GAAS+C,KACd,KAAK/C,GAASoD,GACd,KAAKpD,GAASgD,IACd,KAAKhD,GAASqD,IACd,KAAKrD,GAASiD,KACZ,OAAO,EACT,KAAKjD,GAASsD,IACd,KAAKtD,GAASkD,IACZ,OAAO,EACT,QACE,MAAM,IAAInC,MAAJ,gCAAmCzI,EAAnC,O,IAONmL,G,kDAeJ,WAAYvL,GAAkB,IAAD,8BAC3B,yCACKA,GADL,IAEEI,KAAMxD,EAAS4O,KACfpK,WAAYkF,KAAKC,IAAI,EAAG+E,GAAQtL,EAAOf,UACvCuB,iBAAiB,EACjBC,qBAAsB6K,GAAQtL,EAAOf,SAAW,EAChDyB,cAAe2K,GAAQrL,EAAOf,SAC9B0B,cAAe2K,GAAQtL,EAAOf,aAVjBwM,YAEY,EAU3B,EAAKA,OAASF,EAAUG,QAAQ,EAAKzM,SAAS6E,KAAhC,gBAVa,E,yCAc7B,WACE,IADkB,EACd6H,EAAQ/N,KAAK+M,UACbiB,EAAU,EAIVC,EAAS,EANK,cAQFjO,KAAKoD,WARH,IAQlB,2BAAgC,CAAC,IAAxBqC,EAAuB,QAE5BwI,KAAYxI,EAAI7F,MAAMiI,EAAIpC,EAAI7F,MAAMO,EAAIsF,EAAI7F,MAAMkI,GAClDiG,GAAStI,EAAI7F,MAAMiI,EACnBmG,GAAWvI,EAAI7F,MAAMO,EAErB6N,GAAWvI,EAAI7F,MAAMkI,GAdP,8BAqBlB,OAAO,IAAIF,EAAW,CACpBC,EAAGkG,EACH5N,EAJF6N,IAAYC,EAKVnG,EArBmB,M,oBAyBvB,WAEE,OADY9H,KAAKkO,QACJC,QAAQnO,KAAKuD,S,kBAG5B,WACE,IADgB,EACZwK,EAAQ,EACRC,EAAU,EAFE,cAKAhO,KAAKoD,WALL,IAKhB,2BAAgC,CAAC,IAAxBqC,EAAuB,QAC9BsI,GAAStI,EAAI7F,MAAMiI,EACnBmG,GAAWvI,EAAI7F,MAAMO,EAErB6N,GAAWvI,EAAI7F,MAAMkI,GATP,8BAiBhB,OAAO,IAAIF,EAAW,CACpBC,EAAGkG,EACH5N,EAJF6N,IAAYD,EAKVjG,EAjBmB,M,mBAqBvB,WAEE,OADY9H,KAAKoO,OACJD,QAAQnO,KAAKuD,S,mBAG5B,WACE,IADkB,EACdwK,EAAQ,EACRC,EAAU,EAFI,cAKFhO,KAAKoD,WALH,IAKlB,2BAAgC,CAAC,IAAxBqC,EAAuB,QAC9BsI,GAAStI,EAAI7F,MAAMiI,EACnBmG,GAAWvI,EAAI7F,MAAMO,EAErB6N,GAAWvI,EAAI7F,MAAMkI,GATL,8BAclB,OAAO,IAAIF,EAAW,CACpBC,EAAGkG,GAASC,EACZ7N,EAAG6N,EACHlG,EAdmB,M,oBAkBvB,WAEE,OADY9H,KAAKqO,QACJF,QAAQnO,KAAKuD,S,mBAG5B,WACE,IAAK4H,EAAL,YAAkBnL,KAAKoD,UAAvB,MACI2K,EAAQ5C,EAASvL,MAAMiI,EACvBmG,EAAU7C,EAASvL,MAAMO,EAAIgL,EAASvL,MAAMkI,EAGhD,OAAO,IAAIF,EAAW,CACpBC,EAAGkG,EACH5N,EAAG6N,EACHlG,EALmB,M,mBASvB,WACE,IAAKqD,EAAL,YAAkBnL,KAAKoD,UAAvB,MACI4K,EAAU7C,EAASvL,MAAMO,EAAIgL,EAASvL,MAAMkI,EAC5CiG,GAAS5C,EAASvL,MAAMiI,EAAI7H,KAAK+M,WAAaiB,EAGlD,OAAO,IAAIpG,EAAW,CACpBC,EAAGkG,EACH5N,EAAG6N,EACHlG,EALmB,M,qBASvB,WACE,GAAK9H,KAAK6N,OAAV,CAGA,IAAIS,EAAatO,KAAK6N,SACtB7N,KAAK8F,UAAUwI,EAAYtO,KAAKqD,WAAW,O,uBAI7C,WAEE,OAAO,IAAIkJ,EADUvM,KAAKyC,MAArB8J,cAnOT,SAA0B/J,GACxB,OAAQA,GACN,KAAK0H,GAASmD,IACd,KAAKnD,GAAS+C,KACZ,MPVkB,qDOWpB,KAAK/C,GAASoD,GACd,KAAKpD,GAASgD,IACZ,OAAOqB,EACT,KAAKrE,GAASqD,IACd,KAAKrD,GAASiD,KACZ,MPbkBlG,oGOcpB,KAAKiD,GAASsD,IACd,KAAKtD,GAASkD,IACZ,MPfkB,+BOgBpB,QACE,MAAM,IAAInC,MAAM,0BAqNMuD,CAAiBxO,KAAKqB,Y,4BAGhD,YAAuE,IAAvDmC,EAAsD,EAAtDA,WAAYD,EAA0C,EAA1CA,MAEtBH,EAAYpD,KAAKoD,UAAUqL,MAAM,EAAGjL,GAC7BxD,KAAKoD,UAAUqL,MAAMjL,GAC3BoC,SAAQ,SAAA/E,GAAC,OAAIA,EAAEkD,YAEpB,IAAK,IAAI/B,EAAI0G,KAAKgG,IAAI1O,KAAKwD,WAAY,GAAIxB,EAAIwB,IAAcxB,EAC3DoB,EAAUjC,KAAK,IAAIgJ,EAAS,CAC1BC,OAAQpK,KACRwK,QAASzD,EAAQ8D,MACjBN,YAAazD,EAAe6D,KAC5BjI,MAAO1C,KAAK0C,MACZa,MAAOA,KAIPA,IAAUvD,KAAKuD,OACjBH,EAAUwC,SAAQ,SAAAH,GAChBA,EAAIiG,aACJjG,EAAIlC,MAAQA,KAchB,IAVA,IAAIoL,EACe,IAAfnL,EAAmB,GACA,IAAfA,EAAmB,GAAK,EACL,IAAfA,EAAmB,EACf,EACZoL,EACe,IAAfpL,EAAmB,GAAK,EACL,IAAfA,EAAmB,GACf,GAAK,EAERxB,EAAI,EAAGA,EAAIwB,IAAcxB,EAChCoB,EAAUpB,GAAGyB,eAAe,IAAIgD,IAAM3C,MAAM,EAAG6K,EAAS3M,EAAI4M,IAK9D,OAAOxL,I,6BAGT,YAA4D,IAA3CG,EAA0C,EAA1CA,MACf,GAAIvD,KAAKqD,WAAWwL,OAAS,EAI3B,OAHItL,IAAUvD,KAAKuD,OACjBvD,KAAKqD,WAAWuC,SAAQ,SAAAH,GAAG,OAAIA,EAAIlC,MAAQA,KAEtCvD,KAAKqD,WAEd,IAAIoC,EAAM,IAAI0E,EAAS,CACrBC,OAAQpK,KACRwK,QAASzD,EAAQgE,OACjBR,YAAazD,EAAeoF,MAC5B5B,IAAK0C,GAAMhN,KAAKqB,SAChBqB,MAAO1C,KAAK0C,MACZa,MAAOA,IAIT,OAFAkC,EAAIhC,eAAe,IAAIgD,IAAM3C,MAAM,GAAI,KAEhC,CAAC2B,O,GAxNYtD,GAAlBwL,GACGG,S,mBACJ5D,GAASmD,IAAMM,GAAUmB,UAAUZ,O,cACnChE,GAAS+C,KAAOU,GAAUmB,UAAUC,Q,cACpC7E,GAASoD,GAAKK,GAAUmB,UAAUV,M,cAClClE,GAASgD,IAAMS,GAAUmB,UAAUE,O,cACnC9E,GAASqD,IAAMI,GAAUmB,UAAUT,O,cACnCnE,GAASiD,KAAOQ,GAAUmB,UAAUG,Q,cACpC/E,GAASsD,IAAMG,GAAUmB,UAAUI,O,cACnChF,GAASkD,IAAMO,GAAUmB,UAAUK,O,cACnCjF,GAASkF,SAAU,WAAO,MAAM,IAAInE,MAAM,uB,GAkNhC0C,U,qBCzPA0B,G,kDAzCb,WAAYjN,GAAkB,IAAD,8BAC3B,yCACKA,GADL,IAEEI,KAAMxD,EAAS+L,OACf5H,UAAU,MALdmM,IAAc,EACe,E,2CAQ7B,WACEtP,KAAKsP,GAAmC,IAA9BtP,KAAKoD,UAAU,GAAGxD,MAAMiI,EAClC7H,KAAKqF,W,yBAIP,WAGE,IAAIkK,EAAUvP,KAAKsP,GAAK,OAAS,OACjC,OACI,wBAAQlO,UAAW,YAAaqG,GAAI,GAAIC,GAAI,GAAIC,EAAG,GAAI4H,QAASA,M,uBAItE,WACE,OAAO,IAAIvP,KAAKyC,MAAM+J,KRnCD,sU,4BQsCvB,WACE,IAAKgD,EAAUxP,KAAKiB,KAAKwO,OAApBD,OACD/J,EAAM,IAAI0E,EAAS,CACrBC,OAAQpK,KACRwK,QAASzD,EAAQ8D,MACjBN,YAAazD,EAAemF,KAC5BvJ,MAAO1C,KAAK0C,QAId,OADA+C,EAAIhC,eAAe,IAAIgD,KAAM3C,MAAM,GAAI0L,IAChC,CAAC/J,O,GAvCOtD,GCFbuN,G,kDAGJ,WAAYtN,GAAkB,IAAD,sBAC3B,yCACKA,GADL,IAEEI,KAAMxD,EAAS6L,MACflI,MAAO,MAET,IAAKgN,EAAL,YAAe,EAAKtM,WAApB,MAEIuM,EAAiB,IAAI9F,EAAgB,CAAC5B,OAAQyH,EAAQxH,KAAMwH,IARrC,OAS3BA,EAAOjK,YAAYiG,IAAIgE,EAAOrO,KAAMsO,GATT,E,2CAY7B,WACE,IAAIC,EAAI7P,KAAKqD,WAAW,GAAGzD,MAAMuO,QAAQ,GACzCnO,KAAK8F,UAAU+J,K,uBAGjB,WACE,MAA0B7P,KAAKyC,MAA1B+J,EAAL,EAAKA,KAAM1I,EAAX,EAAWA,MAAOgM,EAAlB,EAAkBA,KAClB,OAAO,IAAItD,EAAKuD,UAAU,IAAIjM,EAAM,EAAG,GAAI,IAAIgM,EAAK,GAAI,O,6BAI1D,WACE,IAAIrK,EAAM,IAAI0E,EAAS,CACrBC,OAAQpK,KACRwK,QAASzD,EAAQgE,OACjBR,YAAazD,EAAeoF,MAC5BxJ,MAAO1C,KAAK0C,QAGd,OADA+C,EAAIhC,eAAe,IAAIzD,KAAKyC,MAAMqB,MAAM,GAAI,KACrC,CAAC2B,K,yBAGV,WACE,OACE,sBAAMrE,UAAU,aAAaU,EAAG4N,EAAMM,UAAWC,KAAK,W,mBAI1D,WACE,IAAKN,EAAL,YAAe3P,KAAKqD,WAApB,MACAsM,EAAOtE,cAAc,IAAIzD,EAAW,CAACC,EAAG,KACxC8H,EAAO3E,YAAW,GAClBhL,KAAK8K,c,GA/CW3I,GAAduN,GACGM,UAAoB,gDAkDdN,U,4BC2CAQ,G,kDA9FX,WAAY9N,GAAkB,kEAEnBA,GAFkB,IAGrBI,KAAMxD,EAAS6L,MACfjI,iBAAiB,EACjBO,UAAU,K,2CAKlB,c,uBAEA,YAAsD,IAA3CI,EAA0C,EAA1CA,MACP,EAA0BvD,KAAKyC,MAA1B+J,EAAL,EAAKA,KAAM1I,EAAX,EAAWA,MAAOgM,EAAlB,EAAkBA,KAClB,OAAO,IAAItD,EAAKuD,UAAU,IAAIjM,EAAM,EAAG,GAAI,IAAIgM,EAAK,GAAKvM,EAAO,O,6BAGpE,YAA4D,IAA3CA,EAA0C,EAA1CA,MACTkC,EAAM,IAAI0E,EAAS,CACnBC,OAAQpK,KACRwK,QAASzD,EAAQgE,OACjBR,YAAazD,EAAeoF,MAC5BxJ,MAAO1C,KAAK0C,MACZa,MAAOA,IAKX,OAFAkC,EAAIhC,eAAe,IAAIzD,KAAKyC,MAAMqB,MAAM,GAAKP,EAAO,KAE7C,CAACkC,K,yBAGZ,WAGI,IAFA,IAAKA,EAAL,YAAYzF,KAAKqD,WAAjB,MACI8M,EAAS,GACJnO,EAAI,EAAGA,EAAIhC,KAAKuD,MAAOvB,IAAK,CACjC,IAAIoO,EAAa,CAAC,UACdC,EAAc,IACb5K,EAAI7F,MAAMiI,GAAK7F,EAAK,IACrBoO,EAAWjP,KAAK,MAChBkP,EAAc,KAGlB,IAAIlQ,EAAI,GAAK,IAAMH,KAAKuD,MAAQvB,EAAI,GAIpCmO,EAAOhP,KACH,wBACQC,UAAWgP,EAAW9P,KAAK,KAC3BmH,GAAItH,EACJuH,GAPJ,GAQIC,EAAG,GACH2I,QAAStQ,KAAKuQ,YAAYrK,KAAKlG,KAAMgC,IALhC,EAAEA,IAOnBmO,EAAOhP,KACH,sBAAoBC,UAAU,SAASjB,EAAGA,EAAGC,EAZzC,GAYJ,SACKiQ,GADM,EAAErO,EAAI,IAKzB,OAAO,mCAAGmO,M,yBAId,SAAYnO,GACR,IAAKyD,EAAL,YAAYzF,KAAKqD,WAAjB,MACIwE,EAAKpC,EAAI7F,MAAMiI,EAAK,GAAK7F,EAC7ByD,EAAI4F,cAAc,IAAIzD,EAAW,CAC7BC,EAAGA,KAEP7H,KAAKqF,W,iBAGT,WACI,OAAO,sD,IAGX,SAAU9B,GACN,IAAKO,EAAS9D,KAAKyC,MAAdqB,MACLyD,QAAQC,IAAIjE,GACZ,IAAIiN,EAAOxQ,KAAKuD,MAAQA,EACxBvD,KAAKuF,UAAU,IAAIzB,EAAa,GAAP0M,EAAW,IACpC,+CAAcjN,EAAd,W,mBAIJ,WACI,IAAKoM,EAAL,YAAe3P,KAAKqD,WAApB,MACIwM,EAAIF,EAAO/P,MACf,gEACA+P,EAAOtE,cAAcwE,O,GA3FR1N,GC0HNsO,G,kDA1HX,WAAYrO,GAAkB,kEAEnBA,GAFkB,IAGrBI,KAAMxD,EAAS0R,mBACf/N,MAAO,K,2CAGf,WACI,GAAqB,IAAjB3C,KAAKqB,QAAe,CAGpB,IAAIsP,EAAI3Q,KAAKoD,UAAU,GAAGxD,MACtBgR,EAAI5Q,KAAKoD,UAAU,GAAGxD,MAC1B,GAAY,IAAR+Q,EAAExQ,GAAmB,IAARwQ,EAAE7I,GAAmB,IAAR8I,EAAEzQ,GAAmB,IAARyQ,EAAE9I,EAAS,CAElD,IAAI+I,EAAQF,EAAE9I,EAAI+I,EAAE/I,EAChBiJ,EAAQH,EAAE9I,EAAI+I,EAAE/I,EAEpB7H,KAAK8F,UAAU,IAAI8B,EAAW,CAACC,EAAGiJ,IAAO9Q,KAAKqD,WAAW,IACzDrD,KAAK8F,UAAU,IAAI8B,EAAW,CAACC,EAAGgJ,IAAQ7Q,KAAKqD,WAAW,SAE1DrD,KAAK8F,UAAU,IAAI8B,EAAW,CAACzH,EAAG,IAAKH,KAAKqD,WAAW,IACvDrD,KAAK8F,UAAU,IAAI8B,EAAW,CAACzH,EAAG,IAAKH,KAAKqD,WAAW,QAExD,CAUH,IAPA,IAAIsN,EAAI3Q,KAAKoD,UAAU,GAAGxD,MACtBgR,EAAI5Q,KAAKoD,UAAU,GAAGxD,MACtBmR,EAAM/Q,KAAKoD,UAAU,GAAGxD,MACxBkR,EAAMH,EAAE9I,EAAI+I,EAAE/I,EAAIkJ,EAAIlJ,EACtBgJ,EAAOC,GAAO9Q,KAAKuD,MACnByN,EAAQL,EAAExQ,EAAIyQ,EAAEzQ,EAAI4Q,EAAI5Q,EAAIwQ,EAAE7I,EAAI8I,EAAE9I,EAAIiJ,EAAIjJ,EAEvC9F,EAAI,EAAGA,EAAIhC,KAAKuD,MAAOvB,IAC5B,GAAKgP,GAAShP,EAAK,EAAG,CAElBgP,GAAS,GAAKhR,KAAK+M,QAAQ/K,EAAI,GAAKhC,KAAK+M,UACzC,MAIR+D,IAAQE,EAAQhR,KAAK+M,UAErB/M,KAAK8F,UAAU,IAAI8B,EAAW,CAACC,EAAGiJ,EAAK3Q,EAAG6Q,IAAShR,KAAKqD,WAAW,IAC/D2N,EACAhR,KAAK8F,UAAW,IAAI8B,EAAW,CAACzH,EAAG,IAAKH,KAAKqD,WAAW,IAExDrD,KAAK8F,UAAU,IAAI8B,EAAW,CAACC,EAAGgJ,IAAQ7Q,KAAKqD,WAAW,O,uBAKtE,WACI,MAA0BrD,KAAKyC,MAA1B+J,EAAL,EAAKA,KAAM1I,EAAX,EAAWA,MAAOgM,EAAlB,EAAkBA,KAClB,OAAO,IAAItD,EAAKuD,UAAU,IAAIjM,EAAM,EAAG,GAAI,IAAIgM,EAAK,GAAI,O,6BAI5D,YAA4D,IAA3CvM,EAA0C,EAA1CA,MACTuN,EAAM,IAAI3G,EAAS,CACnBC,OAAQpK,KACRwK,QAASzD,EAAQgE,OACjBR,YAAazD,EAAekF,GAC5BtJ,MAAO1C,KAAK0C,MACZa,MAAOA,EACPkH,MAAO,MAGPoG,EAAO,IAAI1G,EAAS,CACpBC,OAAQpK,KACRwK,QAASzD,EAAQgE,OACjBR,YAAazD,EAAe6D,KAC5BjI,MAAO1C,KAAK0C,MACZ+H,MAAO,WAMX,OAHAqG,EAAIrN,eAAe,IAAIzD,KAAKyC,MAAMqB,MAAM,GAAI,IAC5C+M,EAAKpN,eAAe,IAAIzD,KAAKyC,MAAMqB,MAAM,EAAG,KAErC,CAACgN,EAAKD,K,4BAGjB,YAA2D,IAA3CtN,EAA0C,EAA1CA,MACRoN,EAAI,IAAIxG,EAAS,CACjBC,OAAQpK,KACRwK,QAASzD,EAAQ8D,MACjBN,YAAazD,EAAemF,KAC5BvJ,MAAO1C,KAAK0C,MACZa,MAAOA,EACPkH,MAAO,MAEXkG,EAAElN,eAAe,IAAIzD,KAAKyC,MAAMqB,MAAM,GAAI,KAE1C,IAAI8M,EAAI,IAAIzG,EAAS,CACjBC,OAAQpK,KACRwK,QAASzD,EAAQ8D,MACjBN,YAAazD,EAAemF,KAC5BvJ,MAAO1C,KAAK0C,MACZa,MAAOA,EACPkH,MAAO,MAIX,GAFAmG,EAAEnN,eAAe,IAAIzD,KAAKyC,MAAMqB,MAAM,GAAI,KAErB,IAAjB9D,KAAKqB,QAEL,MAAO,CAACsP,EAAGC,GAGf,IAAIG,EAAM,IAAI5G,EAAS,CACnBC,OAAQpK,KACRwK,QAASzD,EAAQ8D,MACjBN,YAAazD,EAAeoF,MAC5BxJ,MAAO1C,KAAK0C,MACZ+H,MAAO,UAIX,OAFAsG,EAAItN,eAAe,IAAIzD,KAAKyC,MAAMqB,MAAM,GAAI,KAErC,CAAC6M,EAAGC,EAAGG,O,GAxHF5O,GC6CL8O,G,kDA1CX,WAAY7O,GAAmB,kEAEpBA,GAFmB,IAGtBI,KAAMxD,EAAS6L,S,2CAIvB,WACI7K,KAAKqD,WAAW,GAAGgI,cAAc,IAAIzD,EAAW,O,mBAGpD,c,uBAGA,WACI,MAA0B5H,KAAKyC,MAA1B+J,EAAL,EAAKA,KAAM1I,EAAX,EAAWA,MAAOgM,EAAlB,EAAkBA,KAClB,OAAO,IAAItD,EAAKuD,UAAU,IAAIjM,EAAM,EAAG,GAAI,IAAIgM,EAAK,GAAI,O,6BAG5D,WACI,IAAIrK,EAAM,IAAI0E,EAAS,CACnBC,OAAQpK,KACRwK,QAASzD,EAAQgE,OACjBR,YAAazD,EAAeoF,MAC5BxJ,MAAO1C,KAAK0C,QAGhB,OADA+C,EAAIhC,eAAe,IAAIzD,KAAKyC,MAAMqB,MAAM,GAAI,KACrC,CAAC2B,K,yBAGZ,WACI,OACK,sBAAMrE,UAAU,aACVU,EAAE,sE,GAlCAK,GCaf+O,G,WAOJ,WAAY9O,GAAqB,IAAD,2BANvBf,aAMuB,OALvBmB,UAKuB,OAJvBiI,WAIuB,OAFhC0G,eAEgC,EAC9BnR,KAAKwC,KAAOJ,EAAOI,KACnBxC,KAAKqB,QAAUe,EAAOf,QACtBrB,KAAKyK,MAAL,UAAarI,EAAOqI,aAApB,QAA6B,aAC7BzK,KAAKmR,UAAYnR,KAAKoR,O,wCAGxB,SAAK1O,GAAqC,IAAD,EACnCD,EAAK,iBAAGC,QAAH,IAAGA,OAAH,EAAGA,EAAOD,aAAV,QAAmBuE,EAC5B,OAAQhH,KAAKwC,MACX,KAAKxD,EAAS4O,KACZ,OAAO,IAAID,GAAU,CAACtM,QAASrB,KAAKqB,QAASoB,MAAOA,EAAOC,MAAOA,IACpE,KAAK1D,EAAS+L,OACZ,OAAO,IAAIsE,GAAK,CAAChO,QAAS,EAAGqB,MAAOA,EAAOD,MAAOA,IACpD,KAAKzD,EAAS6L,MACZ,OAAO7K,KAAKqR,UAAUrR,KAAKqB,QAASoB,EAAOC,GAC7C,KAAK1D,EAAS0R,mBACZ,OAAO1Q,KAAKsR,cAActR,KAAKqB,QAASoB,EAAOC,GAEjD,QACE,MAAM,IAAIuI,MAAM,4B,uBAItB,SAAU5J,EAAiBoB,EAAyBC,GAClD,OAAQrB,GACN,KAAK,EACH,OAAO,IAAIqO,GAAM,CAAChN,MAAOA,EAAOD,MAAOA,EAAOpB,QAAS,IACzD,KAAK,EACH,OAAO,IAAI6O,GAAO,CAAC7O,QAAS,EAAGqB,MAAOA,EAAOD,MAAOA,IACtD,KAAK,EACH,OAAO,IAAIwO,GAAO,CAAC5P,QAAS,EAAGqB,MAAOA,EAAOD,MAAOA,IACtD,QACE,MAAM,IAAIwI,MAAM,4B,2BAItB,SAAc5J,EAAiBoB,EAAyBC,GACtD,OAAQrB,GAEN,KAAK,EACL,KAAK,EACC,OAAO,IAAIoP,GAAM,CAACpP,QAASrB,KAAKqB,QAASoB,MAAOA,EAAOC,MAAOA,IACpE,QACE,MAAM,IAAIuI,MAAM,mC,KAnDlBiG,GAIG1M,U,EAoDM0M,UCmCAK,I,yDAvFb,WAAY5R,GAAgB,IAAD,8BACzB,cAAMA,IACDC,MAAQ,CACX4R,WAAW,GAHY,E,8CAO3B,SAAWC,GACT,IAAIN,EAAYM,EAAKN,UACjBO,EAAUP,EAAUrQ,SACnB2J,EAASgH,EAAThH,MACL,EAAiC0G,EAAUlR,SAASwP,OAA/CkC,EAAL,EAAKA,KAAMC,EAAX,EAAWA,IAAKrO,EAAhB,EAAgBA,MAAOsO,EAAvB,EAAuBA,OACvBF,GAAQ,EACRC,GAAO,EACPrO,GAAS,EACTsO,GAAU,EAEV,IAAIC,EAAKrH,EAAMsH,QAAQ,IAAK,KAC5B,OACI,eAACC,EAAA,EAAD,CACIC,UAAW,EACXC,QAAS,CAACC,KAAM,QAEhBC,WAAS,EACTC,YAAarS,KAAKsS,gBAAgBpM,KAAKlG,KAAM8R,EAAIL,GACjDc,UAAWvS,KAAKwS,cAActM,KAAKlG,MANvC,UAQE,qBAAKoB,UAAU,uBAAf,SACE,qBAAKA,UAAU,aAAa0Q,GAAIA,EAAIW,QAAO,UAAKd,EAAL,YAAaC,EAAb,YAAoBrO,EAApB,YAA6BsO,GAAUtO,MAAOA,EAAOsO,OAAQA,EAAxG,SACGH,MAGL,qBAAKtQ,UAAU,aAAf,SAA6BqJ,MAVtB0G,EAAU7P,Q,6BAezB,SAAgBwQ,EAAYL,EAAYiB,GACtCxB,GAAK1M,KAAOiN,EAEZ,IAAIkB,EAAOC,SAASC,eAAef,GAEnC,EAAaL,EAAKN,UAAUlR,SAASwP,OAAOqD,OAAvC3S,EAAL,EAAKA,EAAGC,EAAR,EAAQA,EAERsS,EAAEK,aAAaC,aAAaL,EAAMxS,EAAE,EAAGC,EAAE,GACzCsS,EAAEK,aAAaE,cAAgB,S,2BAIjC,WACE/B,GAAK1M,UAAO2B,I,oBAGd,WACE,OACI,qCACE,cAAC+M,EAAA,EAAD,CAAUC,OAAK,EAAf,SACE,cAACC,EAAA,EAAD,CAAQC,GAAI,CAAC9P,MAAO,OAAQ+P,aAAc,QAClCC,QAAS,YACTrB,QAAS,CAACsB,QAAS,gCACnBlD,QAAStQ,KAAKuQ,YAAYrK,KAAKlG,MAC/BwT,QACE,cAAC,IAAD,CAAiBpS,UAAW,qBACXqS,KAAMC,iBACNrT,SAAWL,KAAKJ,MAAM4R,eAAiBrL,EAAL,KAP7D,SASE,sBAAMwN,MAAO,CAACC,SAAU,GAAxB,SAA6B5T,KAAKL,MAAM8K,YAI5C,cAACoJ,EAAA,EAAD,CAAU3B,QAAS,CAAC4B,aAAc,mBAAoBC,IAAK/T,KAAKJ,MAAM4R,UAAWwC,QAAQ,OAAzF,SACGhU,KAAKL,MAAMsU,MAAMrT,IAAIZ,KAAKkU,WAAWhO,KAAKlG,SAE7C,cAACmU,EAAA,EAAD,S,yBAKR,WACEnU,KAAKD,UAAS,SAACH,GACb,MAAO,CACL4R,WAAY5R,EAAM4R,kB,GAlFAtP,IAAMxC,Y,WCf3B0U,GCyIUC,G,kDA/Gb,WAAY1U,GAAgB,IAAD,8BACzB,cAAMA,IACDC,MAAQ,CACX0U,MAAM,EACNC,WAAW,GAJY,E,kDAQ3B,WACE,IAAIC,EAAiB,CAAC,WACjBxU,KAAKJ,MAAM2U,WACdC,EAAerT,KAAK,aAEtB,IAAIH,EAAawT,EAAelU,KAAK,KACrC,OACI,cAACmU,EAAA,EAAD,CAAKrT,UAAWJ,EAAhB,SACE,cAACgR,EAAA,EAAD,CAAOE,QAAS,CAACC,KAAM,yB,6BAK/B,WACE,IAAIqC,EAAiB,CAAC,WAClB,QAAQE,cAAc1U,KAAKJ,MAAM2U,WAAa,KAChDC,EAAerT,KAAK,aAEtB,IAAIH,EAAawT,EAAelU,KAAK,KACrC,OACI,cAACmU,EAAA,EAAD,CAAKrT,UAAWJ,EAAhB,SACE,cAACgR,EAAA,EAAD,CAAOE,QAAS,CAACC,KAAM,mBAAoBkB,GAAI,CAACsB,cAAe,QAA/D,SACE,cAACC,EAAA,EAAD,CACIC,UAAW,cAACC,EAAA,EAAD,oBADf,SAGG,YAAI9U,KAAKL,MAAMsU,MAAMc,WAAWnU,KAAI,mCAAE6J,EAAF,KAASwJ,EAAT,YACnC,cAAC,GAAD,CAAyBxJ,MAAOA,EAAOwJ,MAAOA,GAA5BxJ,c,+BAQhC,WACE,IAAI+J,EAAiB,CAAC,WAClB,UAAUE,cAAc1U,KAAKJ,MAAM2U,WAAa,KAClDC,EAAerT,KAAK,aAEtB,IAAIH,EAAawT,EAAelU,KAAK,KACrC,OACE,cAACmU,EAAA,EAAD,CAAKrT,UAAWJ,EAAhB,SACE,cAACgR,EAAA,EAAD,CAAOE,QAAS,CAACC,KAAM,mBAAoBkB,GAAI,CAACsB,cAAe,QAA/D,4C,uBAON,SAAUlK,EAAeuK,GACvB,OACA,cAACC,EAAA,EAAD,yBAAKxK,MACH,cAACgK,EAAA,EAAD,CAAKpB,GAAI,CACP6B,YAAa,cACbC,gBAAiB,QACjB5T,UAAW,kBAHb,SAGiCkJ,IAC9BsD,MAAOtD,GAtFhB,SAAmBuK,GACjB,MAAO,CACLlD,GAAG,gBAAD,OAAkBkD,GACpB,gBAAgB,qBAAhB,OAAsCA,IAmFfI,CAAUJ,IALjC,IAMK3B,GAAI,CAACgC,SAAU,OAAQC,UAAW,SAClChF,QAAStQ,KAAKuV,eAAerP,KAAKlG,KAAMyK,Q,oBAI/C,WACE,OACI,qCACE,eAAC+K,EAAA,EAAD,CACIjL,YAAY,WACZgJ,QAAQ,aACRxF,MAAO/N,KAAKJ,MAAM2U,UAClBkB,SAAUzV,KAAK0V,gBAAgBxP,KAAKlG,MACpC,aAAW,gBACXqT,GAAI,CAAEsC,YAAa,EAAGC,YAAa,UAAWC,WAAY,EAAGR,SAAU,QAN3E,UAQGrV,KAAK8V,UAAU,UAAW,GAC3B,cAAC3B,EAAA,EAAD,IACCnU,KAAK8V,UAAU,QAAS,GACzB,cAAC3B,EAAA,EAAD,OAEF,cAACA,EAAA,EAAD,CAAS5J,YAAY,WAAW8I,GAAI,CAAC0C,OAAQ,YAC7C,sBAAKpC,MAAO,CAACzT,SAAU,WAAYyR,KAAM,OAAQpO,MAAO,OAAQsO,OAAQ,OAAQmE,SAAU,SAAUrB,cAAe,QAAnH,UACG3U,KAAKiW,iBACLjW,KAAKkW,oBACLlW,KAAKmW,0B,4BAMhB,SAAepI,EAAe2E,GAC4B,IAApD3E,EAAM2G,cAAc1U,KAAKJ,MAAM2U,WAAa,KAC9CvU,KAAKD,SAAS,CAACwU,WAAW,M,6BAI9B,SAAgB7B,EAAyB0D,GACvCpW,KAAKD,SAAS,CAACwU,UAAW6B,M,8BAG5B,SAAiB1D,GACf1S,KAAKD,SAAS,CAACuU,MAAM,Q,GA5GHpS,IAAMxC,W,mBCoBb2W,G,4JArDb,SAAOtO,GAAqB,IAAD,gBACPA,GADO,IACzB,2BAAyB,CAAC,IAAjBgG,EAAgB,QACvB/N,KAAK8I,IAAIiF,IAFc,iC,mBAM3B,SAAMhG,GACJ,IADmC,EAC/BuO,EAAS,IAAID,EADkB,cAEjBrW,MAFiB,IAEnC,2BAAwB,CAAC,IAAhB+N,EAAe,QACtBuI,EAAOxN,IAAIiF,IAHsB,kDAMjBhG,GANiB,IAMnC,2BAAyB,CAAC,IAAjBgG,EAAgB,QACvBuI,EAAOxN,IAAIiF,IAPsB,8BAUnC,OAAOuI,I,0BAGT,SAAavO,GACX,IAD0C,EACtCuO,EAAS,IAAID,EADyB,cAExBrW,MAFwB,IAE1C,2BAAwB,CAAC,IAAhB+N,EAAe,QAClBhG,EAAM8D,IAAIkC,IACZuI,EAAOxN,IAAIiF,IAJ2B,8BAQ1C,OAAOuI,I,iBAGT,SAAIvO,GACF,OAAO/H,KAAKuW,oBAAoBxO,K,iCAGlC,SAAoBA,GAClB,IADiD,EAC7CuO,EAAS,IAAID,EADgC,cAE/BrW,MAF+B,IAEjD,2BAAwB,CAAC,IAAhB+N,EAAe,QACjBhG,EAAM8D,IAAIkC,IACbuI,EAAOxN,IAAIiF,IAJkC,kDAQ/BhG,GAR+B,IAQjD,2BAAyB,CAAC,IAAjBgG,EAAgB,QAClB/N,KAAK6L,IAAIkC,IACZuI,EAAOxN,IAAIiF,IAVkC,8BAcjD,OAAOuI,M,gBAjDkBE,O,SFSxBpC,O,eAAAA,I,aAAAA,I,eAAAA,I,mBAAAA,I,iCAAAA,I,4BAAAA,Q,KAWL,IAUKqC,I,SAAAA,O,eAAAA,I,yBAAAA,I,cAAAA,Q,SAoYUC,G,iDAzXLC,Y,OACRC,e,OAEQC,iB,OACAC,qB,OACAC,OAAsB3C,GAAY4C,K,KAElCzW,SAAmD,IAAImK,I,KAEvDuM,mBAAoCR,GAAcO,K,KAClDE,eAAyD,IAAIb,G,KAC7Dc,iBAA2D,IAAId,G,KAGvEe,wB,gDAEA,SAAWC,EAAsBC,GAC/B,GAAItX,KAAKO,SAASsL,IAAIwL,GACpB,MAAM,IAAIpM,MAAJ,8CAAiDoM,IAGzDrX,KAAKO,SAASoL,IAAI0L,EAAMC,GACxBC,OAAOC,iBAAiBH,EAAMC,K,4BAGhC,WACEtX,KAAKO,SAASqF,SAAQ,SAAC0R,EAASG,GAC9BF,OAAOG,oBAAoBD,EAAKH,MAElCtX,KAAKO,SAASgL,U,mBAGhB,WACEvL,KAAK2X,iBACL3X,KAAK6W,iBAAc1Q,EACnBnG,KAAK+W,OAAS3C,GAAY4C,KAEtBhX,KAAK4W,YACP5W,KAAK4W,UAAU7S,SACf/D,KAAK4W,eAAYzQ,EACjBnG,KAAK2W,YAASxQ,GAGhBnG,KAAKiX,mBAAqBR,GAAcO,KACxChX,KAAKkX,eAAe3L,QACpBvL,KAAKmX,iBAAiB5L,U,kCAGxB,SAAqB7I,EAAmBgQ,GACtC,KAAIA,EAAEkF,OAAS,KAIflF,EAAEmF,iBACFnF,EAAEoF,kBAEE9X,KAAK+W,SAAW3C,GAAY4C,MAAhC,CAMA,GAFAhX,KAAK6W,YAAcnE,EAAEkF,OAjFL,IAmFZlF,EAAEkF,SAA2BlF,EAAEqF,OAAQ,CACzC/X,KAAKmX,iBAAiB5L,QAClBmH,EAAEsF,iBAAiB,UAAYhY,KAAKkX,eAAepK,KAAO,EAC5D9M,KAAK+W,OAAS3C,GAAY6D,cACjBvF,EAAEsF,iBAAiB,YAAchY,KAAKkX,eAAepK,KAAO,EACrE9M,KAAK+W,OAAS3C,GAAY8D,YAE1BlY,KAAK+W,OAAS3C,GAAY+D,OAC1BzV,EAAM0V,kBAGR,MAAuC1V,EAAMD,MAAtC+J,EAAP,EAAOA,KAAM1I,EAAb,EAAaA,MAAOiM,EAApB,EAAoBA,UAAWD,EAA/B,EAA+BA,KAC/B,EAAe9P,KAAKoX,mBAAoB1E,GAAjCvS,EAAP,EAAOA,EAAGC,EAAV,EAAUA,EACVJ,KAAK2W,OAAS,IAAI7S,EAAM3D,EAAGC,GAC3B,IAAIiY,EAAO,IAAItI,EAAU/P,KAAK2W,OAAQ,IAAI7G,EAAK,EAAG,IAClD9P,KAAK4W,UAAY,IAAIpK,EAAKuD,UAAUsI,GAIpCrY,KAAKsY,WAAW,YAAatY,KAAKuY,sBAAsBrS,KAAKlG,KAAM0C,IACnE1C,KAAKsY,WAAW,UAAWtY,KAAKwY,cAActS,KAAKlG,KAAM0C,KAtGzC,IAyGdgQ,EAAEkF,QAA0C,IAAblF,EAAEkF,QAAgBlF,EAAEqF,UACrD/X,KAAK+W,OAAS3C,GAAYqE,IAG1BzY,KAAKsY,WAAW,YAAatY,KAAK0Y,mBAAmBxS,KAAKlG,KAAM0C,IAChE1C,KAAKsY,WAAW,UAAWtY,KAAKwY,cAActS,KAAKlG,KAAM0C,Q,iCAI7D,SAAoBA,EACAiW,EACAjG,GAElB,GAAiB,IAAbA,EAAEkF,SAINlF,EAAEmF,iBACFnF,EAAEoF,kBAEE9X,KAAK+W,SAAW3C,GAAY4C,MAAhC,CAIAhX,KAAK6W,YAAcnE,EAAEkF,OACrB5X,KAAK8W,gBAAkB6B,EAEvB,IAAIzX,EAAWwB,EAAMkW,mBAEjBlG,EAAEsF,iBAAiB,WACjBW,EAAOzX,UACTyX,EAAOzX,UAAW,EAClBA,EAAS8I,OAAO2O,KAEhBA,EAAOzX,UAAW,EAClBA,EAAS4H,IAAI6P,IAENjG,EAAEsF,iBAAiB,UAKlB9W,EAAS2K,IAAI8M,GAJlBA,EAAOzX,WACVyX,EAAOzX,UAAW,EAClBA,EAAS4H,IAAI6P,KAGfjW,EAAM0V,iBACNO,EAAOzX,UAAW,EAClBA,EAAS4H,IAAI6P,IAUf3Y,KAAKsY,WAAW,YAAatY,KAAK6Y,oBAAoB3S,KAAKlG,KAAM0C,IACjE1C,KAAKsY,WAAW,UAAWtY,KAAKwY,cAActS,KAAKlG,KAAM0C,O,gCAG3D,SAAmBA,EAAmBiW,EAAkBjG,GAEtDA,EAAEoF,kBACFpF,EAAEmF,iBAEF,IAAIlX,EAAO+B,EAAMoW,aAEbC,EAAa,EAEjB,GADApY,EAAKiF,SAAQ,SAACH,GAASsT,GAAetT,EAAI+E,UAAYzD,EAAQgE,OAAU,EAAI,KACxEgO,GAAc,EAAG,CAAC,IAAD,gBACJpY,GADI,IACnB,IAAI,EAAJ,qBAAqB,CAAC,IAAd8E,EAAa,QACnBzF,KAAKgZ,eAAetW,EAAO+C,EAAKkT,IAFf,+BAMrBA,EAAOzX,UAAW,EAClBwB,EAAMoW,aAAahQ,IAAI6P,K,4BAGzB,SAAejW,EAAmBiO,EAAaC,GAC7C,IAAI/K,EAAa8K,EAAE/E,UAAUgF,GACzB/K,IACFnD,EAAMuW,cAAcpT,GACpBnD,EAAM2C,Y,2BAIV,SAAc3C,EAAmBgQ,GAC/BA,EAAEmF,iBACFnF,EAAEoF,kBAEEpF,EAAEkF,SAAW5X,KAAK6W,cAItB7W,KAAK0D,QACDhB,EAAMkW,mBAAmB9L,KAAO,GAClC9M,KAAKiX,mBAAqBR,GAAcyC,UACxClZ,KAAKkX,eAAeiC,OAAOzW,EAAMkW,qBACxBlW,EAAMoW,aAAahM,KAAO,IACnC9M,KAAKiX,mBAAqBR,GAAc2C,IACxCpZ,KAAKkX,eAAeiC,OAAOzW,EAAMoW,eAKnCpW,EAAM2C,Y,mCAGR,SAAsB3C,EAAmBgQ,GACvC,MAAa1S,KAAKoX,mBAAoB1E,GAAjCvS,EAAL,EAAKA,EAAGC,EAAR,EAAQA,EAKR,GAHAsS,EAAEoF,kBACFpF,EAAEmF,sBAEkB1R,IAAhBnG,KAAK2W,aAA2CxQ,IAAnBnG,KAAK4W,UACpC,MAAM,IAAI3L,MAAM,2CAElB,MAAiB,CAACjL,KAAK2W,OAAOxW,EAAGH,KAAK2W,OAAOvW,GAAtCiT,EAAP,KAAWgG,EAAX,KAEA,GAAIlZ,IAAMkT,GAAMjT,IAAMiZ,EAAI,CAAC,IAAD,gBACVrZ,KAAK4W,UAAU0C,UADL,IACxB,2BAAuC,SACnCC,MAAQvZ,KAAK2W,QAFO,+BAMtBxW,GAAKkT,IACPrT,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMpZ,EAAIA,EACrCH,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMpZ,EAAIA,EACrCH,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMpZ,EAAIkT,EACrCrT,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMpZ,EAAIkT,GAEnClT,GAAKkT,IACPrT,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMpZ,EAAIkT,EACrCrT,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMpZ,EAAIkT,EACrCrT,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMpZ,EAAIA,EACrCH,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMpZ,EAAIA,GAEnCC,GAAKiZ,IACPrZ,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMnZ,EAAIiZ,EACrCrZ,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMnZ,EAAIA,EACrCJ,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMnZ,EAAIA,EACrCJ,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMnZ,EAAIiZ,GAEnCjZ,GAAKiZ,IACPrZ,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMnZ,EAAIA,EACrCJ,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMnZ,EAAIiZ,EACrCrZ,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMnZ,EAAIiZ,EACrCrZ,KAAK4W,UAAU0C,SAAS,GAAGC,MAAMnZ,EAAIA,GAGvCsC,EAAMkW,mBAAmBrN,QACzB7I,EAAMoW,aAAavN,QAEnB,IAAIiO,EAAU,YAAO9W,EAAM8W,WAAW7T,UAClChF,EAAI,YAAO+B,EAAM/B,KAAKgF,UAE1B,GAAI3F,KAAK+W,SAAW3C,GAAY+D,OAAQ,CACtCnY,KAAKmX,iBAAiB5L,QADgB,oBAGhBiO,GAHgB,IAGtC,2BAAkC,CAAC,IAA1BrI,EAAyB,QAC5BA,EAAUsI,SAASzZ,KAAK4W,YAC1B5W,KAAKmX,iBAAiBrO,IAAIqI,IALQ,8BAStC,GAAInR,KAAKmX,iBAAiBrK,KAAO,EAC/BpK,EAAMkW,mBAAmBrN,QACzB7I,EAAMkW,mBAAmBO,OAAOnZ,KAAKmX,sBAChC,CACL,IADK,EACDxW,EAAI,YAAO+B,EAAM/B,KAAKgF,UADrB,cAGWhF,GAHX,IAGL,2BAAsB,CAAC,IAAd8E,EAAa,QAChBA,EAAIgU,SAASzZ,KAAK4W,YACpB5W,KAAKmX,iBAAiBrO,IAAIrD,IALzB,8BASL/C,EAAMoW,aAAavN,QACnB7I,EAAMoW,aAAaK,OAAOnZ,KAAKmX,wBAKjC,GAFAnX,KAAKmX,iBAAiB5L,QAElBvL,KAAKiX,qBAAuBR,GAAcyC,UAAW,CACvD,IADuD,EACnDM,EAAU,YAAO9W,EAAM8W,WAAW7T,UADiB,cAEjC6T,GAFiC,IAEvD,2BAAkC,CAAC,IAA1BrI,EAAyB,QAC5BA,EAAUsI,SAASzZ,KAAK4W,YAC1B5W,KAAKmX,iBAAiBrO,IAAIqI,IAJyB,8BAQvD,GAAInR,KAAK+W,SAAW3C,GAAY6D,cAC9BvV,EAAMkW,mBAAmBO,OAAOnZ,KAAKmX,iBAAiBuC,MAAM1Z,KAAKkX,qBAC5D,IAAIlX,KAAK+W,SAAW3C,GAAY8D,WAGrC,MAAM,IAAIjN,MAAM,gCAFhBvI,EAAMkW,mBAAmBO,OAAOnZ,KAAKmX,iBAAiBwC,IAAI3Z,KAAKkX,sBAI5D,IAAIlX,KAAKiX,qBAAuBR,GAAc2C,IAgBnD,MAAM,IAAInO,MAAM,gCAfhB,IADwD,EACpDtK,EAAI,YAAO+B,EAAM/B,KAAKgF,UAD8B,cAExChF,GAFwC,IAExD,2BAAsB,CAAC,IAAd8E,EAAa,QAChBA,EAAIgU,SAASzZ,KAAK4W,YACpB5W,KAAKmX,iBAAiBrO,IAAIrD,IAJ0B,8BAQxD,GAAIzF,KAAK+W,SAAW3C,GAAY6D,cAC9BvV,EAAMoW,aAAaK,OAAOnZ,KAAKmX,iBAAiBuC,MAAM1Z,KAAKkX,qBACtD,IAAIlX,KAAK+W,SAAW3C,GAAY8D,WAGrC,MAAM,IAAIjN,MAAM,gCAFhBvI,EAAMoW,aAAaK,OAAOnZ,KAAKmX,iBAAiBwC,IAAI3Z,KAAKkX,kBAS/D,GAAIxU,EAAMkW,mBAAmB9L,KAAO,EAAG,CAAC,IAAD,gBACf0M,GADe,IACrC,2BAAkC,CAAC,IAA1BrI,EAAyB,QAChCA,EAAUjQ,SAAWwB,EAAMkW,mBAAmB/M,IAAIsF,IAFf,kDAKrBxQ,GALqB,IAKrC,2BAAsB,SAChBO,UAAW,GANoB,oCAQhC,GAAIwB,EAAMoW,aAAahM,KAAO,EAAG,CAAC,IAAD,gBACtBnM,GADsB,IACtC,2BAAsB,CAAC,IAAd8E,EAAa,QACpBA,EAAIvE,SAAWwB,EAAMoW,aAAajN,IAAIpG,IAFF,kDAKhB+T,GALgB,IAKtC,2BAAkC,SACtBtY,UAAW,GANe,mCAQjC,CAAC,IAAD,gBACiBsY,GADjB,IACL,2BAAkC,SACtBtY,UAAW,GAFlB,kDAKWP,GALX,IAKL,2BAAsB,SAChBO,UAAW,GANZ,+BAYPwB,EAAM2C,SACN3C,EAAMkX,qB,gCAGR,SAAmBlX,EAAmBgQ,GACpC,MAAe1S,KAAKoX,mBAAoB1E,GAAnCmH,EAAL,EAAKA,GAAIC,EAAT,EAASA,GAETpX,EAAM+P,QAAU,CACdb,IAAKlP,EAAM+P,QAAQb,IAAMkI,EACzBnI,KAAMjP,EAAM+P,QAAQd,KAAOkI,EAC3BtW,MAAOb,EAAM+P,QAAQlP,MACrBsO,OAAQnP,EAAM+P,QAAQZ,QAGxBnP,EAAM2C,W,iCAGR,SAAoB3C,EAAmBgQ,GAA2D,IAAD,EAC/F,EAAe1S,KAAKoX,mBAAoB1E,GAAnCmH,EAAL,EAAKA,GAAIC,EAAT,EAASA,IAEL,UAAC9Z,KAAK8W,uBAAN,aAAC,EAAsB5V,YACzBlB,KAAK8W,gBAAiB5V,UAAW,EACjCwB,EAAMkW,mBAAmB9P,IAAI9I,KAAK8W,kBAL2D,oBAQzEpU,EAAMkW,oBARmE,IAQ/F,2BAAgD,SACpCrT,UAAU,IAAIkB,IAAM3C,MAAM+V,EAAIC,KATqD,iC,sBAcjG,WAEE,MAAO,CADmC1F,GAArC+D,OAAqC/D,GAA7B6D,cAA6B7D,GAAd8D,YACe6B,SAAS/Z,KAAK+W,U,0BAG3D,SAAkDiD,GAChD,GAAIha,KAAK+W,SAAW3C,GAAY6D,cAC9B,OAAO+B,EAAQN,MAAM1Z,KAAKkX,gBACrB,GAAIlX,KAAK+W,SAAW3C,GAAY8D,WACrC,OAAO8B,EAAQzD,oBAAoBvW,KAAKkX,gBAE1C,MAAM,IAAIjM,MAAM,oC,KGzELgP,G,kDAxRX,WAAYta,GAA0B,IAAD,8BACjC,cAAMA,IALFua,aAA6B,IAAIxD,GAIJ,EAH7ByD,SAG6B,IAF7BC,oBAE6B,EAIjC,EAAKxa,MAAQ,CACTya,SAAU,CACN9W,MAAO,EACPsO,OAAQ,GAEZyI,YAAa,EACbC,KAAK,EACLC,MAAM,GAGV,EAAKL,IAAMjY,IAAMuY,YAdgB,E,4CAkBrC,SAAS1F,GACL,MAAsBA,EAAQ,GAAG2F,YAA5BnX,EAAL,EAAKA,MAAOsO,EAAZ,EAAYA,OAERnP,EAAQ1C,KAAKL,MAAM+C,MACvB1C,KAAKD,UAAS,SAACH,GAQX,OAPA8C,EAAM+P,QAAU,CACZd,KAAMjP,EAAM+P,QAAQd,KACpBC,IAAKlP,EAAM+P,QAAQb,IACnBrO,MAAOA,EAAQ3D,EAAM0a,YACrBzI,OAAQA,EAASjS,EAAM0a,aAGpB,CACHD,SAAU,CACN9W,MAAOA,EACPsO,OAAQA,S,+BAYxB,WAAqB,IAAD,OAChB7R,KAAKL,MAAM+C,MAAM2C,OAAS,kBAAM,EAAKtF,SAAS,KAC9CC,KAAKD,SAAS,IACd,IAAI2C,EAAQ1C,KAAKma,IAAIH,QACrBha,KAAKoa,eAAiB,IAAIO,eAAe3a,KAAK4a,SAAS1U,KAAKlG,OAC5DA,KAAKoa,eAAeS,QAAQnY,GAC5B1C,KAAKka,aAAa9C,mBAAqBpX,KAAKoX,mBAAmBlR,KAAKlG,Q,kCAQxE,WAAwB,IAAD,EACnB,UAAAA,KAAKoa,sBAAL,SAAqB1O,aACrB1L,KAAKka,aAAaxW,U,kBAItB,WACI,OACI,iCACI,0BAASoO,GAAG,OAAO3R,EAAG,EAAGC,EAAG,EAAGmD,MAAO,GAAIsO,OAAQ,GAAIY,QAAQ,YAAYqI,aAAa,iBAAvF,UACI,sBAAM1Z,UAAU,OAAOU,EAAE,eAAeiZ,YAAY,MACpD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,QACtD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,QACtD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,QACtD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,QACtD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,QACtD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,QACtD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,QACtD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,MAEtD,sBAAM3Z,UAAU,OAAOU,EAAE,eAAeiZ,YAAY,MACpD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,QACtD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,QACtD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,QACtD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,QACtD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,QACtD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,QACtD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,QACtD,sBAAM3Z,UAAU,OAAOU,EAAE,iBAAiBiZ,YAAY,SAG1D,0BAASjJ,GAAG,MAAM3R,EAAG,EAAGC,EAAG,EAAGmD,MAAO,EAAGsO,OAAQ,EAAGY,QAAQ,UAAUqI,aAAa,iBAAlF,UACI,sBAAM3a,EAAG,EAAGC,EAAG,EAAGmD,MAAO,EAAGsO,OAAQ,EAAG5B,KAAK,UAC5C,sBAAM9P,EAAG,EAAGC,EAAG,EAAGmD,MAAO,EAAGsO,OAAQ,EAAG5B,KAAK,UAC5C,sBAAM9P,EAAG,EAAGC,EAAG,EAAGmD,MAAO,EAAGsO,OAAQ,EAAG5B,KAAK,aAGhD,iCAAgB6B,GAAG,YAAnB,UACI,sBAAMnD,OAAO,KAAKqM,UAAU,uBAC5B,sBAAMrM,OAAO,OAAOqM,UAAU,gCA/B5B,U,wBAsClB,WACI,MAAmChb,KAAKL,MAAM+C,MAAM+P,QAA7Cd,EAAP,EAAOA,KAAMC,EAAb,EAAaA,IAAKrO,EAAlB,EAAkBA,MAAOsO,EAAzB,EAAyBA,OAEzB,OAAO,sBAAiB1R,EAAGwR,EAAMvR,EAAGwR,EAAKrO,MAAOA,EAAOsO,OAAQA,EAAQ5B,KAAK,cAA3D,U,oBAGrB,WAAU,IAAD,WACL,EAAmCjQ,KAAKL,MAAM+C,MAAM+P,QAA7Cd,EAAP,EAAOA,KAAMC,EAAb,EAAaA,IAAKrO,EAAlB,EAAkBA,MAAOsO,EAAzB,EAAyBA,OAErBoJ,EAAY,UAAIjb,KAAKka,aAAatD,iBAAtB,iBAAI,EAA6BtS,mBAAjC,aAAG,EAA0DC,aAAa,KAEtF2W,EAAKlb,KAAKka,aAEV3Z,EAA8B,CAC9BC,gBAAiB0a,EAAGC,oBAAoBjV,KAAKgV,EAAIlb,KAAKL,MAAM+C,OAC5DhC,kBAAmBV,KAAKob,sBAAsBlV,KAAKlG,MACnDoG,eAAgB8U,EAAGG,mBAAmBnV,KAAKgV,EAAIlb,KAAKL,MAAM+C,QAG1D4Y,EAAqC,GACzCtb,KAAKL,MAAM+C,MAAMgD,YAAYE,SAAQ,SAAC0F,GAAD,OAAOgQ,EAAoBna,KAAKmK,EAAExK,aAEvE,IAAIya,EAAoC,GAMxC,OALAvb,KAAKL,MAAM+C,MAAM8W,WAAW5T,SAAQ,SAAC0F,GAAD,OAAOiQ,EAAmBpa,KAAKmK,EAAExK,OAAOP,OAMxE,qBACI4Z,IAAKna,KAAKma,IACVxG,MAAO,CACHpQ,MAAO,OACPsO,OAAQ,QAJhB,SAOI,qBAAKzQ,UAAU,gBAAgBuS,MAAO3T,KAAKJ,MAAMya,SAC5CmB,MAAM,6BACNC,QAAS,SAAC/I,GAAD,OAAM,EAAKgJ,YAAYhJ,IAChCjR,YAAayZ,EAAGS,qBAAqBzV,KAAKgV,EAAIlb,KAAKL,MAAM+C,OACzDkZ,YAAa5b,KAAK6b,gBAAgB3V,KAAKlG,MACvC8b,WAAY,SAACpJ,GAAD,OAAO,EAAKqJ,eAAerJ,IACvCsJ,OAAQ,SAACtJ,GAAD,OAAO,EAAKuJ,WAAWvJ,IANpC,SAQI,sBAAKtR,UAAU,QACV8a,oBAAoB,iBACpBV,MAAM,6BACN/I,QAAO,UAAKd,EAAL,YAAaC,EAAb,YAAoBrO,EAApB,YAA6BsO,GACpCsK,SAAU,kBAAM5U,QAAQC,IAAI,WAJjC,UAMKxH,KAAKoc,OACLpc,KAAKqc,aACN,wBAAQjb,UAAW,SAAUjB,EAAE,IAAIC,EAAE,IAAIuH,EAAE,KAAKsI,KAAK,QACpDqL,EACAC,EACAN,GACD,sBAAM7Z,UAAU,SAASU,EAAGmZ,EAAcqB,aAAa,gC,4BAU3E,WACItc,KAAKL,MAAM+C,MAAM0V,mB,gCAIrB,SAAmB1F,GACf,IAAI2F,EAAOrY,KAAKma,IAAIH,QAAQuC,wBACtBC,EAAInE,EAAK1G,KACX8K,EAAIpE,EAAKzG,IACT8K,EAAIrE,EAAK9U,MACToZ,EAAItE,EAAKxG,OAGP+K,EAASlK,EAAEmK,MAAQL,EACrBM,EAASpK,EAAEqK,MAAQN,EAGjBO,EAAUtK,EAAEuK,UAAY1F,OAAO2F,iBACjCC,EAAUzK,EAAE0K,UAAY7F,OAAO2F,iBAEnC,EAA6Eld,KAAKL,MAAM+C,MAAM+P,QAAjF4K,EAAb,EAAO1L,KAAqB2L,EAA5B,EAAuB1L,IAAqB2L,EAA5C,EAAqCha,MAA0Bia,EAA/D,EAAuD3L,OAEjD4L,EAAgBb,EAASF,EAC3BgB,EAAgBZ,EAASH,EAM7B,MAAO,CACHxc,EANQkd,EAAWI,EAAgBF,EAOnCnd,EANQkd,EAAUI,EAAgBF,EAOlCG,GAAIF,EACJG,GAAIF,EACJ7D,GARKmD,EAAUN,EAAIa,EASnBzD,GARKqD,EAAUR,EAAIa,K,6BAa3B,SAAgB9K,GACZA,EAAEmF,iBACFnF,EAAEK,aAAaE,cAAgB,S,4BAGnC,SAAeP,GACXA,EAAEmF,iBACFnF,EAAEK,aAAaE,cAAgB,S,wBAGnC,SAAWP,GACPA,EAAEmF,iBACF,MAAa7X,KAAKoX,mBAAmB1E,GAAhCvS,EAAL,EAAKA,EAAGC,EAAR,EAAQA,EACJqR,EAAOP,GAAK1M,KAChB,GAAKiN,EAAL,CAGA,IAAIN,EAAYM,EAAKL,KAAKpR,KAAKL,MAAM+C,OAErCyO,EAAUlR,SAASsF,UAAU,IAAIkB,IAAM3C,MAAM3D,EAAI,GAAIC,EAAI,KAEzDJ,KAAKL,MAAM+C,MAAMmb,aAAa1M,GAE9BnR,KAAKD,SAAS,O,yBAOlB,SAAY2S,GACR,MAAqB1S,KAAKoX,mBAAmB1E,GAAxCvS,EAAL,EAAKA,EAAGC,EAAR,EAAQA,EAAGud,EAAX,EAAWA,GAAIC,EAAf,EAAeA,GAETL,EAAYvd,KAAKJ,MAAMya,SAAS9W,MAClCia,EAAaxd,KAAKJ,MAAMya,SAASxI,OAI9ByI,EAAeta,KAAKJ,MAApB0a,YAEDwD,EAAiB7D,EAAM8D,QAJX,EAAI,GAI0BrV,KAAKsV,IAAI,EAAGtL,EAAEuL,OAAS,KAAQ3D,EAH7D,GAId4D,EAAWX,EAAYO,EACvBK,EAAYX,EAAaM,EAEvBM,EAAa,CACfzM,KAAMxR,EAAIwd,EAAKO,EACftM,IAAKxR,EAAIwd,EAAKO,EACd5a,MAAO2a,EACPrM,OAAQsM,GAGZne,KAAKL,MAAM+C,MAAM+P,QAAU2L,EAE3Bpe,KAAKD,SAAS,CACVua,YAAawD,M,mCAIrB,SAAsBje,EAAgC6S,GAC9CA,EAAE2L,WAGN3L,EAAEoF,kBACFpF,EAAEmF,iBACFtQ,QAAQC,IAAI,kB,sBAtChB,SAAemJ,EAAYC,EAAWtF,GAClC,OAAO5C,KAAKC,IAAID,KAAKgG,IAAIiC,EAAGC,GAAItF,O,GAnPpBpJ,IAAMxC,W,oBCoJX4e,G,WA5Lb,WAAYlc,GAAwB,yBANpCoC,UAMmC,OALnCmN,KAAuC,KAKJ,KAJnC4M,MAAwC,KAIL,KAHnCC,OAAiB,EAGkB,KAFnCC,UAAoB,EAGlBze,KAAKwE,KAAOpC,EAAOoC,K,8CAGrB,WAA+C,IAAD,MAC5C,IAAKxE,KAAKue,MACR,MAAMtT,MAAM,uBAGd,IAAIyT,EAAM1e,KAAKue,MACXI,EAAOD,EAAI/M,KAWf,OAVA3R,KAAKue,MAAQI,EACb3e,KAAKwe,QAAUE,EAAIF,OACnBxe,KAAKwe,SAAc,OAAJG,QAAI,IAAJA,OAAA,EAAAA,EAAMH,SAAU,EAC/BE,EAAI/M,KAAO3R,KACX0e,EAAIF,SAAc,OAAJG,QAAI,IAAJA,OAAA,EAAAA,EAAMH,SAAU,EAC9BE,EAAIF,QAAUxe,KAAKwe,OAEnBxe,KAAKye,UAAY/V,KAAKgG,KAAI,UAAA1O,KAAK2R,YAAL,eAAW8M,YAAa,GAAG,UAAAze,KAAKue,aAAL,eAAYE,YAAa,GAAK,EACnFC,EAAID,UAAY/V,KAAKgG,IAAIgQ,EAAI/M,KAAK8M,WAAW,UAAAC,EAAIH,aAAJ,eAAWE,YAAa,GAAK,EAEnEC,I,yBAGT,WAAgD,IAAD,MAC7C,IAAK1e,KAAK2R,KACR,MAAM1G,MAAM,uBAGd,IAAIyT,EAAM1e,KAAK2R,KACXgN,EAAOD,EAAIH,MAWf,OAVAve,KAAK2R,KAAOgN,EACZ3e,KAAKwe,QAAUE,EAAIF,OACnBxe,KAAKwe,SAAc,OAAJG,QAAI,IAAJA,OAAA,EAAAA,EAAMH,SAAU,EAC/BE,EAAIH,MAAQve,KACZ0e,EAAIF,SAAc,OAAJG,QAAI,IAAJA,OAAA,EAAAA,EAAMH,SAAU,EAC9BE,EAAIF,QAAUxe,KAAKwe,OAEnBxe,KAAKye,UAAY/V,KAAKgG,KAAI,UAAA1O,KAAK2R,YAAL,eAAW8M,YAAa,GAAG,UAAAze,KAAKue,aAAL,eAAYE,YAAa,GAAK,EACnFC,EAAID,UAAY/V,KAAKgG,KAAI,UAAAgQ,EAAI/M,YAAJ,eAAU8M,YAAa,EAAGC,EAAIH,MAAME,WAAa,EAEnEC,I,mBAGT,WAAyB,IAAD,IAClBlC,GAAI,UAAAxc,KAAK2R,YAAL,eAAW8M,YAAa,EAEhC,QADQ,UAAAze,KAAKue,aAAL,eAAYE,YAAa,GACtBjC,I,qBAGb,WACE,IAAIoC,EAAQ5e,KAAK4e,QACjB,OAAIA,GAAS,GAAK5e,KAAK2R,MACJ3R,KAAK2R,KAAKiN,SACT,IAChB5e,KAAK2R,KAAO3R,KAAK2R,KAAKkN,cAEjB7e,KAAK8e,eACHF,EAAQ,GAAK5e,KAAKue,OACVve,KAAKue,MAAMK,UACT,IACjB5e,KAAKue,MAAQve,KAAKue,MAAMO,eAEnB9e,KAAK6e,cAEL7e,O,oBAIX,SAAOyc,EAAMsC,GACX,IAAIzI,EAASyI,EAAItC,EAAGzc,KAAKwE,MACrBwa,GAAiB,EACrB,GAAI1I,EAAS,EACX,GAAItW,KAAK2R,KAAM,CAAC,IAAD,EACQ3R,KAAK2R,KAAKsN,OAAOxC,EAAGsC,GAD5B,mBACZ/e,KAAK2R,KADO,KACDqN,EADC,UAGbhf,KAAK2R,KAAO,IAAI2M,EAAwB,CAAC9Z,KAAMiY,IAC/CuC,GAAQ,MAEL,MAAI1I,EAAS,GASlB,OADAtW,KAAKwE,KAAOiY,EACL,CAACzc,MAAM,GARd,GAAIA,KAAKue,MAAO,CAAC,IAAD,EACQve,KAAKue,MAAMU,OAAOxC,EAAGsC,GAD7B,mBACb/e,KAAKue,MADQ,KACDS,EADC,UAGdhf,KAAKue,MAAQ,IAAID,EAAwB,CAAC9Z,KAAMiY,IAChDuC,GAAQ,EAOZ,IACW,IADPN,EAA+B1e,KAC/Bgf,IACFhf,KAAKwe,QAAU,EACfxe,KAAKye,UAAY/V,KAAKgG,KAAI,UAAA1O,KAAK2R,YAAL,eAAW8M,YAAa,GAAG,UAAAze,KAAKue,aAAL,eAAYE,YAAa,GAAK,EACnFC,EAAM1e,KAAKkf,WAEb,MAAO,CAACR,EAAKM,K,kBAGf,SAAKvC,EAAMsC,GACT,IAAIzI,EAASyI,EAAItC,EAAGzc,KAAKwE,MACzB,OAAI8R,EAAS,EACJtW,KAAK2R,MAAQ3R,KAAK2R,KAAKwN,KAAK1C,EAAGsC,GAC7BzI,EAAS,EACXtW,KAAKue,OAASve,KAAKue,MAAMY,KAAK1C,EAAGsC,GAEjC/e,KAAKwE,O,sBAIhB,WACE,GAAKxE,KAAK2R,KAEH,CAAC,IAAD,EACL,EAAkB3R,KAAK2R,KAAKyN,WAA5B,mBAAKC,EAAL,KAAWC,EAAX,KAMA,OALAtf,KAAK2R,KAAO0N,EAEZrf,KAAKwe,QAAU,EACfxe,KAAKye,UAAY/V,KAAKgG,KAAQ,OAAJ2Q,QAAI,IAAJA,OAAA,EAAAA,EAAMZ,YAAa,GAAG,UAAAze,KAAKue,aAAL,eAAYE,YAAa,GAAK,EAEvE,CAACze,KAAKkf,UAAWI,GARxB,MAAO,CAACtf,KAAKue,MAAOve,KAAKwE,Q,qBAY7B,WACE,GAAKxE,KAAKue,MAEH,CAAC,IAAD,EACL,EAAkBve,KAAKue,MAAMa,WAA7B,mBAAKC,EAAL,KAAWC,EAAX,KAMA,OALAtf,KAAKue,MAAQc,EAEbrf,KAAKwe,QAAU,EACfxe,KAAKye,UAAY/V,KAAKgG,KAAQ,OAAJ2Q,QAAI,IAAJA,OAAA,EAAAA,EAAMZ,YAAa,GAAG,UAAAze,KAAK2R,YAAL,eAAW8M,YAAa,GAAK,EAEtE,CAACze,KAAKkf,UAAWI,GARxB,MAAO,CAACtf,KAAK2R,KAAM3R,KAAKwE,Q,oBAY5B,SAAOiY,EAAMsC,GACX,IACIQ,EAyBS,IA1BTjJ,EAASyI,EAAItC,EAAGzc,KAAKwE,MAErBka,EAAsC1e,KAC1C,GAAIsW,EAAS,EACX,GAAItW,KAAK2R,KAAM,CAAC,IAAD,EACU3R,KAAK2R,KAAK5N,OAAO0Y,EAAGsC,GAD9B,mBACZ/e,KAAK2R,KADO,KACD4N,EADC,UAGbA,GAAU,OAEP,GAAIjJ,EAAS,EAClB,GAAItW,KAAKue,MAAO,CAAC,IAAD,EACUve,KAAKue,MAAMxa,OAAO0Y,EAAGsC,GAD/B,mBACb/e,KAAKue,MADQ,KACDgB,EADC,UAGdA,GAAU,MAEP,CACL,GAAIvf,KAAK2R,KAAM,CAAC,IAAD,EACY3R,KAAK2R,KAAK6N,UADtB,mBACZxf,KAAK2R,KADO,KACD3R,KAAKwE,KADJ,SAER,KAAIxE,KAAKue,MAGd,MAAO,CAAC,MAAM,GAHQ,IAAD,EACKve,KAAKue,MAAMa,WADhB,mBACpBpf,KAAKue,MADe,KACRve,KAAKwE,KADG,KAKvB+a,GAAU,EAGRA,IACFvf,KAAKwe,QAAU,EACfxe,KAAKye,UAAY/V,KAAKgG,KAAI,UAAA1O,KAAK2R,YAAL,eAAW8M,YAAa,GAAG,UAAAze,KAAKue,aAAL,eAAYE,YAAa,GAAK,EACnFC,EAAM1e,KAAKkf,WAEb,MAAO,CAACR,EAAKa,K,mBAGf,WACMvf,KAAK2R,OACP3R,KAAK2R,KAAKpG,QACVvL,KAAK2R,KAAO,MAEV3R,KAAKue,QACPve,KAAKue,MAAMhT,QACXvL,KAAKue,MAAQ,U,kBC1GTkB,IAAV,SAAUA,GAAmBC,GAA7B,+EACqB,OAAbA,EAAIvN,KADZ,iDAKQwN,EAAQ,GACR3F,EAA0C0F,EAAIvN,KANtD,WAQW6H,IAAW2F,EAAM9Q,OAR5B,iBASQ,KAAOmL,GACH2F,EAAMxe,KAAK6Y,GACXA,EAAUA,EAAQrI,KAKtB,OADI+M,EAA+BiB,EAAMC,MAfjD,SAgBclB,EAAIla,KAhBlB,OAiBYka,EAAIH,QACJvE,EAAU0E,EAAIH,OAlB1B,0FAyBesB,O,YAvGX,WAAYzd,GAAqB,yBAHhB2c,SAGe,OAFhC5M,KAAuC,KAGnCnS,KAAK+e,IAAM3c,EAAO2c,I,0CAGtB,SAAOtC,GACH,GAAKzc,KAAKmS,KAEH,CAAC,IAAD,EACanS,KAAKmS,KAAK8M,OAAOxC,EAAGzc,KAAK+e,KADtC,mBACF/e,KAAKmS,KADH,UADHnS,KAAKmS,KAAO,IAAImM,GAAwB,CAAC9Z,KAAMiY,M,oBAMvD,SAAOA,GACH,IAAKzc,KAAKmS,KACN,OAAO,EAGX,IALkB,EAMCnS,KAAKmS,KAAKpO,OAAO0Y,EAAGzc,KAAK+e,KAN1B,mBAOlB,OADC/e,KAAKmS,KANY,Y,mBAWtB,WACSnS,KAAKmS,OAMVnS,KAAKmS,KAAK5G,QAEVvL,KAAKmS,KAAO,Q,kBAIhB,SAAKsK,GAAmD,IAA7CsC,EAA4C,uDAAhB,KAEnC,OADAA,EAAMA,GAAO/e,KAAK+e,IACb/e,KAAKmS,MAIHnS,KAAKmS,KAAKgN,KAAK1C,EAAGsC,IAHd,O,mBAMf,WACI,IAAK/e,KAAKmS,KACN,OAAO,KAIX,IADA,IAAIkN,EAAOrf,KAAKmS,KACVkN,EAAK1N,MACP0N,EAAOA,EAAK1N,KAGhB,OAAO0N,EAAK7a,O,sBAGhB,WACI,IAAKxE,KAAKmS,KACN,OAAO,KAGX,MAAkBnS,KAAKmS,KAAKiN,WAA5B,mBAAKC,EAAL,KAAWC,EAAX,KAEA,OADAtf,KAAKmS,KAAOkN,EACLC,I,kBAGX,WAAgB,IAAD,EACX,OAAO,UAAAtf,KAAKmS,YAAL,eAAWqM,SAAU,I,aAGhC,WACI,OAAOiB,GAAgBzf,U,GAD1B8f,OAAOC,UC9CGC,G,WArBb,WAAY5d,GAAkB,yBAJ9BqD,SAI6B,OAH7Bwa,UAG6B,OAF7BrgB,WAE6B,EAC3BI,KAAKyF,IAAMrD,EAAOqD,IAClBzF,KAAKigB,KAAO7d,EAAO6d,KACnBjgB,KAAKJ,MAAQwC,EAAOxC,M,yCAGtB,WACEI,KAAKyF,IAAI4F,cAAcrL,KAAKJ,S,iBAG9B,SAAImI,GACF,OAAI/H,KAAKigB,OAASlY,EAAMkY,KACfjgB,KAAKyF,IAAInE,KAAKoT,cAAc3M,EAAMtC,IAAInE,MAEtCtB,KAAKigB,KAAOlY,EAAMkY,S,KC+IhBC,G,iDA9JLC,SAAoB,CAC1BxO,KAAM,EACNC,IAAK,EACLrO,MAAO,IACPsO,OAAQ,K,KAIV2H,WAA0C,IAAI9O,I,KAE9ChF,YAA4C,IAAIgF,I,KAEhD/J,KAA8B,IAAI+J,I,KAEzBkO,mBAAkD,IAAIvC,G,KACtDyC,aAAsC,IAAIzC,G,KAGnD5T,MAA0B+D,I,KAE1B4Z,WAA2C,IAAIP,GAA6B,CAACd,IAAK,SAACpO,EAAGC,GAAJ,OAAUD,EAAEoO,IAAInO,M,KAClGyP,mBAA6B,E,KAC7BC,sBAAgC,E,KAEhCC,qBAA+B,G,KAE/BC,mBAA6B,E,KAC7BC,UAAsB,a,KACtB7G,iBAA+B,a,KAC/BvU,OAAqB,a,yCAErB,WACE,OAAOrF,KAAKmgB,U,IAGd,SAAYO,GACV1gB,KAAKmgB,SAAWO,I,oBAGlB,WACE,OACI,cAAC,GAAD,CAAOhe,MAAO1C,S,uBAWpB,SAAUJ,EAAmB6F,EAAe9C,GAC1C,IAAIge,EAAQ,IAAIX,GAAW,CACzBva,IAAKA,EACLwa,KAAMjgB,KAAKsgB,sBAAwB3d,EACnC/C,MAAOA,IAGTI,KAAKogB,WAAWnB,OAAO0B,K,6BAGzB,YACkC,IAA5B3gB,KAAKqgB,oBAEPrgB,KAAKqgB,kBAAoBO,YAAY5gB,KAAK6gB,kBAAkB3a,KAAKlG,MAAOA,KAAKugB,yB,4BAIjF,WACEvgB,KAAK8gB,kBACL9gB,KAAKogB,WAAW7U,QAEhBvL,KAAKsgB,sBAAwB,EAC7BtgB,KAAKwZ,WAAW5T,SAAQ,SAAA0F,GAAC,OAAIA,EAAE5H,a,6BAIjC,YACkC,IAA5B1D,KAAKqgB,oBACPU,cAAc/gB,KAAKqgB,mBACnBrgB,KAAKqgB,mBAAqB,K,+BAI9B,WAIE,IAHA,IACI1H,EADU3Y,KAAKsgB,sBACItgB,KAAKwgB,mBAErBxgB,KAAKogB,WAAWtT,QAAU9M,KAAKogB,WAAWY,QAASf,MAAQtH,GAAQ,CACxE,IAAIgI,EAAQ3gB,KAAKogB,WAAWhB,WAE5Bpf,KAAKsgB,sBAAwBK,EAAMV,KACnCU,EAAMM,QAERjhB,KAAKsgB,sBAAwB3H,EAK7B3Y,KAAKygB,c,6BAGP,WACE,OAAmC,IAA5BzgB,KAAKqgB,oB,4BAGd,WACE,OAAQrgB,KAAKkhB,mBAAoD,IAA/BlhB,KAAKsgB,wB,6BAGzC,WACE,OAAQtgB,KAAKkhB,mBAAoD,IAA/BlhB,KAAKsgB,wB,0BAIzC,SAAanP,GACXnR,KAAKwZ,WAAW7N,IAAIwF,EAAU7P,KAAM6P,K,2BAItC,SAActL,GACZ7F,KAAK0F,YAAYiG,IAAI9F,EAAWvE,KAAMuE,K,oBAIxC,SAAOJ,GACLzF,KAAKW,KAAKgL,IAAIlG,EAAInE,KAAMmE,K,6BAI1B,SAAgBnE,GACdtB,KAAKwZ,WAAWxP,OAAO1I,K,8BAIzB,SAAiBA,GACftB,KAAK0F,YAAYsE,OAAO1I,K,uBAI1B,SAAUA,GACRtB,KAAKW,KAAKqJ,OAAO1I,K,4BAGnB,WAAkB,IAAD,gBACDtB,KAAK4Y,oBADJ,IACf,2BAAuC,SACnC1X,UAAW,GAFA,8BAIflB,KAAK4Y,mBAAmBrN,QAJT,oBAMDvL,KAAK8Y,cANJ,IAMf,2BAAiC,SAC7B5X,UAAW,GAPA,8BASflB,KAAK8Y,aAAavN,Y,qDCzKT4V,GAAYC,aAAY,CACnCC,QAAS,CACPC,KAAM,OACNC,WAAY,CACVC,QAASC,KAAK,SAKPC,GAAaN,aAAY,CACpCC,QAAS,CACPC,KAAM,QACNC,WAAY,CACVC,QAASC,KAAK,SCNLE,GALMzf,IAAM0f,cAAc,CACvCC,MAAOH,GACPI,SAAU,SAACD,O,0CCiBEE,G,4JAbb,WACE,OACA,cAAC,GAAaC,SAAd,UACG,gBAAEH,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACG,cAACG,GAAA,EAAD,CAAY3R,QAAS,kBAAMwR,EAAgC,SAAvBD,EAAMR,QAAQC,KAAkBI,GAAaP,KAAjF,SAC0B,SAAvBU,EAAMR,QAAQC,KAAkB,cAAC,KAAD,IAAiB,cAAC,KAAD,a,GAN9Bpf,IAAMxC,WCwEvBwiB,I,mKA1Db,WACE,IAAIC,EAAUniB,KAAKL,MAAM+C,MAAMwe,kBAC3BkB,GAAWD,GAAWniB,KAAKL,MAAM+C,MAAM2f,kBAC3C,OACI,eAACC,GAAA,EAAD,CAAOlhB,UAAU,UACViS,GAAI,CACFkP,gBAAiB,qBACjBC,OAAQ,SAACX,GAAD,0BAAwBA,EAAMR,QAAQoB,WAEhD7T,QAAS,EACT6T,QAAS,cAACtO,EAAA,EAAD,CAAS5J,YAAY,WAAWgJ,QAAQ,SAASmP,UAAQ,IAClEC,UAAU,MAPjB,UAQE,eAAClO,EAAA,EAAD,CAAKmO,cAAc,MAAnB,UACE,eAACX,GAAA,EAAD,CAAY7gB,UAAW+gB,EAAU,UAAY,GAAI7R,QAAStQ,KAAK6iB,OAAO3c,KAAKlG,MAA3E,UAGE,cAAC,IAAD,CAAiBoB,UAAU,UAAU0L,KAAK,KAAK2G,KAAMqP,KAAQnP,MAAO,CAACzT,SAAU,WAC/E,cAAC,IAAD,CAAiBkB,UAAU,SAAS0L,KAAK,KAAK2G,KAAMsP,UAEtD,cAACd,GAAA,EAAD,CAAY3R,QAAStQ,KAAKgjB,OAAO9c,KAAKlG,MAAOijB,SAAUb,EAAvD,SAEE,cAAC,IAAD,CAAiBtV,KAAK,KAAK2G,KAAMyP,SAEnC,cAACjB,GAAA,EAAD,CAAY3R,QAAStQ,KAAKmjB,OAAOjd,KAAKlG,MAAOijB,SAAUd,EAAvD,SAEE,cAAC,IAAD,CAAiBrV,KAAK,KAAK2G,KAAM2P,YAMrC,cAAC3O,EAAA,EAAD,UACE,cAAC,GAAD,W,oBAMV,WACczU,KAAKL,MAAM+C,MACbwe,kBACRlhB,KAAKL,MAAM+C,MAAMoe,kBAEjB9gB,KAAKL,MAAM+C,MAAM2gB,kBAEnBrjB,KAAKD,SAAS,M,oBAGhB,WACEC,KAAKL,MAAM+C,MAAM4gB,iBACjBtjB,KAAKD,SAAS,M,oBAGhB,WACEC,KAAKL,MAAM+C,MAAMme,wB,GAvDC3e,IAAMxC,YCsEb6jB,I,yDA3Cb,WAAY5jB,GAAgB,IAAD,8BACzB,cAAMA,IA3BA+C,MAAoB,IAAIwd,GA0BL,EAzBnBjM,MAA6B,IAAIvJ,IAAI,CACzC,CAAC,QAAS,CACR,IAAIwG,GAAK,CAAC1O,KAAMxD,EAAS6L,MAAOxJ,QAAS,EAAGoJ,MAAO,UACnD,IAAIyG,GAAK,CAAC1O,KAAMxD,EAAS6L,MAAOxJ,QAAS,EAAGoJ,MAAO,WACnD,IAAIyG,GAAK,CAAC1O,KAAMxD,EAAS6L,MAAOxJ,QAAS,EAAGoJ,MAAO,aAErD,CAAC,SAAU,CACT,IAAIyG,GAAK,CAAC1O,KAAMxD,EAAS+L,OAAQ1J,QAAS,EAAGoJ,MAAM,WAErD,CAAC,QAAS,CACR,IAAIyG,GAAK,CAAC1O,KAAMxD,EAAS4O,KAAMvM,QAAS6I,GAASmD,IAAK5C,MAAM,QAC5D,IAAIyG,GAAK,CAAC1O,KAAMxD,EAAS4O,KAAMvM,QAAS6I,GAAS+C,KAAMxC,MAAM,SAC7D,IAAIyG,GAAK,CAAC1O,KAAMxD,EAAS4O,KAAMvM,QAAS6I,GAASoD,GAAI7C,MAAM,OAC3D,IAAIyG,GAAK,CAAC1O,KAAMxD,EAAS4O,KAAMvM,QAAS6I,GAASgD,IAAKzC,MAAM,QAC5D,IAAIyG,GAAK,CAAC1O,KAAMxD,EAAS4O,KAAMvM,QAAS6I,GAASqD,IAAK9C,MAAM,QAC5D,IAAIyG,GAAK,CAAC1O,KAAMxD,EAAS4O,KAAMvM,QAAS6I,GAASiD,KAAM1C,MAAM,SAC7D,IAAIyG,GAAK,CAAC1O,KAAMxD,EAAS4O,KAAMvM,QAAS6I,GAASsD,IAAK/C,MAAM,QAC5D,IAAIyG,GAAK,CAAC1O,KAAMxD,EAAS4O,KAAMvM,QAAS6I,GAASkD,IAAK3C,MAAM,UAE9D,CAAC,QAAS,CACR,IAAIyG,GAAK,CAAC1O,KAAMxD,EAAS0R,mBAAoBrP,QAAS,EAAGoJ,MAAO,eAChE,IAAIyG,GAAK,CAAC1O,KAAMxD,EAAS0R,mBAAoBrP,QAAS,EAAGoJ,MAAO,cAMpE,EAAK7K,MAAQ,CACXiiB,MAAOH,GACPI,SAAU,EAAKA,SAAS5b,KAAd,iBAJa,E,4CAQ3B,SAAS2b,GACPta,QAAQC,IAAR,yBAA8Bqa,EAAMR,QAAQC,KAA5C,SACAthB,KAAKD,SAAS,CAAC8hB,MAAOA,M,+BAGxB,WAAqB,IAAD,OAClB7hB,KAAK0C,MAAM+d,UAAY,kBAAM,EAAK1gB,SAAS,O,kCAG7C,WACEC,KAAK0C,MAAM+d,UAAY,e,oBAGzB,WAEE,OACI,cAAC,GAAa+C,SAAd,CAAuBzV,MAAO/N,KAAKJ,MAAnC,SACE,cAAC6jB,EAAA,EAAD,CAAe5B,MAAO7hB,KAAKJ,MAAMiiB,MAAjC,SACE,sBAAKlO,MAAO,CAACpQ,MAAO,OAAQsO,OAAQ,QAApC,UACE,uCAEE,cAAC,GAAD,CAASnP,MAAO1C,KAAK0C,WAEvB,eAAC+R,EAAA,EAAD,CAAKpB,GAAI,CAACqQ,QAAS,qBAAsBngB,MAAO,OAAQsO,OAAQ,OAAQtC,QAAS,QAAjF,UACE,cAAC,GAAD,CAAS0E,MAAOjU,KAAKiU,QAEpBjU,KAAK0C,MAAM5B,uB,GA7DVoB,IAAMxC,Y,UCdxBikB,IAAS7iB,OACL,cAAC,IAAM8iB,WAAP,UACE,cAACC,GAAA,EAAD,UACE,cAAC,GAAD,QAGJjR,SAASC,eAAe,SAM5B5T,K","file":"static/js/main.084db335.chunk.js","sourcesContent":["\r\nenum PartType {\r\n  UNKNOWN,\r\n  GATE,\r\n  INPUT,\r\n  OUTPUT,\r\n  COMPOSITE_BUILT_IN,\r\n  COMPOSITE_CUSTOM\r\n}\r\n\r\nexport default PartType;\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport {PinEventHandlers} from \"./Pin\";\r\nimport paper from 'paper';\r\nimport GateType from \"../enums/GateType\";\r\nimport {ComponentMouseEventHandler, MouseEventHandler} from \"../util/Types\";\r\nimport LogicComponent from \"../logic/LogicComponent\";\r\n\r\nexport interface GateEventHandlers<T = ComponentMouseEventHandler> extends PinEventHandlers {\r\n    onGateMouseDown?: T;\r\n    onGateMouseUp?: T;\r\n    onGateMouseMove?: T;\r\n    onGateContextMenu?: T;\r\n}\r\n\r\nexport interface GateProps {\r\n    scope?: paper.PaperScope,\r\n    handlers: GateEventHandlers<MouseEventHandler>,\r\n    type: GateType,\r\n    logicComponent: LogicComponent,\r\n}\r\n\r\ninterface IState {}\r\n\r\n/**\r\n * React Component implementation of LogicComponent\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Component extends React.Component<GateProps, IState> {\r\n    constructor(props: Readonly<GateProps>) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n        this.props.logicComponent.updateSelf = () => this.setState({});\r\n    }\r\n\r\n    /**\r\n     * Gets the translation and rotation transforms of the component.\r\n     */\r\n    getTransforms() {\r\n        let {x, y} = this.props.logicComponent.geometry.position\r\n        let offset_transform = `translate(${x} ${y})`\r\n        let rotate_transform = `rotate(${this.props.logicComponent.geometry.rotation})`\r\n        return [offset_transform, rotate_transform].join(' ')\r\n    }\r\n\r\n    render() {\r\n        let {onGateMouseDown, onGateMouseUp, onGateContextMenu, ...handlers} = this.props.handlers;\r\n\r\n        let logicPins = this.props.logicComponent.pins();\r\n        let pins = logicPins.map(p => p.render(handlers))\r\n\r\n        let gate = this.props.logicComponent;\r\n        let body = gate.body as paper.Item;\r\n\r\n        let classNames = ['component']\r\n\r\n        if (body.selected) {\r\n            classNames.push('selected')\r\n        }\r\n\r\n        return (\r\n            <g className={classNames.join(' ')}\r\n               data-ctype={gate.subtype}\r\n               data-uuid={gate.uuid}\r\n               transform={this.getTransforms()}\r\n            >\r\n                <g\r\n                    onMouseDown={this.props.handlers.onGateMouseDown}\r\n                    onMouseUp={this.props.handlers.onGateMouseUp}\r\n                    onMouseMove={this.props.handlers.onGateMouseMove}\r\n                    onContextMenu={this.props.handlers.onGateContextMenu}\r\n                >\r\n                    <path d={gate.d}\r\n                    />\r\n                    {gate.extraRender()}\r\n                </g>\r\n                {this.props.logicComponent.pins().map((p, i) => p.renderLabel(i))}\r\n                {pins}\r\n            </g>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Component;","import React from \"react\";\r\nimport paper from \"paper\";\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nimport PartType from \"../enums/PartType\";\r\nimport GateType from \"../enums/GateType\";\r\nimport LogicPin from \"./LogicPin\";\r\nimport Component, {GateEventHandlers, GateProps} from \"../components/Component\";\r\nimport LogicState from \"./LogicState\";\r\nimport LogicBoard from \"./LogicBoard\";\r\n\r\n\r\n/**\r\n * Indicates how the component may be interacted with in the UI.\r\n *\r\n * Associated state for any of these parameters should be placed in LogicComponentParams.\r\n * These fields are intended to be set\r\n *  */\r\nexport interface InteractionParams {\r\n  adjustableWidth?: boolean;\r\n  adjustableFieldWidth?: boolean;\r\n  minFieldWidth?: number;\r\n  maxFieldWidth?: number;\r\n  canMerge?: boolean;\r\n  isMux?: boolean;\r\n  hasDelay?: boolean;\r\n}\r\n\r\nexport interface LogicComponentParams {\r\n  /** The type of the component, required for serialization */\r\n  type: PartType;\r\n  /** The subtype of the component, required for serialization */\r\n  subtype: GateType;\r\n  /** The scope in which this component will be rendered and interacted with. */\r\n  scope: paper.PaperScope;\r\n  /**\r\n   * The number of input pins, excluding control pins.\r\n   *\r\n   * The specific meaning of this field depends on the specific LogicComponent implementation.\r\n   * */\r\n  fieldWidth?: number;\r\n  /** The number of bits of data handled on a single pin, excluding control pins. */\r\n  width?: number;\r\n  /**\r\n   * The propagation delay of this component\r\n   *\r\n   * More specifically, the amount of time it takes for a change in one or more of the inputs of this component to be\r\n   * reflected in the outputs.\r\n   * */\r\n  delay?: number;\r\n  /** The logical board where rendering and interaction are done, and where logical events will be handled. */\r\n  board?: LogicBoard;\r\n\r\n  /** Indicates if pins are merged.  This only has effect if the component can be merged. */\r\n  isMerged?: boolean;\r\n}\r\n\r\ninterface LogicComponentFullParams extends InteractionParams, LogicComponentParams {}\r\n\r\nexport interface UpdateGeometryParams {\r\n  fieldWidth: number,\r\n  width: number,\r\n}\r\n\r\n\r\n/**\r\n * Base class for all logical components which may or may not be rendered\r\n *\r\n * A logical component is any object which may send or receive logical signals.\r\n * */\r\nabstract class LogicComponent {\r\n  private __fieldWidth: number = -1;\r\n  private __width: number = -1;\r\n  private __d: string = \"\";\r\n  /** The unique id of this component, used for rendering, and serialization */\r\n  readonly uuid: string;\r\n  readonly type: PartType;\r\n  readonly subtype: GateType;\r\n  readonly scope: paper.PaperScope;\r\n  board?: LogicBoard;\r\n  /**\r\n   * The propagation delay of this component\r\n   *\r\n   * More specifically, the amount of time it takes for a change in one or more of the inputs of this component to be\r\n   * reflected in the outputs.\r\n   * */\r\n  delay: number;\r\n\r\n  readonly adjustableWidth: boolean;\r\n  readonly adjustableFieldWidth: boolean;\r\n  readonly minFieldWidth: number;\r\n  readonly maxFieldWidth: number;\r\n  readonly canMerge: boolean;\r\n  isMerged: boolean;\r\n  readonly isMux: boolean;\r\n  readonly hasDelay: boolean;\r\n\r\n  /** The shape of this component used for rendering and interactions */\r\n  body!: paper.Item;\r\n  /** A grouping of this component's body and pins which stores translation and rotation information. */\r\n  geometry!: paper.Item;\r\n  inputPins: LogicPin[] = [];\r\n  outputPins: LogicPin[] = [];\r\n  /**\r\n   * Callback which triggers a re-render on the rendered object\r\n   */\r\n  updateSelf?: () => void;\r\n\r\n  protected constructor(params: LogicComponentFullParams) {\r\n\r\n    this.uuid = uuidv4();\r\n    this.scope = params.scope\r\n    this.type = params.type;\r\n    this.subtype = params.subtype;\r\n    this.delay = params.delay ?? 1;\r\n\r\n    this.adjustableWidth = params.adjustableWidth ?? false;\r\n    this.adjustableFieldWidth = params.adjustableFieldWidth ?? false;\r\n    this.minFieldWidth = params.minFieldWidth ?? 1;\r\n    this.maxFieldWidth = params.maxFieldWidth ?? 1;\r\n    this.canMerge = params.canMerge ?? false;\r\n    this.isMerged = (params.isMerged ?? false) && this.canMerge;\r\n    this.isMux = params.isMux ?? false;\r\n    this.hasDelay = params.hasDelay ?? true;\r\n\r\n    this.board = params.board;\r\n\r\n    let width = params.width ?? 1;\r\n    let fieldWidth = params.fieldWidth ?? 0;\r\n\r\n    this.updateGeometry({width, fieldWidth});\r\n\r\n    this.__fieldWidth = params.fieldWidth ?? 0;\r\n    this.__width = params.width ?? 1;\r\n\r\n    this.reset();\r\n  }\r\n\r\n  private makeUpdateGeometryParams(params: Partial<UpdateGeometryParams>): UpdateGeometryParams {\r\n    return {\r\n      fieldWidth: params.fieldWidth ?? this.fieldWidth,\r\n      width: params.width ?? this.width,\r\n    }\r\n  }\r\n\r\n  /** Handler for updating this component's body and pins in response to property updates */\r\n  updateGeometry(params: Partial<UpdateGeometryParams>) {\r\n    let fullParams = this.makeUpdateGeometryParams(params);\r\n    let {Group, Point} = this.scope;\r\n    let selected = false;\r\n    if (this.body) {\r\n      this.body.remove();\r\n      selected = this.body.selected;\r\n    }\r\n    this.body = this.setUpBody(fullParams);\r\n    this.body.selected = selected;\r\n\r\n    if (!this.geometry) {\r\n      this.geometry = new Group();\r\n      this.geometry.pivot = new Point(0, 0);\r\n      this.geometry.applyMatrix = false;\r\n    }\r\n\r\n    this.setUpPins(fullParams);\r\n    this.geometry.addChild(this.body);\r\n    this.geometry.addChildren(this.pins().map(p => p.geometry as paper.Item));\r\n\r\n    this.__d = (this.body.exportSVG() as SVGElement).getAttribute('d')!;\r\n\r\n    this.body.data = {\r\n      type: 'Component',\r\n      logic: this,\r\n      geometry: this.geometry,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a bitmask of the specified width\r\n   *\r\n   * If no width is specified, defaults to this component's width.\r\n   * */\r\n  bitMask(numBits?: number): number {\r\n    numBits = numBits ?? this.width;\r\n    return (1 << numBits) - 1;\r\n  }\r\n\r\n  /** Returns all pins associated with this component */\r\n  pins(): LogicPin[] {\r\n    return [\r\n        ...this.inputPins,\r\n        ...this.outputPins,\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * Removes all logical pins on this component\r\n   *\r\n   * Removed pins are disconnected from all other pins, and all events associated with the pin are purged.\r\n   * */\r\n  clearPins() {\r\n    //TODO(dpasillas): remove logic events associated with pins\r\n    for (let pin of this.pins()) {\r\n      pin.remove();\r\n    }\r\n\r\n    this.inputPins = [];\r\n    this.outputPins = [];\r\n  }\r\n\r\n  /** Sets up all pins required for this component */\r\n  setUpPins(params: UpdateGeometryParams) {\r\n    this.inputPins = [...this.setUpInputPins(params), ...this.setUpSelectorPins(params)];\r\n    this.outputPins = this.setUpOutputPins(params);\r\n  }\r\n\r\n  /** Virtual method to set up input pins */\r\n  setUpInputPins(params: UpdateGeometryParams): LogicPin[] {\r\n    return [];\r\n  }\r\n\r\n  /** Virtual method to set up output pins. */\r\n  setUpOutputPins(params: UpdateGeometryParams): LogicPin[] {\r\n    return [];\r\n  }\r\n\r\n  /** Virtual method to set up selector pins, as required for -plexer type ICs. */\r\n  setUpSelectorPins(params: UpdateGeometryParams): LogicPin[] {\r\n    return []\r\n  }\r\n\r\n  collides(select: paper.Item): boolean {\r\n    let matrix = this.geometry.matrix;\r\n    let imatrix = matrix.inverted();\r\n    let body = this.body;\r\n    select.transform(imatrix)\r\n    let isSelected = body.intersects(select) || select.contains(body.position) || body.contains(select.position)\r\n    select.transform(matrix)\r\n    return isSelected\r\n  }\r\n\r\n  set fieldWidth(fieldWidth: number) {\r\n    if (this.__fieldWidth === fieldWidth) {\r\n      return;\r\n    }\r\n    this.updateGeometry({fieldWidth})\r\n    this.__fieldWidth = fieldWidth\r\n    this.updateSelf && this.updateSelf();\r\n  }\r\n\r\n  get fieldWidth(): number {\r\n    return this.__fieldWidth;\r\n  }\r\n\r\n  set width(width: number) {\r\n    if (this.__width === width) {\r\n      return;\r\n    }\r\n    this.updateGeometry({width});\r\n    this.__width = width;\r\n    this.updateSelf && this.updateSelf();\r\n  }\r\n\r\n  get width() {\r\n    return this.__width;\r\n  }\r\n\r\n  /** Path description of the component's body */\r\n  get d() {\r\n    return this.__d;\r\n  }\r\n\r\n  get selected() {\r\n    return this.body.selected;\r\n  }\r\n\r\n  set selected(selected: boolean) {\r\n    if (this.body.selected !== selected) {\r\n      this.body.selected = selected;\r\n      this.update()\r\n    }\r\n  }\r\n\r\n  translate(delta: paper.Point) {\r\n    this.geometry.translate(delta);\r\n    this.update();\r\n    this.pins()\r\n        .flatMap(pin => [...pin.connections.values()])\r\n        .forEach(connection => connection.update());\r\n  }\r\n\r\n  /** Sets the specified logical state on the specified pin after the propagation delay. */\r\n  postEvent(state: LogicState, pin?: LogicPin) {\r\n    pin = pin ?? this.outputPins[0];\r\n    this.board?.postEvent(state, pin, this.delay);\r\n  }\r\n\r\n  /** Delete this component, and all associated pins/connections */\r\n  remove() {\r\n    this.clearPins();\r\n    delete this.body.data.logic;\r\n    this.body.remove();\r\n    this.geometry.remove();\r\n    this.board?.removeComponent(this.uuid);\r\n  }\r\n\r\n  /**\r\n   * Virtual method to perform additional drawing on top of the base component\r\n   *\r\n   * For example, this may be used to draw pin labels, light from activated bulbs, or the interactive part of a button.\r\n   * */\r\n  extraRender(): React.ReactElement {\r\n    return <></>;\r\n  }\r\n\r\n  /** Maps this logical component to a React Component */\r\n  render(handlers?: GateEventHandlers): React.ReactElement {\r\n    return (\r\n        <Component\r\n            key={this.uuid}\r\n            {...this.getRenderParams(handlers)}/>\r\n    );\r\n  }\r\n\r\n  /** Triggers a re-render */\r\n  update() {\r\n    this.updateSelf && this.updateSelf();\r\n  }\r\n\r\n  /** Specifies required properties for rendering */\r\n  getRenderParams(handlers?: GateEventHandlers): Required<GateProps> {\r\n    return {\r\n      type: this.subtype,\r\n      logicComponent: this,\r\n      scope: this.scope,\r\n      handlers: {\r\n        onGateMouseDown: handlers?.onGateMouseDown?.bind(undefined, this),\r\n        onGateMouseUp: handlers?.onGateMouseUp?.bind(undefined, this),\r\n        onGateMouseMove: handlers?.onGateMouseMove?.bind(undefined, this),\r\n        onGateContextMenu: handlers?.onGateContextMenu?.bind(undefined, this),\r\n        onPinMouseDown: handlers?.onPinMouseDown,\r\n        onPinMouseUp: handlers?.onPinMouseUp,\r\n        onPinMouseMove: handlers?.onPinMouseMove,\r\n        onPinContextMenu: handlers?.onPinContextMenu,\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /** Sets up the shape of this component */\r\n  abstract setUpBody(params: UpdateGeometryParams): paper.Item\r\n  /** Performs a logical operation */\r\n  abstract operate(): void\r\n  /** Returns the component to its initial state at power up */\r\n  reset() {\r\n    for (let pin of this.pins()) {\r\n      pin.reset();\r\n    }\r\n  }\r\n}\r\n\r\nexport default LogicComponent;","import paper from \"paper\";\r\n\r\n/**\r\n * Creates and sets up a paper scope\r\n *\r\n * Primarily intended to allow initializing scopes inline as class or global variables.\r\n * */\r\nexport function makeAndSetupScope() {\r\n  let scope = new paper.PaperScope();\r\n  // @ts-ignore\r\n  scope.setup();\r\n  // Performance testing indicated that paperjs was spending a lot of time drawing the project.\r\n  // This paperjs isn't being used to draw directly to a canvas, this is useless, so we make this a no-op.\r\n  // @ts-ignore\r\n  scope.project.draw = () => {}\r\n  return scope;\r\n}","import {makeAndSetupScope} from \"./util/PaperHelp\";\r\n\r\nexport const GLOBAL_SCOPE = makeAndSetupScope();\r\nexport const BULB_PATH = \"M 27.3137084989848 27.3137084989848 A 16 16 90 1 0 4.68629150101524 27.3137084989848 Q 9.238107812 31.86552481 10.71553501 36 Q 11.21553501 37.39921453 11.71553501 40 C 12.21553501 42.60078547 19.78446499 42.60078547 20.28446499 40 Q 20.78446499 37.39921453 21.28446499 36 Q 22.76189219 31.86552481 27.3137085 27.3137085\";\r\nexport const AND_PATH = \"M 0 0 L 16 0 A 16 16 -180 0 1 16 32 L 0 32 L 0 0 Z\";\r\nexport const OR_PATH = \"M 0 0 L 8 0 Q 22.72 0 32 16 Q 22.72 32 8 32 L 0 32 Q 8 16 0 0 Z\";\r\nconst XOR_TAIL = \"M -4 0 Q 4 16 -4 32 Q 4 16 -4 0 Z\";\r\nexport const XOR_PATH = OR_PATH + \" \" + XOR_TAIL;\r\nexport const BUF_PATH = \"M 0 0 L 32 16 L 0 32 L 0 0 Z\";\r\nexport const PIN_PATH = \"M -4 -2 L 18.5 -2 L 20 0 L 18.5 2 L -4 2 Z\";\r\nexport const NOT_PATH = \"M -4 0 A 4 4 180 0 1 4 0 A 4 4 180 0 1 -4 0 Z\";\r\nexport const NOT_PIN_PATH = NOT_PATH + \" M 3.47 -2 L 18.5 -2 L 20 0 L 18.5 2 L 3.467 2 A 4 4 -20 0 0 3.467 -2 Z\";","import {v4 as uuidv4} from 'uuid';\r\nimport LogicComponent from \"./LogicComponent\";\r\nimport * as Constants from \"../Constants\";\r\nimport Pin, {PinEventHandlers, PinProps} from \"../components/Pin\";\r\nimport React from \"react\";\r\nimport LogicState from \"./LogicState\";\r\nimport LogicConnection from \"./LogicConnection\";\r\nimport * as paper from \"paper\";\r\nimport LogicBoard from \"./LogicBoard\";\r\n\r\nexport enum PinOrientation {\r\n  UNKNOWN,\r\n  UP,\r\n  DOWN,\r\n  LEFT,\r\n  RIGHT,\r\n}\r\n\r\n/** Indicates whether a pin receives or sends logic signals */\r\nexport enum PinType {\r\n  UNKNOWN,\r\n  INPUT,\r\n  OUTPUT,\r\n}\r\n\r\ninterface IParams {\r\n  /** LogicComponent which receives or sends signals from this pin */\r\n  parent: LogicComponent,\r\n  /** Indicates whether this pin receives or sends logic signals */\r\n  pinType: PinType,\r\n  /** Rendering hint to show a pin as negated */\r\n  not?: boolean,\r\n  /** The number of bits of data which may be received or transmitted by this pin */\r\n  width?: number,\r\n  /** Direction in which the pin is mounted on the parent */\r\n  orientation?: PinOrientation,\r\n  /** The board which processes events, and optionally renders this pin */\r\n  board?: LogicBoard,\r\n  label?: string,\r\n}\r\n\r\n/**\r\n * Logical representation of a pin which may or may not be rendered\r\n *\r\n * A pin is any input or output to/from a LogicComponent\r\n * */\r\nclass LogicPin {\r\n  private parent: LogicComponent;\r\n  private connectionAnchor?: paper.Point;\r\n  readonly uuid: string;\r\n  board?: LogicBoard;\r\n  width: number;\r\n  geometry?: paper.PathItem;\r\n  not: boolean;\r\n  orientation: PinOrientation;\r\n  pinType: PinType;\r\n  state: LogicState;\r\n  label?: string;\r\n  connections: Map<string /* UUID of connected pin */, LogicConnection> = new Map<string, LogicConnection>();\r\n  /**\r\n   * Callback which triggers a re-render on the rendered object\r\n   */\r\n  updateSelf?: () => void;\r\n\r\n  constructor(params: IParams) {\r\n    this.uuid = uuidv4();\r\n    this.parent = params.parent;\r\n    this.width = params.width ?? 1;\r\n    this.orientation = params.orientation ?? PinOrientation.LEFT;\r\n    this.pinType = params.pinType;\r\n    this.not = params.not ?? false;\r\n    this.state = new LogicState({});\r\n    this.board = params.board;\r\n    this.label = params.label;\r\n\r\n    this.board?.addPin(this);\r\n  }\r\n\r\n  /** Helper function which causes logic states to propagate */\r\n  setLogicState(state: LogicState) {\r\n    this.state = state;\r\n    switch (this.pinType) {\r\n      case PinType.INPUT:\r\n        this.parent.operate();\r\n        break;\r\n      case PinType.OUTPUT:\r\n        this.updateNext();\r\n        break;\r\n      default:\r\n        throw new Error();\r\n    }\r\n  }\r\n\r\n  /** Updates all pins with connections leading from this pin */\r\n  updateNext(force: boolean = false) {\r\n    if (this.pinType !== PinType.OUTPUT) {\r\n      throw new Error();\r\n    }\r\n\r\n    for (let connection of this.connections.values()) {\r\n      connection.update();\r\n      let inputPin = connection.sink;\r\n      // No need to simulate events which won't affect the output\r\n      if (force || this.state.ne(inputPin.state)) {\r\n        inputPin.setLogicState(this.state)\r\n      }\r\n      // This ensures that self referencing components (such as Clock) operates appropriately\r\n      inputPin.parent.operate();\r\n    }\r\n  }\r\n\r\n  /** Removes all connections associated with this pin */\r\n  disconnect() {\r\n    this.connections.forEach((c) => c.remove());\r\n    this.connections.clear();\r\n  }\r\n\r\n  /** Indicates whether this pin may be connected to another */\r\n  canConnect(other: LogicPin) {\r\n    if (this.width !== other.width) {\r\n      return false;\r\n    }\r\n\r\n    switch (this.pinType) {\r\n      case PinType.INPUT:\r\n        return other.pinType === PinType.OUTPUT;\r\n      case PinType.OUTPUT:\r\n        return other.pinType === PinType.INPUT;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** Creates a connection between this pin with another */\r\n  connectTo(other: LogicPin): LogicConnection | null {\r\n    if (!this.canConnect(other)) {\r\n      return null;\r\n    }\r\n\r\n    if (this.pinType === PinType.INPUT) {\r\n      if (this.isConnectedTo(other)) {\r\n        return null;\r\n      } else {\r\n        this.disconnect()\r\n      }\r\n      let connection = new LogicConnection({source: other, sink: this, board: this.board})\r\n      this.connections.set(connection.uuid, connection);\r\n      other.connections.set(connection.uuid, connection);\r\n      this.setLogicState(other.state);\r\n      return connection;\r\n    } else {\r\n      return other.connectTo(this);\r\n    }\r\n  }\r\n\r\n  /** Tests if connection exists between this pin and another */\r\n  isConnectedTo(other: LogicPin): boolean {\r\n    return this.connections.has(other.uuid);\r\n  }\r\n\r\n  remove() {\r\n    this.disconnect()\r\n    this.geometry?.remove();\r\n    delete this.geometry?.data.logic\r\n    this.board?.removePin(this.uuid);\r\n  }\r\n\r\n  renderLabel(i: number): React.ReactElement | undefined {\r\n    if (!this.label) {\r\n      return undefined;\r\n    }\r\n\r\n    let textClass: string;\r\n    switch (this.orientation) {\r\n      case PinOrientation.UP:\r\n        textClass = \"top\";\r\n        break;\r\n      case PinOrientation.DOWN:\r\n        textClass = \"bottom\";\r\n        break;\r\n      case PinOrientation.LEFT:\r\n        textClass = \"left\";\r\n        break;\r\n      case PinOrientation.RIGHT:\r\n        textClass = \"right\";\r\n        break;\r\n      default:\r\n        textClass = \"\";\r\n    }\r\n\r\n    let [text, subscript] = this.label.split(\"__\");\r\n    return (\r\n        <text key={i} className={textClass} x={this.pos.x} y={this.pos.y}>\r\n          {text}\r\n          {subscript && <tspan>{subscript}</tspan>}\r\n        </text>\r\n    );\r\n  }\r\n\r\n  render(handlers?: PinEventHandlers): React.ReactElement {\r\n    return (\r\n        <Pin key={this.uuid}\r\n             {...this.getRenderParams(handlers)}\r\n        />\r\n    )\r\n  }\r\n\r\n  getRenderParams(handlers?: PinEventHandlers): PinProps {\r\n    return {\r\n      pin: this,\r\n      type: this.pinType,\r\n      handlers: {\r\n        onPinMouseUp: handlers?.onPinMouseUp?.bind(undefined, this),\r\n        onPinMouseDown: handlers?.onPinMouseDown?.bind(undefined, this),\r\n        onPinMouseMove: handlers?.onPinMouseMove?.bind(undefined, this),\r\n        onPinContextMenu: handlers?.onPinContextMenu?.bind(undefined, this),\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Places the pin at a location on the parent, and subtracts the parent's body from its geometry. */\r\n  updateGeometry(pos: paper.Point) {\r\n    if(this.geometry) {\r\n      this.geometry.remove()\r\n    }\r\n    let {CompoundPath, Path, Point} = this.parent.scope;\r\n    let pin;\r\n    if (this.not) {\r\n      pin = new CompoundPath(Constants.NOT_PIN_PATH)\r\n    } else {\r\n      pin = new Path(Constants.PIN_PATH);\r\n    }\r\n    pin.pivot = new Point(0, 0);\r\n\r\n    switch (this.orientation) {\r\n      case PinOrientation.UP:\r\n        pin.rotate(-90);\r\n        this.connectionAnchor = new Point(0, -18);\r\n        break;\r\n      case PinOrientation.DOWN:\r\n        pin.rotate(90);\r\n        this.connectionAnchor = new Point(0, 18);\r\n        break;\r\n      case PinOrientation.LEFT:\r\n        pin.rotate(180);\r\n        this.connectionAnchor = new Point(-18, 0);\r\n        break;\r\n      case PinOrientation.RIGHT:\r\n        this.connectionAnchor = new Point(18, 0);\r\n        break;\r\n      default:\r\n        throw new Error(\"Unknown pin orientation\")\r\n    }\r\n\r\n    pin.translate(pos);\r\n    this.geometry = pin.subtract(this.parent.body as paper.PathItem);\r\n    pin.remove();\r\n    this.geometry.data.type = 'Pin'\r\n    this.geometry.data.logical = this;\r\n  }\r\n\r\n  /** Triggers a re-render */\r\n  update() {\r\n    this.updateSelf && this.updateSelf();\r\n  }\r\n\r\n  /** Maps a point from local coordinates to svg coordinates */\r\n  transform(p: paper.Point): paper.Point {\r\n    return this.parent.geometry.matrix.transform(p);\r\n  }\r\n\r\n  get rotation(): number {\r\n    return this.parent.geometry.rotation;\r\n  }\r\n\r\n  get pos(): paper.Point {\r\n    return this.geometry!.position\r\n  }\r\n\r\n  get selected(): boolean {\r\n    return this.geometry?.selected ?? false;\r\n  }\r\n\r\n  set selected(selected) {\r\n    if (this.geometry && this.geometry.selected !== selected) {\r\n      this.geometry.selected = selected\r\n      this.update()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a tuple containing a point near the end of the pin, and the direction the pin is pointing\r\n   *\r\n   * This information is used to render connections, and interaction aids.\r\n   * */\r\n  get anchor(): [paper.Point, paper.Point] {\r\n    return [\r\n      this.pos.add(this.connectionAnchor!),\r\n      this.connectionAnchor!.rotate(this.rotation, new this.parent.scope.Point(0, 0)).divide(18)]\r\n  }\r\n\r\n  collides(select: paper.Item): boolean {\r\n    let body = this.geometry!\r\n    let matrix = body.parent.matrix;\r\n    let imatrix = matrix.inverted();\r\n    select.transform(imatrix)\r\n    let isSelected = body.intersects(select) || select.contains(body.position) || body.contains(select.position)\r\n    select.transform(matrix)\r\n    return isSelected;\r\n  }\r\n\r\n  /**\r\n   * Creates a bitmask of the specified width\r\n   *\r\n   * If no width is specified, defaults to this component's width.\r\n   * */\r\n  bitMask(numBits?: number): number {\r\n    numBits = numBits ?? this.width;\r\n    return (1 << numBits) - 1;\r\n  }\r\n\r\n  /** Returns a pin to its default state */\r\n  reset() {\r\n    // If a connection to an input pin already exists, it will be handled by the output pin.\r\n    if (this.pinType === PinType.INPUT && this.connections.size !== 0) {\r\n        return\r\n    }\r\n\r\n    if (this.pinType === PinType.INPUT) {\r\n      this.setLogicState(new LogicState({z: this.bitMask()}))\r\n      this.parent.operate();\r\n    } else {\r\n      this.setLogicState(new LogicState({x: this.bitMask()}))\r\n      this.updateNext(true);\r\n    }\r\n  }\r\n}\r\n\r\nexport default LogicPin;","import React from \"react\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\n\r\nimport LogicPin, {PinType} from \"../logic/LogicPin\";\r\nimport {MouseEventHandler, PinMouseEventHandler} from \"../util/Types\";\r\n\r\nexport interface PinEventHandlers<T = PinMouseEventHandler> {\r\n    onPinMouseDown?: T;\r\n    onPinMouseUp?: T;\r\n    onPinMouseMove?: T;\r\n    onPinContextMenu?: T;\r\n}\r\n\r\nexport interface PinProps {\r\n    // @ts-ignore\r\n    pin: LogicPin,\r\n    type: PinType,\r\n    handlers: PinEventHandlers<MouseEventHandler>\r\n}\r\n\r\ninterface IState {\r\n\r\n}\r\n\r\n/**\r\n * React Component implementation of LogicPin\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Pin extends React.Component<PinProps, IState> {\r\n    constructor(props: PinProps) {\r\n        super(props);\r\n        this.state = {};\r\n\r\n        this.props.pin.updateSelf = () => this.setState({});\r\n    }\r\n    render() {\r\n        let data = this.props.pin.geometry!.data;\r\n        this.props.pin.geometry!.data = {}\r\n        //@ts-ignore\r\n        let d = this.props.pin.geometry!.exportSVG().getAttribute('d')\r\n        this.props.pin.geometry!.data = data;\r\n        let pathAttributes = {\r\n            d: d\r\n        }\r\n\r\n        let classNames = [\r\n            'pin'\r\n        ];\r\n\r\n        if (this.props.pin.geometry?.selected) {\r\n            classNames.push('selected');\r\n        }\r\n\r\n        let [anchor, ] = this.props.pin.anchor;\r\n\r\n\r\n        return (\r\n            <Tooltip title={`Width: ${this.props.pin.width}`}>\r\n                <g key={this.props.pin.uuid} className={classNames.join(' ')}\r\n                   onMouseDown={this.props.handlers?.onPinMouseDown}\r\n                   onMouseUp={this.props.handlers?.onPinMouseUp}\r\n                   onContextMenu={() => console.log(\"context p!\")}\r\n                >\r\n                    <circle className=\"anchor\" cx={anchor.x} cy={anchor.y} r={5}/>\r\n                    <path {...pathAttributes}/>\r\n                    {this.props.pin.width > 1 && <path className=\"wide\" {...pathAttributes}/>}\r\n                </g>\r\n            </Tooltip>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pin;","\r\ninterface IParams {\r\n  v?: number; // non-error value\r\n  x?: number; // unknown\r\n  z?: number; // high-impedance\r\n}\r\n\r\n/**\r\n * An arbitrary-width logical state with logical value, and error states.\r\n *\r\n * For every logical bit at a given position n, at most one of v, x, or z should be set for bit n.\r\n *\r\n * @example\r\n * // Returns logical state '01xz1'\r\n * new LogicState({v: 0b01001, x: 0b00100, z: 0b00010})\r\n * */\r\nclass LogicState {\r\n  /** Represents whether bits are on or off */\r\n  v: number;\r\n  /** Represents whether bits are in an unknown state */\r\n  x: number;\r\n  /** Represents whether bits are disconnected from an input source */\r\n  z: number;\r\n\r\n  constructor(params: IParams) {\r\n    this.v = params.v ?? 0;\r\n    this.x = params.x ?? 0;\r\n    this.z = params.z ?? 0;\r\n  }\r\n\r\n  eq(other: LogicState) {\r\n    return (\r\n        this.v === other.v &&\r\n        this.x === other.x &&\r\n        this.z === other.z\r\n    );\r\n  }\r\n\r\n  ne(other: LogicState) {\r\n    return (\r\n        this.v !== other.v ||\r\n        this.x !== other.x ||\r\n        this.z !== other.z\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a new negated the logical state while keeping only the specified number bits\r\n   *\r\n   * @example\r\n   * // Creates logical state '01xz1'\r\n   * let state = new LogicState({v: 0b01001, x: 0b00100, z: 0b00010})\r\n   * // Negates logical state to '10xz1'\r\n   * state.negate(5)\r\n   * */\r\n  negated(numBits: number) {\r\n    // (2^n) - 1 will result in a mask with the lower n bits set.\r\n    let mask = (1 << numBits) - 1\r\n\r\n    // Bits with corresponding errors should be masked out\r\n    let v = ~this.v & ~this.x & ~this.z & mask;\r\n    return new LogicState({\r\n      v: v,\r\n      x: this.x,\r\n      z: this.z\r\n    });\r\n  }\r\n}\r\n\r\nexport default LogicState;","import React from \"react\";\r\nimport LogicConnection from \"../logic/LogicConnection\";\r\n\r\ninterface IProps {\r\n  connection: LogicConnection;\r\n}\r\n\r\ninterface IState {}\r\n\r\n/**\r\n * React Component implementation of LogicConnection\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Connection extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {}\r\n\r\n    this.props.connection.updateSelf = () => this.setState({});\r\n  }\r\n\r\n  render() {\r\n\r\n    let {source, sink} = this.props.connection;\r\n\r\n    let [ianchor, idir] = source.anchor;\r\n    let [oanchor, odir] = sink.anchor;\r\n\r\n    ianchor = source.transform(ianchor);\r\n    oanchor = sink.transform(oanchor);\r\n\r\n    let dist = Math.min(ianchor.getDistance(oanchor), 30)\r\n\r\n    let ic = ianchor.add(idir.multiply(dist));\r\n    let oc = oanchor.add(odir.multiply(dist));\r\n\r\n    let {x: ix, y: iy} = ianchor;\r\n    let {x: ox, y: oy} = oanchor;\r\n\r\n    // console.log(`Connection (${ix}, ${iy}) - (${ox}, ${oy})`)\r\n\r\n    let {x: icx, y: icy} = ic;\r\n    let {x: ocx, y: ocy} = oc;\r\n\r\n    let r = 1\r\n    // Render each endpoint of the connection as a circle.\r\n    // Each endpoint is split into two half circles, as it's impossible to render a full circle with a single arc\r\n    // command.\r\n    let end1_1 = `M ${ix - r} ${iy} A ${r} ${r} 180 0 0 ${ix + r} ${iy} `\r\n    let end1_2 = `A ${r} ${r} 180 0 0 ${ix - r} ${iy} `\r\n    let end2_1 = `M ${ox - r} ${oy} A ${r} ${r} 180 0 0 ${ox + r} ${oy} `\r\n    let end2_2 = `A ${r} ${r} 180 0 0 ${ox - r} ${oy} `\r\n    // The path of a connection is both endpoints drawn as circles, connected by a bezier curve.\r\n    let d = `${end1_1} ${end1_2} M ${ix} ${iy} C ${icx} ${icy} ${ocx} ${ocy} ${ox} ${oy} ${end2_1} ${end2_2}`;\r\n\r\n    let fillClass;\r\n    let state = this.props.connection.source.state;\r\n    if (state.x) {\r\n      fillClass = \"error\"\r\n    } else if (state.z) {\r\n      fillClass = \"error\"\r\n    } else if (state.v) {\r\n      fillClass = \"on\";\r\n    } else {\r\n      fillClass = \"off\"\r\n    }\r\n\r\n    /*\r\n    The connection is drawn twice with different stroke widths:\r\n\r\n    - First to draw the outline of the curve.\r\n    - Second to draw the interior.\r\n\r\n    This simulates the appearance the component was rendered as a single path with a normal fill and stroke.\r\n    The alternative is to compute the path offset curve, which is difficult to compute.\r\n    */\r\n    return (\r\n        <g className=\"connection\">\r\n          <path className=\"connection-outer\" d={d}/>\r\n          <path fillRule=\"nonzero\"\r\n              className={`connection-inner ${fillClass}`} d={d}/>\r\n          { this.props.connection.source.width > 1 &&\r\n            <path fillRule=\"nonzero\" className=\"connection-inner bus\" d={d}/>}\r\n        </g>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Connection;","import LogicPin from \"./LogicPin\";\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport Connection from \"../components/Connection\";\r\nimport LogicBoard from \"./LogicBoard\";\r\n\r\ninterface IParams {\r\n  uuid?: string;\r\n  source: LogicPin;\r\n  sink: LogicPin;\r\n  board?: LogicBoard;\r\n  hidden?: boolean;\r\n}\r\n\r\n/**\r\n * Class representing a connection between two pins\r\n *\r\n * Rendering is optional\r\n * */\r\nclass LogicConnection {\r\n  uuid: string;\r\n  source: LogicPin;\r\n  sink: LogicPin;\r\n  hidden: boolean;\r\n  board?: LogicBoard;\r\n  /**\r\n   * Callback which triggers a re-render on the rendered object\r\n   */\r\n  updateSelf?: () => void;\r\n\r\n  constructor(params: IParams) {\r\n    this.uuid = params.uuid ?? uuidv4();\r\n    this.source = params.source;\r\n    this.sink = params.sink;\r\n    this.hidden = params.hidden ?? false;\r\n    this.board = params.board;\r\n  }\r\n\r\n  remove() {\r\n    this.source.connections.delete(this.uuid);\r\n    this.sink.connections.delete(this.uuid);\r\n    this.board?.removeConnection(this.uuid);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Connection key={this.uuid} connection={this} />\r\n    );\r\n\r\n  }\r\n\r\n  /** Triggers a re-render */\r\n  update() {\r\n    this.updateSelf && this.updateSelf();\r\n  }\r\n}\r\n\r\nexport default LogicConnection;","\r\nenum GateType {\r\n  UNKNOWN,\r\n  AND,\r\n  NAND,\r\n  OR,\r\n  NOR,\r\n  XOR,\r\n  XNOR,\r\n  BUF,\r\n  NOT,\r\n}\r\n\r\nexport default GateType;","import paper from \"paper\";\r\n\r\nimport LogicComponent, {LogicComponentParams, UpdateGeometryParams} from \"./LogicComponent\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\nimport GateType from \"../enums/GateType\";\r\nimport * as Constants from \"../Constants\";\r\nimport LogicState from \"./LogicState\";\r\n\r\n/** Helper function which maps Gate types to svg paths.*/\r\nfunction pathFromGateType(type: GateType) {\r\n  switch (type) {\r\n    case GateType.AND:\r\n    case GateType.NAND:\r\n      return Constants.AND_PATH;\r\n    case GateType.OR:\r\n    case GateType.NOR:\r\n      return Constants.OR_PATH;\r\n    case GateType.XOR:\r\n    case GateType.XNOR:\r\n      return Constants.XOR_PATH;\r\n    case GateType.BUF:\r\n    case GateType.NOT:\r\n      return Constants.BUF_PATH;\r\n    default:\r\n      throw new Error(\"Unsupported Gate Type\")\r\n  }\r\n}\r\n\r\n/** Helper function which indicates of a particular gate type is negated. */\r\nfunction isNot(type: GateType) {\r\n  switch (type) {\r\n    case GateType.NAND:\r\n    case GateType.NOR:\r\n    case GateType.XNOR:\r\n    case GateType.NOT:\r\n      return true;\r\n    case GateType.AND:\r\n    case GateType.OR:\r\n    case GateType.XOR:\r\n    case GateType.BUF:\r\n      return false;\r\n    default:\r\n      throw new Error(`Unsupported Gate Type(${type})`)\r\n  }\r\n}\r\n\r\nfunction minPins(type: GateType): number {\r\n  switch (type) {\r\n    case GateType.AND:\r\n    case GateType.NAND:\r\n    case GateType.OR:\r\n    case GateType.NOR:\r\n    case GateType.XOR:\r\n    case GateType.XNOR:\r\n      return 2;\r\n    case GateType.BUF:\r\n    case GateType.NOT:\r\n      return 1;\r\n    default:\r\n      throw new Error(`Unsupported Gate Type(${type})`)\r\n  }\r\n}\r\n\r\nfunction maxPins(type: GateType): number {\r\n  switch (type) {\r\n    case GateType.AND:\r\n    case GateType.NAND:\r\n    case GateType.OR:\r\n    case GateType.NOR:\r\n    case GateType.XOR:\r\n    case GateType.XNOR:\r\n      return 4;\r\n    case GateType.BUF:\r\n    case GateType.NOT:\r\n      return 1;\r\n    default:\r\n      throw new Error(`Unsupported Gate Type(${type})`)\r\n  }\r\n}\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"type\"> {}\r\n\r\n/** Primitive Logic Gates */\r\nclass LogicGate extends LogicComponent {\r\n  static opFuncs: Record<GateType, () => LogicState> = {\r\n    [GateType.AND]: LogicGate.prototype.opAnd,\r\n    [GateType.NAND]: LogicGate.prototype.opNand,\r\n    [GateType.OR]: LogicGate.prototype.opOr,\r\n    [GateType.NOR]: LogicGate.prototype.opNor,\r\n    [GateType.XOR]: LogicGate.prototype.opXor,\r\n    [GateType.XNOR]: LogicGate.prototype.opXnor,\r\n    [GateType.BUF]: LogicGate.prototype.opBuf,\r\n    [GateType.NOT]: LogicGate.prototype.opNot,\r\n    [GateType.UNKNOWN]: () => {throw new Error(\"Unsupported type\")}\r\n  }\r\n\r\n  private readonly opFunc: () => LogicState;\r\n\r\n  constructor(params: IParams) {\r\n    super({\r\n      ...params,\r\n      type: PartType.GATE,\r\n      fieldWidth: Math.min(2, maxPins(params.subtype)),\r\n      adjustableWidth: true,\r\n      adjustableFieldWidth: maxPins(params.subtype) > 1,\r\n      minFieldWidth: minPins(params.subtype),\r\n      maxFieldWidth: maxPins(params.subtype),\r\n    });\r\n    this.opFunc = LogicGate.opFuncs[this.subtype].bind(this)\r\n  }\r\n\r\n  /* BEGIN logical gate implementations */\r\n  opAnd(): LogicState {\r\n    let value = this.bitMask();\r\n    let unknown = 0;\r\n    let high_impedance = 0;\r\n\r\n    // Keep track of input zeroes so we can ignore errors from other pins at these outputs\r\n    let zeroes = 0;\r\n\r\n    for (let pin of this.inputPins) {\r\n        // Count zeroes only if no error state exists for that bit.\r\n        zeroes |= ~(pin.state.v | pin.state.x | pin.state.z)\r\n        value &= pin.state.v;\r\n        unknown |= pin.state.x;\r\n        // Treat input z as unknown.\r\n        unknown |= pin.state.z;\r\n    }\r\n\r\n    // An input zero sets the corresponding output bit to zero, so we clear the error states on these bits.\r\n    // Because 0 AND X = 0\r\n    unknown &= ~zeroes;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance,\r\n    });\r\n  }\r\n\r\n  opNand(): LogicState {\r\n    let state = this.opAnd();\r\n    return state.negated(this.width);\r\n  }\r\n\r\n  opOr(): LogicState{\r\n    let value = 0;\r\n    let unknown = 0;\r\n    let high_impedance = 0;\r\n\r\n    for (let pin of this.inputPins) {\r\n      value |= pin.state.v;\r\n      unknown |= pin.state.x;\r\n      // Treat input z as unknown.\r\n      unknown |= pin.state.z;\r\n    }\r\n\r\n    // Unlike AND gates, we can use the value above to indicate an error-free one at an input.\r\n    // An input one sets the corresponding output bit to one, so we clear the error states on these bits.\r\n    // Because 1 OR X = 1\r\n    unknown &= ~value;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance,\r\n    });\r\n  }\r\n\r\n  opNor(): LogicState {\r\n    let state = this.opOr();\r\n    return state.negated(this.width);\r\n  }\r\n\r\n  opXor(): LogicState {\r\n    let value = 0;\r\n    let unknown = 0;\r\n    let high_impedance = 0;\r\n\r\n    for (let pin of this.inputPins) {\r\n      value ^= pin.state.v;\r\n      unknown |= pin.state.x;\r\n      // Treat input z as unknown.\r\n      unknown |= pin.state.z;\r\n    }\r\n\r\n    // We don't ignore errors at inputs for XOR because we need all inputs in every case to determine the output.\r\n\r\n    return new LogicState({\r\n      v: value & ~unknown,\r\n      x: unknown,\r\n      z: high_impedance,\r\n    });\r\n  }\r\n\r\n  opXnor(): LogicState {\r\n    let state = this.opXor();\r\n    return state.negated(this.width);\r\n  }\r\n\r\n  opBuf(): LogicState {\r\n    let [inputPin,] = this.inputPins;\r\n    let value = inputPin.state.v;\r\n    let unknown = inputPin.state.x | inputPin.state.z;\r\n    let high_impedance = 0;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance\r\n    })\r\n  }\r\n\r\n  opNot(): LogicState {\r\n    let [inputPin,] = this.inputPins;\r\n    let unknown = inputPin.state.x | inputPin.state.z;\r\n    let value = ~inputPin.state.v & this.bitMask() & ~unknown;\r\n    let high_impedance = 0;\r\n\r\n    return new LogicState({\r\n      v: value,\r\n      x: unknown,\r\n      z: high_impedance\r\n    });\r\n  }\r\n\r\n  operate(): void {\r\n    if (!this.opFunc) {\r\n      return;\r\n    }\r\n    let logicState = this.opFunc();\r\n    this.postEvent(logicState, this.outputPins[0])\r\n  }\r\n\r\n\r\n  setUpBody(): paper.Item {\r\n    let {CompoundPath} = this.scope;\r\n    return new CompoundPath(pathFromGateType(this.subtype))\r\n  }\r\n\r\n  setUpInputPins({fieldWidth, width}: UpdateGeometryParams): LogicPin[] {\r\n    // Keep pins that fit within tne new field width to maintain old connections\r\n    let inputPins = this.inputPins.slice(0, fieldWidth);\r\n    let nuke = this.inputPins.slice(fieldWidth);\r\n    nuke.forEach(p => p.remove());\r\n\r\n    for (let i = Math.max(this.fieldWidth, 0); i < fieldWidth; ++i) {\r\n      inputPins.push(new LogicPin({\r\n        parent: this,\r\n        pinType: PinType.INPUT,\r\n        orientation: PinOrientation.LEFT,\r\n        board: this.board,\r\n        width: width,\r\n      }))\r\n    }\r\n\r\n    if (width !== this.width) {\r\n      inputPins.forEach(pin => {\r\n        pin.disconnect();\r\n        pin.width = width\r\n      })\r\n    }\r\n\r\n    let offset =\r\n        fieldWidth === 1 ? 16 :\r\n            fieldWidth === 2 ? 32 / 3 :\r\n                fieldWidth === 3 ? 6 :\r\n                    2;\r\n    let spacing =\r\n        fieldWidth === 2 ? 32 / 3 :\r\n            fieldWidth === 3 ? 10 :\r\n                28 / 3;\r\n\r\n    for (let i = 0; i < fieldWidth; ++i) {\r\n      inputPins[i].updateGeometry(new paper.Point(0, offset + i * spacing));\r\n    }\r\n\r\n\r\n\r\n    return inputPins;\r\n  }\r\n\r\n  setUpOutputPins({width}: UpdateGeometryParams): LogicPin[] {\r\n    if (this.outputPins.length > 0) {\r\n      if (width !== this.width) {\r\n        this.outputPins.forEach(pin => pin.width = width)\r\n      }\r\n      return this.outputPins;\r\n    }\r\n    let pin = new LogicPin({\r\n      parent: this,\r\n      pinType: PinType.OUTPUT,\r\n      orientation: PinOrientation.RIGHT,\r\n      not: isNot(this.subtype),\r\n      board: this.board,\r\n      width: width,\r\n    })\r\n    pin.updateGeometry(new paper.Point(32, 16))\r\n\r\n    return [pin];\r\n  }\r\n}\r\n\r\nexport default LogicGate;","import paper from \"paper/dist/paper-core\";\r\nimport React from \"react\";\r\n\r\nimport LogicComponent, {LogicComponentParams} from \"./LogicComponent\";\r\nimport {BULB_PATH} from \"../Constants\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"type\"> {\r\n}\r\n\r\n/** Light Bulb implementation */\r\nclass Bulb extends LogicComponent {\r\n  on: boolean = false;\r\n  constructor(params: IParams) {\r\n    super({\r\n      ...params,\r\n      type: PartType.OUTPUT,\r\n      hasDelay: false,\r\n    });\r\n  }\r\n\r\n  operate(): void {\r\n    this.on = this.inputPins[0].state.v === 1;\r\n    this.update();\r\n  }\r\n\r\n  /** Renders the glow of the bulb if the bulb is in the on state */\r\n  extraRender(): React.ReactElement {\r\n    // TODO: Render the glow on top of all other components.\r\n    //   SVG renders elements in document order.\r\n    let display = this.on ? \"auto\" : \"none\"\r\n    return (\r\n        <circle className={\"bulb-glow\"} cx={16} cy={16} r={32} display={display}/>\r\n    );\r\n  }\r\n\r\n  setUpBody(): paper.Item {\r\n    return new this.scope.Path(BULB_PATH);\r\n  }\r\n\r\n  setUpInputPins(): LogicPin[] {\r\n    let {bottom} = this.body.bounds;\r\n    let pin = new LogicPin({\r\n      parent: this,\r\n      pinType: PinType.INPUT,\r\n      orientation: PinOrientation.DOWN,\r\n      board: this.board\r\n    });\r\n\r\n    pin.updateGeometry(new paper.Point(16, bottom));\r\n    return [pin];\r\n  }\r\n}\r\n\r\nexport default Bulb;","import React from \"react\";\r\n\r\nimport LogicComponent, {LogicComponentParams} from \"./LogicComponent\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicConnection from \"./LogicConnection\";\r\nimport LogicState from \"./LogicState\";\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"type\" | \"width\"> {}\r\n\r\nclass Clock extends LogicComponent {\r\n  static clockPath: string = \"M4,12L8,12L8,20L16,20L16,12L24,12L24,20L28,20\"\r\n\r\n  constructor(params: IParams) {\r\n    super({\r\n      ...params,\r\n      type: PartType.INPUT,\r\n      delay: 10,\r\n    });\r\n    let [output] = this.outputPins\r\n    // This hack ensures that the clock triggers itself to change.\r\n    let selfConnection = new LogicConnection({source: output, sink: output})\r\n    output.connections.set(output.uuid, selfConnection);\r\n  }\r\n\r\n  operate(): void {\r\n    let s = this.outputPins[0].state.negated(1);\r\n    this.postEvent(s);\r\n  }\r\n\r\n  setUpBody(): paper.Item {\r\n    let {Path, Point, Size} = this.scope;\r\n    return new Path.Rectangle(new Point(0, 0), new Size(32, 32));\r\n\r\n  }\r\n\r\n  setUpOutputPins(): LogicPin[] {\r\n    let pin = new LogicPin({\r\n      parent: this,\r\n      pinType: PinType.OUTPUT,\r\n      orientation: PinOrientation.RIGHT,\r\n      board: this.board\r\n    })\r\n    pin.updateGeometry(new this.scope.Point(32, 16));\r\n    return [pin];\r\n  }\r\n\r\n  extraRender(): React.ReactElement {\r\n    return (\r\n      <path className=\"decoration\" d={Clock.clockPath} fill=\"none\"/>\r\n    );\r\n  }\r\n\r\n  reset() {\r\n    let [output] = this.outputPins;\r\n    output.setLogicState(new LogicState({v: 0}));\r\n    output.updateNext(true);\r\n    this.operate();\r\n  }\r\n}\r\n\r\nexport default Clock;","import React from \"react\";\r\n\r\nimport LogicComponent, {LogicComponentParams, UpdateGeometryParams} from \"./LogicComponent\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicState from \"./LogicState\";\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"type\"> {}\r\n\r\nclass Switch extends LogicComponent {\r\n    constructor(params: IParams) {\r\n        super({\r\n            ...params,\r\n            type: PartType.INPUT,\r\n            adjustableWidth: true,\r\n            hasDelay: false,\r\n        });\r\n    }\r\n\r\n    /** Intentionally no-op */\r\n    operate(): void {}\r\n\r\n    setUpBody({width}: UpdateGeometryParams): paper.Item {\r\n        let {Path, Point, Size} = this.scope;\r\n        return new Path.Rectangle(new Point(0, 0), new Size(32 * width, 32));\r\n    }\r\n\r\n    setUpOutputPins({width}: UpdateGeometryParams): LogicPin[] {\r\n        let pin = new LogicPin({\r\n            parent: this,\r\n            pinType: PinType.OUTPUT,\r\n            orientation: PinOrientation.RIGHT,\r\n            board: this.board,\r\n            width: width,\r\n        });\r\n\r\n        pin.updateGeometry(new this.scope.Point(32 * width, 16));\r\n\r\n        return [pin];\r\n    }\r\n\r\n    extraRender(): React.ReactElement {\r\n        let [pin] = this.outputPins\r\n        let extras = []\r\n        for (let i = 0; i < this.width; i++) {\r\n            let classnames = [\"switch\"]\r\n            let stateString = \"0\"\r\n            if ((pin.state.v >> i) & 1) {\r\n                classnames.push(\"on\")\r\n                stateString = \"1\"\r\n            }\r\n\r\n            let x = 16 + 32 * (this.width - i - 1);\r\n            let y = 16;\r\n\r\n            // TODO: Pass mouse events over the button to the parent element\r\n            extras.push(\r\n                <circle key={2*i}\r\n                        className={classnames.join(' ')}\r\n                        cx={x}\r\n                        cy={y}\r\n                        r={12}\r\n                        onClick={this.handleClick.bind(this, i)}/>\r\n            )\r\n            extras.push(\r\n                <text key={2*i + 1} className=\"center\" x={x} y={y}>\r\n                    {stateString}\r\n                </text>\r\n            )\r\n        }\r\n        return <>{extras}</>\r\n\r\n    }\r\n\r\n    handleClick(i: number) {\r\n        let [pin] = this.outputPins;\r\n        let v = (pin.state.v ^ (1 << i));\r\n        pin.setLogicState(new LogicState({\r\n            v: v\r\n        }));\r\n        this.update();\r\n    }\r\n\r\n    get width(): number {\r\n        return super.width\r\n    }\r\n\r\n    set width(width: number) {\r\n        let {Point} = this.scope;\r\n        console.log(width);\r\n        let diff = this.width - width;\r\n        this.translate(new Point(diff * 32, 0))\r\n        super.width = width;\r\n    }\r\n\r\n    /** Reset but keep prior state */\r\n    reset(): void {\r\n        let [output] = this.outputPins;\r\n        let s = output.state;\r\n        super.reset();\r\n        output.setLogicState(s);\r\n    }\r\n}\r\n\r\nexport default Switch;","import LogicComponent, {LogicComponentParams, UpdateGeometryParams} from \"./LogicComponent\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicState from \"./LogicState\";\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"type\"> {}\r\n\r\nclass Adder extends LogicComponent {\r\n\r\n    constructor(params: IParams) {\r\n        super({\r\n            ...params,\r\n            type: PartType.COMPOSITE_BUILT_IN,\r\n            delay: 1});\r\n    }\r\n\r\n    operate(): void {\r\n        if (this.subtype === 0) {\r\n\r\n            // Half-adder\r\n            let a = this.inputPins[0].state;\r\n            let b = this.inputPins[1].state;\r\n            if (a.x === 0 && a.z === 0 && b.x === 0 && b.z === 0) {\r\n                // No input related errors\r\n                let cout = (a.v & b.v );\r\n                let sum  = (a.v ^ b.v);\r\n\r\n                this.postEvent(new LogicState({v: sum}), this.outputPins[0])\r\n                this.postEvent(new LogicState({v: cout}), this.outputPins[1])\r\n            } else {\r\n                this.postEvent(new LogicState({x: 1}), this.outputPins[0])\r\n                this.postEvent(new LogicState({x: 1}), this.outputPins[1])\r\n            }\r\n        } else {\r\n\r\n            // Adder\r\n            let a = this.inputPins[0].state;\r\n            let b = this.inputPins[1].state;\r\n            let cin = this.inputPins[2].state;\r\n            let sum = a.v + b.v + cin.v;\r\n            let cout = sum >> this.width;\r\n            let error = a.x | b.x | cin.x | a.z | b.z | cin.z\r\n\r\n            for (let i = 0; i < this.width; i++) {\r\n                if ((error >> i) & 1) {\r\n                    // Input related error, set everything else to x\r\n                    error = -1 & ~this.bitMask(i + 1) & this.bitMask();\r\n                    break;\r\n                }\r\n            }\r\n\r\n            sum &= ~error & this.bitMask();\r\n\r\n            this.postEvent(new LogicState({v: sum, x: error}), this.outputPins[0]);\r\n            if (error) {\r\n                this.postEvent( new LogicState({x: 1}), this.outputPins[1]);\r\n            } else {\r\n                this.postEvent(new LogicState({v: cout}), this.outputPins[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    setUpBody(): paper.Item {\r\n        let {Path, Point, Size} = this.scope;\r\n        return new Path.Rectangle(new Point(0, 0), new Size(48, 32));\r\n\r\n    }\r\n\r\n    setUpOutputPins({width}: UpdateGeometryParams): LogicPin[] {\r\n        let sum = new LogicPin({\r\n            parent: this,\r\n            pinType: PinType.OUTPUT,\r\n            orientation: PinOrientation.UP,\r\n            board: this.board,\r\n            width: width,\r\n            label: 'S',\r\n        });\r\n\r\n        let cout = new LogicPin({\r\n            parent: this,\r\n            pinType: PinType.OUTPUT,\r\n            orientation: PinOrientation.LEFT,\r\n            board: this.board,\r\n            label: \"C__out\",\r\n        });\r\n\r\n        sum.updateGeometry(new this.scope.Point(24, 0));\r\n        cout.updateGeometry(new this.scope.Point(0, 16));\r\n\r\n        return [sum, cout];\r\n    }\r\n\r\n    setUpInputPins({width}: UpdateGeometryParams): LogicPin[] {\r\n        let a = new LogicPin({\r\n            parent: this,\r\n            pinType: PinType.INPUT,\r\n            orientation: PinOrientation.DOWN,\r\n            board: this.board,\r\n            width: width,\r\n            label: 'A',\r\n        });\r\n        a.updateGeometry(new this.scope.Point(16, 32));\r\n\r\n        let b = new LogicPin({\r\n            parent: this,\r\n            pinType: PinType.INPUT,\r\n            orientation: PinOrientation.DOWN,\r\n            board: this.board,\r\n            width: width,\r\n            label: 'B',\r\n        });\r\n        b.updateGeometry(new this.scope.Point(32, 32));\r\n\r\n        if (this.subtype === 0) {\r\n            // Half Adder does not have a carry in\r\n            return [a, b];\r\n        }\r\n\r\n        let cin = new LogicPin({\r\n            parent: this,\r\n            pinType: PinType.INPUT,\r\n            orientation: PinOrientation.RIGHT,\r\n            board: this.board,\r\n            label: \"C__in\",\r\n        });\r\n        cin.updateGeometry(new this.scope.Point(48, 16));\r\n\r\n        return [a, b, cin];\r\n    }\r\n}\r\n\r\nexport default Adder;","import React from \"react\"\r\n\r\nimport LogicComponent, {LogicComponentParams} from \"./LogicComponent\";\r\nimport LogicPin, {PinOrientation, PinType} from \"./LogicPin\";\r\nimport PartType from \"../enums/PartType\";\r\nimport LogicState from \"./LogicState\";\r\n\r\ninterface IParams extends Omit<LogicComponentParams, \"flags\" | \"type\" | \"width\"> {}\r\n\r\nclass Ground extends LogicComponent {\r\n    constructor(params: IParams ) {\r\n        super({\r\n            ...params,\r\n            type: PartType.INPUT,\r\n        });\r\n    }\r\n\r\n    operate(): void {\r\n        this.outputPins[0].setLogicState(new LogicState({}))\r\n    }\r\n\r\n    reset(): void {\r\n    }\r\n\r\n    setUpBody(): paper.Item {\r\n        let {Path, Point, Size} = this.scope;\r\n        return new Path.Rectangle(new Point(0, 0), new Size(32, 32));\r\n    }\r\n\r\n    setUpOutputPins(): LogicPin[] {\r\n        let pin = new LogicPin({\r\n            parent: this,\r\n            pinType: PinType.OUTPUT,\r\n            orientation: PinOrientation.RIGHT,\r\n            board: this.board,\r\n        })\r\n        pin.updateGeometry(new this.scope.Point(32, 16))\r\n        return [pin];\r\n    }\r\n\r\n    extraRender(): React.ReactElement {\r\n        return (\r\n             <path className=\"decoration\"\r\n                   d=\" M16,6.5 v13\r\n                       M9.5,19.5 h13\r\n                       M12,22.5 h8\r\n                       M14.5,25.5 h3\r\n                     \"/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ground","import GateType from \"../enums/GateType\";\r\nimport LogicComponent from \"../logic/LogicComponent\";\r\nimport LogicGate from \"../logic/LogicGate\";\r\nimport PartType from \"../enums/PartType\";\r\nimport {GLOBAL_SCOPE} from \"../Constants\";\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\nimport Bulb from \"../logic/Bulb\";\r\nimport Clock from \"../logic/Clock\";\r\nimport Switch from \"../logic/Switch\";\r\nimport paper from \"paper\";\r\nimport Adder from \"../logic/Adder\";\r\nimport Ground from \"../logic/Ground\";\r\n\r\ninterface PartParams {\r\n  type: PartType,\r\n  subtype: GateType,\r\n  label?: string;\r\n}\r\n\r\n/**\r\n * Part is a factory class used to generate logic components.\r\n */\r\nclass Part {\r\n  readonly subtype: GateType;\r\n  readonly type: PartType;\r\n  readonly label: string;\r\n  static data?: Part;\r\n  component: LogicComponent;\r\n\r\n  constructor(params: PartParams) {\r\n    this.type = params.type;\r\n    this.subtype = params.subtype;\r\n    this.label = params.label ?? \"<NO LABEL>\";\r\n    this.component = this.make();\r\n  }\r\n\r\n  make(board?: LogicBoard): LogicComponent {\r\n    let scope = board?.scope ?? GLOBAL_SCOPE;\r\n    switch (this.type) {\r\n      case PartType.GATE:\r\n        return new LogicGate({subtype: this.subtype, scope: scope, board: board});\r\n      case PartType.OUTPUT:\r\n        return new Bulb({subtype: 0, board: board, scope: scope});\r\n      case PartType.INPUT:\r\n        return this.makeInput(this.subtype, scope, board);\r\n      case PartType.COMPOSITE_BUILT_IN:\r\n        return this.makeComposite(this.subtype, scope, board);\r\n\r\n      default:\r\n        throw new Error(\"Unsupported Part Type\");\r\n    }\r\n  }\r\n\r\n  makeInput(subtype: number, scope: paper.PaperScope, board?: LogicBoard) {\r\n    switch (subtype){\r\n      case 0:\r\n        return new Clock({board: board, scope: scope, subtype: 0})\r\n      case 1:\r\n        return new Switch({subtype: 1, board: board, scope: scope})\r\n      case 2:\r\n        return new Ground({subtype: 2, board: board, scope: scope})\r\n      default:\r\n        throw new Error(\"Unsupported Part Type\");\r\n    }\r\n  }\r\n\r\n  makeComposite(subtype: number, scope: paper.PaperScope, board?: LogicBoard) {\r\n    switch (subtype) {\r\n      // Intentional fall through\r\n      case 0: // Half Adder\r\n      case 1: // Full Adder\r\n            return new Adder({subtype: this.subtype, scope: scope, board: board});\r\n      default:\r\n        throw new Error(\"Unsupported Component Type\")\r\n    }\r\n  }\r\n}\r\n\r\nexport default Part;","import React from \"react\";\r\nimport Button from \"@mui/material/Button\"\r\nimport Collapse from \"@mui/material/Collapse\"\r\nimport Divider from \"@mui/material/Divider\"\r\nimport ListItem from \"@mui/material/ListItem\"\r\nimport Paper from \"@mui/material/Paper\"\r\nimport {faChevronRight} from \"@fortawesome/free-solid-svg-icons/faChevronRight\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Part from \"./Part\";\r\nimport \"../css/PartsDrawer.css\"\r\n\r\ninterface IProps {\r\n  label: string,\r\n  parts: Array<Part>,\r\n}\r\ninterface IState {\r\n  collapsed: boolean,\r\n}\r\n\r\n/**\r\n * A container which renders multiple parts together, and enables parts to be dragged and dropped onto a board\r\n *\r\n * For organizational purposes, a full suite of components may consist of multiple drawers.\r\n * */\r\nclass PartsDrawer extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      collapsed: true,\r\n    }\r\n  }\r\n\r\n  renderPart(part: Part) {\r\n    let component = part.component;\r\n    let element = component.render();\r\n    let {label} = part\r\n    let {left, top, width, height} = component.geometry.bounds;\r\n    left -= 2;\r\n    top -= 2;\r\n    width += 4;\r\n    height += 4;\r\n\r\n    let id = label.replace(' ', '_');\r\n    return (\r\n        <Paper\r\n            elevation={3}\r\n            classes={{root: 'part'}}\r\n            key={component.uuid}\r\n            draggable\r\n            onDragStart={this.handleDragStart.bind(this, id, part)}\r\n            onDragEnd={this.handleDragEnd.bind(this)}\r\n        >\r\n          <div className=\"part-image-container\">\r\n            <svg className=\"part-image\" id={id} viewBox={`${left} ${top} ${width} ${height}`} width={width} height={height}>\r\n              {element}\r\n            </svg>\r\n          </div>\r\n          <div className=\"part-label\">{label}</div>\r\n        </Paper>\r\n    )\r\n  }\r\n\r\n  handleDragStart(id: string, part: Part, e: React.DragEvent<HTMLElement>) {\r\n    Part.data = part;\r\n\r\n    let elem = document.getElementById(id) as HTMLElement;\r\n\r\n    let {x, y} = part.component.geometry.bounds.center;\r\n\r\n    e.dataTransfer.setDragImage(elem, x+2, y+2);\r\n    e.dataTransfer.effectAllowed = \"move\";\r\n\r\n  }\r\n\r\n  handleDragEnd() {\r\n    Part.data = undefined;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <>\r\n          <ListItem dense>\r\n            <Button sx={{width: '100%', borderRadius: '10px'}}\r\n                    variant={'contained'}\r\n                    classes={{endIcon: 'drawer-handle-icon-container'}}\r\n                    onClick={this.handleClick.bind(this)}\r\n                    endIcon={\r\n                      <FontAwesomeIcon className={'drawer-handle-icon'}\r\n                                       icon={faChevronRight}\r\n                                       rotation={!this.state.collapsed ? 90 : undefined}/>\r\n                    }>\r\n              <span style={{flexGrow: 1}}>{this.props.label}</span>\r\n            </Button>\r\n          </ListItem>\r\n\r\n          <Collapse classes={{wrapperInner: \"drawer-contents\"}} in={!this.state.collapsed} timeout=\"auto\">\r\n            {this.props.parts.map(this.renderPart.bind(this))}\r\n          </Collapse>\r\n          <Divider/>\r\n        </>\r\n  )\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState((state) => {\r\n      return {\r\n        collapsed: !state.collapsed,\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default PartsDrawer;","import OperableSet from \"./OperableSet\";\r\nimport LogicComponent from \"../logic/LogicComponent\";\r\nimport LogicPin, {PinType} from \"../logic/LogicPin\";\r\nimport paper from \"paper\";\r\nimport React from \"react\";\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\nimport MouseEventMapping from \"./MouseEventMapping\";\r\nimport {MouseEventHandler, MouseEventName} from \"./Types\";\r\n\r\n\r\nenum MouseAction {\r\n  NONE,\r\n  PAN,\r\n  DRAG,\r\n  SELECT,\r\n  SELECT_APPEND,\r\n  SELECT_XOR,\r\n}\r\n\r\n\r\n// Not enum because some mice may have additional buttons.\r\nconst BUTTON_LEFT = 0;\r\nconst BUTTON_MIDDLE = 1;\r\n// eslint-disable-next-line -- Unused\r\nconst BUTTON_RIGHT = 2;\r\n// eslint-disable-next-line -- Unused\r\nconst BUTTON_BROWSER_BACK = 3;\r\n// eslint-disable-next-line -- Unused\r\nconst BUTTON_BROWSER_FORWARD = 4;\r\n\r\n\r\nenum SelectionType {\r\n  NONE,\r\n  COMPONENT,\r\n  PIN,\r\n}\r\n\r\n\r\n/**\r\n * Helper class for the Board component to manage non-trival mouse and touch interactions.\r\n * */\r\nclass MouseManager {\r\n  private sPoint?: paper.Point;\r\n  selectBox?: paper.Path;\r\n\r\n  private mouseButton?: number;\r\n  private targetComponent?: LogicComponent;\r\n  private action: MouseAction = MouseAction.NONE;\r\n\r\n  private handlers: Map<MouseEventName, MouseEventHandler> = new Map();\r\n\r\n  private priorSelectionType: SelectionType = SelectionType.NONE;\r\n  private priorSelection: OperableSet<LogicComponent | LogicPin> = new OperableSet();\r\n  private currentSelection: OperableSet<LogicComponent | LogicPin> = new OperableSet();\r\n\r\n  // This needs to be computed by the mounted board because we need the bounding box of the mounted component on screen.\r\n  getViewCoordinates?: (e: React.MouseEvent<SVGElement, MouseEvent> | MouseEvent) => MouseEventMapping;\r\n\r\n  addHandler(name: MouseEventName, handler: MouseEventHandler) {\r\n    if (this.handlers.has(name)) {\r\n      throw new Error(`Cannot assign multiple handlers for ${name}`)\r\n    }\r\n\r\n    this.handlers.set(name, handler)\r\n    window.addEventListener(name, handler)\r\n  }\r\n\r\n  removeHandlers() {\r\n    this.handlers.forEach((handler, key) => {\r\n      window.removeEventListener(key, handler)\r\n    })\r\n    this.handlers.clear()\r\n  }\r\n\r\n  reset() {\r\n    this.removeHandlers()\r\n    this.mouseButton = undefined;\r\n    this.action = MouseAction.NONE;\r\n\r\n    if (this.selectBox) {\r\n      this.selectBox.remove();\r\n      this.selectBox = undefined;\r\n      this.sPoint = undefined;\r\n    }\r\n\r\n    this.priorSelectionType = SelectionType.NONE;\r\n    this.priorSelection.clear();\r\n    this.currentSelection.clear();\r\n  }\r\n\r\n  handleBoardMouseDown(board: LogicBoard, e: React.MouseEvent<SVGElement> | MouseEvent) {\r\n    if (e.button > 2) {\r\n      return\r\n    }\r\n\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    if (this.action !== MouseAction.NONE) {\r\n      return\r\n    }\r\n\r\n    this.mouseButton = e.button\r\n\r\n    if (e.button === BUTTON_LEFT && !e.altKey) {\r\n      this.currentSelection.clear()\r\n      if (e.getModifierState(\"Shift\") && this.priorSelection.size > 0) {\r\n        this.action = MouseAction.SELECT_APPEND;\r\n      } else if (e.getModifierState(\"Control\") && this.priorSelection.size > 0) {\r\n        this.action = MouseAction.SELECT_XOR;\r\n      } else {\r\n        this.action = MouseAction.SELECT\r\n        board.clearSelection();\r\n      }\r\n\r\n      const {Path, Point, Rectangle, Size} = board.scope;\r\n      const {x, y} = this.getViewCoordinates!(e);\r\n      this.sPoint = new Point(x, y);\r\n      let rect = new Rectangle(this.sPoint, new Size(0, 0))\r\n      this.selectBox = new Path.Rectangle(rect)\r\n\r\n      // Add handlers directly to the window to ensure that events aren't dropped once the cursor moves out of the\r\n      // widget's rendered area.  Dropping these events would lead to an inconsistent mouse state.\r\n      this.addHandler('mousemove', this.handleMouseMoveSelect.bind(this, board))\r\n      this.addHandler('mouseup', this.handleMouseUp.bind(this, board))\r\n    }\r\n\r\n    if (e.button === BUTTON_MIDDLE || (e.button === 0 && e.altKey)) {\r\n      this.action = MouseAction.PAN;\r\n      // Add handlers directly to the window to ensure that events aren't dropped once the cursor moves out of the\r\n      // widget's rendered area.  Dropping these events would lead to an inconsistent mouse state.\r\n      this.addHandler('mousemove', this.handleMouseMovePan.bind(this, board))\r\n      this.addHandler('mouseup', this.handleMouseUp.bind(this, board))\r\n    }\r\n  }\r\n\r\n  handleGateMouseDown(board: LogicBoard,\r\n                      target: LogicComponent,\r\n                      e: React.MouseEvent<SVGElement, MouseEvent> | MouseEvent) {\r\n\r\n    if (e.button !== 0) {\r\n      return\r\n    }\r\n\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    if (this.action !== MouseAction.NONE) {\r\n      return\r\n    }\r\n\r\n    this.mouseButton = e.button;\r\n    this.targetComponent = target;\r\n\r\n    let selected = board.selectedComponents;\r\n\r\n    if (e.getModifierState(\"Control\")) {\r\n      if (target.selected) {\r\n        target.selected = false\r\n        selected.delete(target)\r\n      } else {\r\n        target.selected = true\r\n        selected.add(target)\r\n      }\r\n    } else if (e.getModifierState(\"Shift\")) {\r\n      if (!target.selected) {\r\n        target.selected = true\r\n        selected.add(target)\r\n      }\r\n    } else if (!selected.has(target)) {\r\n      board.clearSelection()\r\n      target.selected = true\r\n      selected.add(target)\r\n    } else {\r\n      if (!target.selected) {\r\n        target.selected = true\r\n        selected.add(target)\r\n      }\r\n    }\r\n\r\n    // Add handlers directly to the window to ensure that events aren't dropped once the cursor moves out of the\r\n    // widget's rendered area.  Dropping these events would lead to an inconsistent mouse state.\r\n    this.addHandler('mousemove', this.handleMouseMoveDrag.bind(this, board))\r\n    this.addHandler('mouseup', this.handleMouseUp.bind(this, board))\r\n  }\r\n\r\n  handlePinMouseDown(board: LogicBoard, target: LogicPin, e:React.MouseEvent<SVGElement, MouseEvent> | MouseEvent) {\r\n    // TODO: Drag-and-drop connections\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    let pins = board.selectedPins;\r\n\r\n    let numOutputs = 0;\r\n    pins.forEach((pin) => {numOutputs += (pin.pinType === PinType.OUTPUT) ? 1 : 0})\r\n    if (numOutputs <= 1) {\r\n      for(let pin of pins) {\r\n        this.makeConnection(board, pin, target);\r\n      }\r\n    }\r\n\r\n    target.selected = true;\r\n    board.selectedPins.add(target)\r\n  }\r\n\r\n  makeConnection(board: LogicBoard, a: LogicPin, b: LogicPin) {\r\n    let connection = a.connectTo(b);\r\n    if (connection) {\r\n      board.addConnection(connection);\r\n      board.update();\r\n    }\r\n  }\r\n\r\n  handleMouseUp(board: LogicBoard, e: React.MouseEvent<SVGElement> | MouseEvent) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    if (e.button !== this.mouseButton) {\r\n      return\r\n    }\r\n\r\n    this.reset()\r\n    if (board.selectedComponents.size > 0) {\r\n      this.priorSelectionType = SelectionType.COMPONENT;\r\n      this.priorSelection.addAll(board.selectedComponents)\r\n    } else if (board.selectedPins.size > 0) {\r\n      this.priorSelectionType = SelectionType.PIN;\r\n      this.priorSelection.addAll(board.selectedPins)\r\n    }\r\n\r\n    // Required to remove the selection box without re-rendering the entire board.\r\n    // TODO: refactor the selection box as a widget so it can be updated independently of the rest of the board.\r\n    board.update()\r\n  }\r\n\r\n  handleMouseMoveSelect(board: LogicBoard, e: React.MouseEvent<SVGElement, MouseEvent> | MouseEvent) {\r\n    let {x, y} = this.getViewCoordinates!(e);\r\n\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    if (this.sPoint === undefined || this.selectBox === undefined)\r\n      throw new Error('Invalid mouse state (select mousemove).');\r\n\r\n    const [sx, sy] = [this.sPoint.x, this.sPoint.y]\r\n\r\n    if (x === sx && y === sy) {\r\n      for (let s of this.selectBox.segments) {\r\n        s.point = this.sPoint;\r\n      }\r\n    }\r\n\r\n    if (x <= sx) {\r\n      this.selectBox.segments[0].point.x = x\r\n      this.selectBox.segments[1].point.x = x\r\n      this.selectBox.segments[2].point.x = sx\r\n      this.selectBox.segments[3].point.x = sx\r\n    }\r\n    if (x >= sx) {\r\n      this.selectBox.segments[0].point.x = sx\r\n      this.selectBox.segments[1].point.x = sx\r\n      this.selectBox.segments[2].point.x = x\r\n      this.selectBox.segments[3].point.x = x\r\n    }\r\n    if (y <= sy) {\r\n      this.selectBox.segments[0].point.y = sy\r\n      this.selectBox.segments[1].point.y = y\r\n      this.selectBox.segments[2].point.y = y\r\n      this.selectBox.segments[3].point.y = sy\r\n    }\r\n    if (y >= sy) {\r\n      this.selectBox.segments[0].point.y = y\r\n      this.selectBox.segments[1].point.y = sy\r\n      this.selectBox.segments[2].point.y = sy\r\n      this.selectBox.segments[3].point.y = y\r\n    }\r\n\r\n    board.selectedComponents.clear();\r\n    board.selectedPins.clear();\r\n\r\n    let components = [...board.components.values()];\r\n    let pins = [...board.pins.values()];\r\n\r\n    if (this.action === MouseAction.SELECT) {\r\n      this.currentSelection.clear();\r\n\r\n      for (let component of components) {\r\n        if (component.collides(this.selectBox)) {\r\n          this.currentSelection.add(component);\r\n        }\r\n      }\r\n\r\n      if (this.currentSelection.size > 0) {\r\n        board.selectedComponents.clear();\r\n        board.selectedComponents.addAll(this.currentSelection as Set<LogicComponent>);\r\n      } else {\r\n        let pins = [...board.pins.values()];\r\n\r\n        for (let pin of pins) {\r\n          if (pin.collides(this.selectBox)) {\r\n            this.currentSelection.add(pin);\r\n          }\r\n        }\r\n\r\n        board.selectedPins.clear();\r\n        board.selectedPins.addAll(this.currentSelection as Set<LogicPin>)\r\n      }\r\n    } else {\r\n      this.currentSelection.clear()\r\n\r\n      if (this.priorSelectionType === SelectionType.COMPONENT) {\r\n        let components = [...board.components.values()];\r\n        for (let component of components) {\r\n          if (component.collides(this.selectBox)) {\r\n            this.currentSelection.add(component);\r\n          }\r\n        }\r\n\r\n        if (this.action === MouseAction.SELECT_APPEND) {\r\n          board.selectedComponents.addAll(this.currentSelection.union(this.priorSelection) as Set<LogicComponent>);\r\n        } else if (this.action === MouseAction.SELECT_XOR) {\r\n          board.selectedComponents.addAll(this.currentSelection.xor(this.priorSelection) as Set<LogicComponent>);\r\n        } else {\r\n          throw new Error(\"Inconsistent selection state\");\r\n        }\r\n      } else if (this.priorSelectionType === SelectionType.PIN) {\r\n        let pins = [...board.pins.values()];\r\n        for (let pin of pins) {\r\n          if (pin.collides(this.selectBox)) {\r\n            this.currentSelection.add(pin);\r\n          }\r\n        }\r\n\r\n        if (this.action === MouseAction.SELECT_APPEND) {\r\n          board.selectedPins.addAll(this.currentSelection.union(this.priorSelection) as Set<LogicPin>);\r\n        } else if (this.action === MouseAction.SELECT_XOR) {\r\n          board.selectedPins.addAll(this.currentSelection.xor(this.priorSelection) as Set<LogicPin>);\r\n        } else {\r\n          throw new Error(\"Inconsistent selection state\");\r\n        }\r\n      } else {\r\n        throw new Error(\"Inconsistent selection state\");\r\n      }\r\n    }\r\n\r\n    if (board.selectedComponents.size > 0) {\r\n      for (let component of components) {\r\n        component.selected = board.selectedComponents.has(component);\r\n      }\r\n\r\n      for (let pin of pins) {\r\n        pin.selected = false\r\n      }\r\n    } else if (board.selectedPins.size > 0) {\r\n      for (let pin of pins) {\r\n        pin.selected = board.selectedPins.has(pin)\r\n      }\r\n\r\n      for (let component of components) {\r\n        component.selected = false;\r\n      }\r\n    } else {\r\n      for (let component of components) {\r\n        component.selected = false;\r\n      }\r\n\r\n      for (let pin of pins) {\r\n        pin.selected = false\r\n      }\r\n    }\r\n\r\n    // This update is required to update the selection box.\r\n    // TODO: refactor the selection box as a widget so it can be updated independently of the rest of the board.\r\n    board.update();\r\n    board.updateProperties();\r\n  }\r\n\r\n  handleMouseMovePan(board: LogicBoard, e: React.MouseEvent<SVGElement, MouseEvent> | MouseEvent) {\r\n    let {dx, dy} = this.getViewCoordinates!(e)\r\n\r\n    board.viewBox = {\r\n      top: board.viewBox.top - dy,\r\n      left: board.viewBox.left - dx,\r\n      width: board.viewBox.width,\r\n      height: board.viewBox.height,\r\n    }\r\n\r\n    board.update()\r\n  }\r\n\r\n  handleMouseMoveDrag(board: LogicBoard, e: React.MouseEvent<SVGElement, MouseEvent> | MouseEvent) {\r\n    let {dx, dy} = this.getViewCoordinates!(e)\r\n\r\n    if (!this.targetComponent?.selected) {\r\n      this.targetComponent!.selected = true;\r\n      board.selectedComponents.add(this.targetComponent!)\r\n    }\r\n\r\n    for (let component of board.selectedComponents) {\r\n      component.translate(new paper.Point(dx, dy))\r\n    }\r\n\r\n  }\r\n\r\n  isSelect(): boolean {\r\n    let {SELECT, SELECT_APPEND, SELECT_XOR} = MouseAction;\r\n    return [SELECT, SELECT_APPEND, SELECT_XOR].includes(this.action)\r\n  }\r\n\r\n  getSelection<T extends LogicComponent | LogicPin>(current: OperableSet<T>): OperableSet<T> {\r\n    if (this.action === MouseAction.SELECT_APPEND) {\r\n      return current.union(this.priorSelection as OperableSet<T>)\r\n    } else if (this.action === MouseAction.SELECT_XOR) {\r\n      return current.symmetricDifference(this.priorSelection as OperableSet<T>)\r\n    }\r\n    throw new Error(\"Inconsistent Selection State\");\r\n  }\r\n}\r\n\r\nexport default MouseManager;","import React from \"react\";\r\nimport Box from \"@mui/material/Box\"\r\nimport List from \"@mui/material/List\"\r\nimport ListSubheader from \"@mui/material/ListSubheader\"\r\nimport Paper from \"@mui/material/Paper\"\r\nimport Tab from \"@mui/material/Tab\"\r\nimport Tabs from \"@mui/material/Tabs\"\r\nimport Part from \"./Part\";\r\n\r\nimport PartsDrawer from \"./PartsDrawer\";\r\nimport \"../css/Sidebar.css\"\r\nimport Divider from \"@mui/material/Divider\";\r\n\r\n\r\nfunction a11yProps(index: number) {\r\n  return {\r\n    id: `vertical-tab-${index}`,\r\n    'aria-controls': `vertical-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\n\r\ninterface IProps {\r\n  parts: Map<string, Part[]>;\r\n}\r\ninterface IState {\r\n  open: boolean;\r\n  activeTab: string | false;\r\n}\r\n\r\n/**\r\n * Generic container which expands to show contents on mouse hover\r\n *\r\n * Needs work, and may be replaced.\r\n */\r\nclass Sidebar extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n      activeTab: false,\r\n    }\r\n  }\r\n\r\n  renderUnderlay() {\r\n    let sidebarClasses = [\"sidebar\"]\r\n    if (!this.state.activeTab) {\r\n      sidebarClasses.push(\"collapsed\");\r\n    }\r\n    let classNames = sidebarClasses.join(' ');\r\n    return (\r\n        <Box className={classNames}>\r\n          <Paper classes={{root: \"sidebar-content\"}}/>\r\n        </Box>\r\n    );\r\n  }\r\n\r\n  renderPartsView() {\r\n    let sidebarClasses = [\"sidebar\"]\r\n    if (\"Parts\".localeCompare(this.state.activeTab || \"\")) {\r\n      sidebarClasses.push(\"collapsed\");\r\n    }\r\n    let classNames = sidebarClasses.join(' ');\r\n    return (\r\n        <Box className={classNames}>\r\n          <Paper classes={{root: \"sidebar-content\"}} sx={{pointerEvents: \"auto\"}}>\r\n            <List\r\n                subheader={<ListSubheader>Parts</ListSubheader>}\r\n            >\r\n              {[...this.props.parts.entries()].map(([label, parts]) => (\r\n                <PartsDrawer key={label} label={label} parts={parts}/>\r\n                ))}\r\n            </List>\r\n          </Paper>\r\n        </Box>\r\n    );\r\n  }\r\n\r\n  renderProjectView() {\r\n    let sidebarClasses = [\"sidebar\"]\r\n    if (\"Project\".localeCompare(this.state.activeTab || \"\")) {\r\n      sidebarClasses.push(\"collapsed\");\r\n    }\r\n    let classNames = sidebarClasses.join(' ');\r\n    return (\r\n      <Box className={classNames}>\r\n        <Paper classes={{root: \"sidebar-content\"}} sx={{pointerEvents: \"auto\"}}>\r\n          [Project View Placeholder]\r\n        </Paper>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  renderTab(label: string, index: number) {\r\n    return (\r\n    <Tab label={\r\n      <Box sx={{\r\n        writingMode: \"vertical-rl\",\r\n        textOrientation: \"mixed\",\r\n        transform: \"rotate(180deg)\"}}>{label}</Box>}\r\n         value={label} {...a11yProps(index)}\r\n         sx={{minWidth: \"48px\", minHeight: \"100px\"}}\r\n         onClick={this.handleTabClick.bind(this, label)}/>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <>\r\n          <Tabs\r\n              orientation=\"vertical\"\r\n              variant=\"scrollable\"\r\n              value={this.state.activeTab}\r\n              onChange={this.handleTabChange.bind(this)}\r\n              aria-label=\"Side Controls\"\r\n              sx={{ borderRight: 1, borderColor: 'divider', flexShrink: 0, minWidth: '48px'}}\r\n          >\r\n            {this.renderTab(\"Project\", 0)}\r\n            <Divider/>\r\n            {this.renderTab(\"Parts\", 1)}\r\n            <Divider/>\r\n          </Tabs>\r\n          <Divider orientation=\"vertical\" sx={{zIndex: 'drawer'}}/>\r\n          <div style={{position: \"absolute\", left: \"50px\", width: \"100%\", height: \"100%\", overflow: \"hidden\", pointerEvents: \"none\"}}>\r\n            {this.renderUnderlay()}\r\n            {this.renderProjectView()}\r\n            {this.renderPartsView()}\r\n          </div>\r\n        </>\r\n    );\r\n  }\r\n\r\n  handleTabClick(value: string, e: React.MouseEvent<HTMLElement>) {\r\n    if (value.localeCompare(this.state.activeTab || \"\") === 0) {\r\n      this.setState({activeTab: false})\r\n    }\r\n  }\r\n\r\n  handleTabChange(e: React.SyntheticEvent, newValue: string) {\r\n    this.setState({activeTab: newValue})\r\n  }\r\n\r\n  handleMouseEnter(e: React.MouseEvent<HTMLElement>) {\r\n    this.setState({open: true});\r\n  }\r\n}\r\n\r\nexport default Sidebar;","\r\nclass OperableSet<T> extends Set<T> {\r\n  addAll(other: Iterable<T>) {\r\n    for (let value of other) {\r\n      this.add(value)\r\n    }\r\n  }\r\n\r\n  union(other: Set<T>): OperableSet<T> {\r\n    let result = new OperableSet<T>();\r\n    for (let value of this) {\r\n      result.add(value)\r\n    }\r\n\r\n    for (let value of other) {\r\n      result.add(value)\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  intersection(other: Set<T>): OperableSet<T> {\r\n    let result = new OperableSet<T>();\r\n    for (let value of this) {\r\n      if (other.has(value)) {\r\n        result.add(value)\r\n      }\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  xor(other: Set<T>): OperableSet<T> {\r\n    return this.symmetricDifference(other);\r\n  }\r\n\r\n  symmetricDifference(other: Set<T>): OperableSet<T> {\r\n    let result = new OperableSet<T>();\r\n    for (let value of this) {\r\n      if (!other.has(value)) {\r\n        result.add(value)\r\n      }\r\n    }\r\n\r\n    for (let value of other) {\r\n      if (!this.has(value)) {\r\n        result.add(value)\r\n      }\r\n    }\r\n\r\n    return result\r\n  }\r\n}\r\n\r\n\r\nexport default OperableSet;","import paper from \"paper\";\r\nimport React from \"react\";\r\n\r\nimport '../css/Board.css';\r\nimport Part from \"./Part\";\r\nimport LogicComponent from \"../logic/LogicComponent\";\r\nimport {GateEventHandlers} from \"./Component\";\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\nimport MouseManager from \"../util/MouseManager\";\r\n\r\n// import Properties from \"./Properties\";\r\n\r\n\r\ninterface MouseEventMapping {\r\n    /** The x-coordinate in svg coordinates */\r\n    x: number,\r\n    /** The y-coordinate in svg coordinates */\r\n    y: number,\r\n    /**\r\n     * The x-coordinate as the relative position within the viewBox\r\n     * <br>\r\n     * 0 is the left side of the viewBox, and 1 is the right side of the viewBox\r\n     * */\r\n    rx: number,\r\n    /**\r\n     * The y-coordinate as the relative position within the viewBox\r\n     * <br>\r\n     * 0 is the top side of the viewBox, and 1 is the bottom side of the viewBox\r\n     * */\r\n    ry: number,\r\n    /** The horizontal distance moved in svg coordinate space since the last mouse event */\r\n    dx: number,\r\n    /** The vertical distance moved in svg coordinate space since the last mouse event */\r\n    dy: number,\r\n}\r\n\r\ninterface IProps {\r\n    board: LogicBoard;\r\n}\r\n\r\ninterface IState {\r\n    /** The size on the page of the board */\r\n    viewPort: {\r\n        width: number,\r\n        height: number,\r\n    },\r\n    scaleFactor: number,\r\n    pan: boolean,\r\n    drag: boolean,\r\n}\r\n\r\n/**\r\n * React Component implementation of LogicBoard\r\n *\r\n * As opposed to the logical implementation, this class is primarily concerned with mapping to the DOM, and handling\r\n * user interactions.\r\n * */\r\nclass Board extends React.Component<IProps, IState> {\r\n    private mouseManager: MouseManager = new MouseManager();\r\n    private ref: React.RefObject<any>;\r\n    private resizeObserver?: ResizeObserver;\r\n\r\n    constructor(props: Readonly<IProps>) {\r\n        super(props);\r\n\r\n        // @ts-ignore\r\n        this.state = {\r\n            viewPort: {\r\n                width: 0,\r\n                height: 0,\r\n            },\r\n            scaleFactor: 1,\r\n            pan: false,\r\n            drag: false,\r\n        }\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    /** Resize handler to make sure the board doesn't scale up when the window is resized */\r\n    onResize(entries: ResizeObserverEntry[]) {\r\n        let {width, height} = entries[0].contentRect;\r\n\r\n        let board = this.props.board;\r\n        this.setState((state) => {\r\n            board.viewBox = {\r\n                left: board.viewBox.left,\r\n                top: board.viewBox.top,\r\n                width: width * state.scaleFactor,\r\n                height: height * state.scaleFactor,\r\n            }\r\n\r\n            return {\r\n                viewPort: {\r\n                    width: width,\r\n                    height: height,\r\n                },\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called after this component is rendered to the DOM\r\n     * <br>\r\n     * This is useful to perform initialization which requires this component or it's children to have been rendered.\r\n     * @see {@link https://reactjs.org/docs/react-component.html#componentdidmount componentDidMount}\r\n     * */\r\n    componentDidMount() {\r\n        this.props.board.update = () => this.setState({})\r\n        this.setState({});\r\n        let board = this.ref.current;\r\n        this.resizeObserver = new ResizeObserver(this.onResize.bind(this));\r\n        this.resizeObserver.observe(board)\r\n        this.mouseManager.getViewCoordinates = this.getViewCoordinates.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Called before this element will be removed from the DOM\r\n     * <br>\r\n     * Generally used to clean up any bindings set up in {@link componentDidMount}, and other stray bindings.\r\n     * @see {@link https://reactjs.org/docs/react-component.html#componentwillunmount componentWillUnmount} */\r\n    componentWillUnmount() {\r\n        this.resizeObserver?.disconnect();\r\n        this.mouseManager.reset();\r\n    }\r\n\r\n    /** SVG definitions referenced by other svg elements. */\r\n    defs() {\r\n        return (\r\n            <defs key=\"defs\">\r\n                <pattern id=\"grid\" x={0} y={0} width={80} height={80} viewBox=\"0 0 80 80\" patternUnits=\"userSpaceOnUse\">\r\n                    <path className=\"grid\" d=\"M 0 0 L 0 80\" strokeWidth=\"2\"/>\r\n                    <path className=\"grid\" d=\"M 10 0 L 10 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 20 0 L 20 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 30 0 L 30 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 40 0 L 40 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 50 0 L 50 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 60 0 L 60 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 70 0 L 70 80\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 80 0 L 80 80\" strokeWidth=\"2\"/>\r\n\r\n                    <path className=\"grid\" d=\"M 0 0 L 80 0\" strokeWidth=\"2\"/>\r\n                    <path className=\"grid\" d=\"M 0 10 L 80 10\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 20 L 80 20\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 30 L 80 30\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 40 L 80 40\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 50 L 80 50\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 60 L 80 60\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 70 L 80 70\" strokeWidth=\"0.5\"/>\r\n                    <path className=\"grid\" d=\"M 0 80 L 80 80\" strokeWidth=\"2\"/>\r\n                </pattern>\r\n\r\n                <pattern id=\"bus\" x={0} y={0} width={3} height={3} viewBox=\"0 0 3 3\" patternUnits=\"userSpaceOnUse\">\r\n                    <rect x={2} y={0} width={1} height={1} fill=\"black\"/>\r\n                    <rect x={1} y={1} width={1} height={1} fill=\"black\"/>\r\n                    <rect x={0} y={2} width={1} height={1} fill=\"black\"/>\r\n                </pattern>\r\n\r\n                <radialGradient id=\"bulb-glow\">\r\n                    <stop offset=\"0%\" stopColor=\"rgb(255, 255, 128)\" />\r\n                    <stop offset=\"100%\" stopColor=\"rgba(255, 255, 255, 0)\" />\r\n                </radialGradient>\r\n            </defs>\r\n        );\r\n    }\r\n\r\n    /** Draws the grid background as a repeated pattern on a rectangle which exactly fills the viewBox */\r\n    renderGrid() {\r\n        const {left, top, width, height} = this.props.board.viewBox;\r\n\r\n        return <rect key=\"grid\" x={left} y={top} width={width} height={height} fill=\"url(#grid)\"/>;\r\n    }\r\n\r\n    render() {\r\n        const {left, top, width, height} = this.props.board.viewBox;\r\n\r\n        let selectionBox = (this.mouseManager.selectBox?.exportSVG() as SVGElement)?.getAttribute('d');\r\n\r\n        let mm = this.mouseManager;\r\n\r\n        let handlers: GateEventHandlers = {\r\n            onGateMouseDown: mm.handleGateMouseDown.bind(mm, this.props.board),\r\n            onGateContextMenu: this.handleGateContextMenu.bind(this),\r\n            onPinMouseDown: mm.handlePinMouseDown.bind(mm, this.props.board),\r\n        }\r\n\r\n        let renderedConnections: JSX.Element[] = [];\r\n        this.props.board.connections.forEach((c) => renderedConnections.push(c.render()));\r\n\r\n        let renderedComponents: JSX.Element[] = [];\r\n        this.props.board.components.forEach((c) => renderedComponents.push(c.render(handlers)));\r\n\r\n        // Nested svgs is a hack to allow resizing the viewPort without scaling the contents.\r\n        // When the viewport is resized, the inner svg's viewBox is updated so it exactly fits the outer SVG's viewport.\r\n        // Normally, an svg element with a defined viewBox is forced to fit the aspect ratio of its viewbox.\r\n        return (\r\n            <div\r\n                ref={this.ref}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\"\r\n                }}\r\n            >\r\n                <svg className=\"board-wrapper\" style={this.state.viewPort}\r\n                     xmlns=\"http://www.w3.org/2000/svg\"\r\n                     onWheel={(e)=> this.handleWheel(e)}\r\n                     onMouseDown={mm.handleBoardMouseDown.bind(mm, this.props.board)}\r\n                     onDragEnter={this.handleDragEnter.bind(this)}\r\n                     onDragOver={(e) => this.handleDragOver(e)}\r\n                     onDrop={(e) => this.handleDrop(e)}\r\n                >\r\n                    <svg className=\"board\"\r\n                         preserveAspectRatio=\"xMinYMin slice\"\r\n                         xmlns=\"http://www.w3.org/2000/svg\"\r\n                         viewBox={`${left} ${top} ${width} ${height}`}\r\n                         onScroll={() => console.log(\"scroll\")}\r\n                    >\r\n                        {this.defs()}\r\n                        {this.renderGrid()}\r\n                        <circle className={\"origin\"} x=\"0\" y=\"0\" r=\"40\" fill=\"red\"/>\r\n                        {renderedConnections}\r\n                        {renderedComponents}\r\n                        {selectionBox &&\r\n                        <path className=\"select\" d={selectionBox} vectorEffect=\"non-scaling-stroke\"/>\r\n                        }\r\n                    </svg>\r\n                </svg>\r\n                {/*<Properties board={this.props.board}/>*/}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /** Unselects all selected items */\r\n    clearSelection() {\r\n        this.props.board.clearSelection();\r\n    }\r\n\r\n    /**  Maps a mouse event's position on the page to the viewBox coordinates */\r\n    getViewCoordinates(e: React.MouseEvent<SVGElement, MouseEvent> | MouseEvent): MouseEventMapping {\r\n        let rect = this.ref.current.getBoundingClientRect();\r\n        const l = rect.left,\r\n            t = rect.top,\r\n            w = rect.width,\r\n            h = rect.height;\r\n\r\n\r\n        const localX = e.pageX - l,\r\n            localY = e.pageY - t;\r\n\r\n        // Movement is computed using screen coordinates, not page coordinates, so it must be scaled\r\n        const dLocalX = e.movementX / window.devicePixelRatio,\r\n            dLocalY = e.movementY / window.devicePixelRatio;\r\n\r\n        const {left: viewLeft, top: viewTop, width: viewWidth, height: viewHeight} = this.props.board.viewBox;\r\n\r\n        const viewRelativeX = localX / w,\r\n            viewRelativeY = localY / h,\r\n            viewX = viewLeft + viewRelativeX * viewWidth,\r\n            viewY = viewTop + viewRelativeY * viewHeight,\r\n            dX = dLocalX / w * viewWidth,\r\n            dY = dLocalY / h * viewHeight;\r\n\r\n        return {\r\n            x: viewX,\r\n            y: viewY,\r\n            rx: viewRelativeX,\r\n            ry: viewRelativeY,\r\n            dx: dX,\r\n            dy: dY,\r\n        }\r\n    }\r\n\r\n    /* Event handlers and associated helpers. */\r\n    handleDragEnter(e: React.DragEvent<SVGSVGElement>) {\r\n        e.preventDefault();\r\n        e.dataTransfer.effectAllowed = \"move\";\r\n    }\r\n\r\n    handleDragOver(e: React.DragEvent<SVGSVGElement>) {\r\n        e.preventDefault();\r\n        e.dataTransfer.effectAllowed = \"move\";\r\n    }\r\n\r\n    handleDrop(e: React.DragEvent<SVGSVGElement>) {\r\n        e.preventDefault();\r\n        let {x, y} = this.getViewCoordinates(e);\r\n        let part = Part.data as Part;\r\n        if (!part) {\r\n            return\r\n        }\r\n        let component = part.make(this.props.board);\r\n        // TODO: Compute offset when dropping components to make drag point more consistent.\r\n        component.geometry.translate(new paper.Point(x - 16, y - 16))\r\n\r\n        this.props.board.addComponent(component);\r\n\r\n        this.setState({})\r\n    }\r\n\r\n    static between(a: number , b: number, c: number) {\r\n        return Math.min(Math.max(a, b), c);\r\n    }\r\n\r\n    handleWheel(e: React.WheelEvent<SVGSVGElement>)  {\r\n        let {x, y, rx, ry} = this.getViewCoordinates(e);\r\n\r\n        const viewWidth = this.state.viewPort.width,\r\n            viewHeight = this.state.viewPort.height;\r\n\r\n        const MIN_SCALE = 1 / 16.0;\r\n        const MAX_SCALE = 4.0;\r\n        const {scaleFactor} = this.state;\r\n\r\n        const newScaleFactor = Board.between(MIN_SCALE, Math.pow(2, e.deltaY / 1000) * scaleFactor, MAX_SCALE),\r\n            newWidth = viewWidth * newScaleFactor,\r\n            newHeight = viewHeight * newScaleFactor;\r\n\r\n        const newViewBox = {\r\n            left: x - rx * newWidth,\r\n            top: y - ry * newHeight,\r\n            width: newWidth,\r\n            height: newHeight,\r\n        };\r\n\r\n        this.props.board.viewBox = newViewBox;\r\n\r\n        this.setState({\r\n            scaleFactor: newScaleFactor,\r\n        });\r\n    }\r\n\r\n    handleGateContextMenu(logicComponent: LogicComponent, e:React.MouseEvent<SVGElement, MouseEvent> | MouseEvent) {\r\n        if (e.shiftKey) {\r\n            return;\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        console.log(\"context g!\")\r\n    }\r\n\r\n}\r\n\r\nexport default Board;\r\n","\r\n/** Functional interface that returns 0 when values are equal, <0 when a < b, and >0 when a > b **/\r\ninterface Comparator<T> {\r\n  (a: T, b: T): number;\r\n}\r\n\r\ninterface NodeParams<T> {\r\n  data: T;\r\n}\r\n\r\nclass BinarySearchTreeNode<T> {\r\n  data: T;\r\n  left: BinarySearchTreeNode<T> | null = null;\r\n  right: BinarySearchTreeNode<T> | null = null;\r\n  weight: number = 1;\r\n  max_depth: number = 1;\r\n\r\n  constructor(params: NodeParams<T>) {\r\n    this.data = params.data;\r\n  }\r\n\r\n  private rotateLeft(): BinarySearchTreeNode<T> {\r\n    if (!this.right) {\r\n      throw Error(\"Impossible rotation\")\r\n    }\r\n\r\n    let ret = this.right;\r\n    let side = ret.left;\r\n    this.right = side;\r\n    this.weight -= ret.weight;\r\n    this.weight += side?.weight || 0;\r\n    ret.left = this;\r\n    ret.weight -= side?.weight || 0;\r\n    ret.weight += this.weight;\r\n\r\n    this.max_depth = Math.max(this.left?.max_depth || 0, this.right?.max_depth || 0) + 1\r\n    ret.max_depth = Math.max(ret.left.max_depth, ret.right?.max_depth || 0) + 1\r\n\r\n    return ret;\r\n  }\r\n\r\n  private rotateRight(): BinarySearchTreeNode<T> {\r\n    if (!this.left) {\r\n      throw Error(\"Impossible rotation\")\r\n    }\r\n\r\n    let ret = this.left;\r\n    let side = ret.right;\r\n    this.left = side;\r\n    this.weight -= ret.weight;\r\n    this.weight += side?.weight || 0;\r\n    ret.right = this;\r\n    ret.weight -= side?.weight || 0;\r\n    ret.weight += this.weight;\r\n\r\n    this.max_depth = Math.max(this.left?.max_depth || 0, this.right?.max_depth || 0) + 1\r\n    ret.max_depth = Math.max(ret.left?.max_depth || 0, ret.right.max_depth) + 1\r\n\r\n    return ret;\r\n  }\r\n\r\n  private slant(): number {\r\n    let l = this.left?.max_depth || 0;\r\n    let r = this.right?.max_depth || 0;\r\n    return r - l;\r\n  }\r\n\r\n  private balance(): BinarySearchTreeNode<T> {\r\n    let slant = this.slant();\r\n    if (slant < -1 && this.left) {\r\n      let side_slant = this.left.slant();\r\n      if (side_slant >= 1) {\r\n        this.left = this.left.rotateLeft();\r\n      }\r\n      return this.rotateRight();\r\n    } else if (slant > 1 && this.right) {\r\n      let side_slant = this.right.slant();\r\n      if (side_slant <= -1) {\r\n        this.right = this.right.rotateRight();\r\n      }\r\n      return this.rotateLeft();\r\n    } else {\r\n      return this\r\n    }\r\n  }\r\n\r\n  insert(t: T, cmp: Comparator<T>): [BinarySearchTreeNode<T>, boolean] {\r\n    let result = cmp(t, this.data)\r\n    let added: boolean = false;\r\n    if (result < 0) {\r\n      if (this.left) {\r\n        [this.left, added] = this.left.insert(t, cmp)\r\n      } else {\r\n        this.left = new BinarySearchTreeNode<T>({data: t});\r\n        added = true;\r\n      }\r\n    } else if (result > 0) {\r\n      if (this.right) {\r\n        [this.right, added] = this.right.insert(t, cmp);\r\n      } else {\r\n        this.right = new BinarySearchTreeNode<T>({data: t});\r\n        added = true;\r\n      }\r\n    } else {\r\n      this.data = t;\r\n      return [this, false];\r\n    }\r\n\r\n    let ret: BinarySearchTreeNode<T> = this;\r\n    if (added) {\r\n      this.weight += 1;\r\n      this.max_depth = Math.max(this.left?.max_depth || 0, this.right?.max_depth || 0) + 1;\r\n      ret = this.balance();\r\n    }\r\n    return [ret, added];\r\n  }\r\n\r\n  find(t: T, cmp: Comparator<T>): T | null {\r\n    let result = cmp(t, this.data)\r\n    if (result < 0) {\r\n      return this.left && this.left.find(t, cmp);\r\n    } else if (result > 0) {\r\n      return this.right && this.right.find(t, cmp);\r\n    } else {\r\n      return this.data;\r\n    }\r\n  }\r\n\r\n  popFirst(): [BinarySearchTreeNode<T> | null, T] {\r\n    if (!this.left) {\r\n      return [this.right, this.data];\r\n    } else {\r\n      let [node, val] = this.left.popFirst();\r\n      this.left = node;\r\n\r\n      this.weight -= 1;\r\n      this.max_depth = Math.max(node?.max_depth || 0, this.right?.max_depth || 0) + 1\r\n\r\n      return [this.balance(), val]\r\n    }\r\n  }\r\n\r\n  popLast(): [BinarySearchTreeNode<T> | null, T] {\r\n    if (!this.right) {\r\n      return [this.left, this.data];\r\n    } else {\r\n      let [node, val] = this.right.popFirst();\r\n      this.right = node;\r\n\r\n      this.weight -= 1;\r\n      this.max_depth = Math.max(node?.max_depth || 0, this.left?.max_depth || 0) + 1\r\n\r\n      return [this.balance(), val]\r\n    }\r\n  }\r\n\r\n  remove(t: T, cmp: Comparator<T>): [BinarySearchTreeNode<T> | null, boolean] {\r\n    let result = cmp(t, this.data)\r\n    let removed: boolean;\r\n    let ret: BinarySearchTreeNode<T> | null = this;\r\n    if (result < 0) {\r\n      if (this.left) {\r\n        [this.left, removed] = this.left.remove(t, cmp)\r\n      } else {\r\n        removed = false;\r\n      }\r\n    } else if (result > 0) {\r\n      if (this.right) {\r\n        [this.right, removed] = this.right.remove(t, cmp);\r\n      } else {\r\n        removed = false;\r\n      }\r\n    } else {\r\n      if (this.left) {\r\n        [this.left, this.data] = this.left.popLast();\r\n      } else if (this.right) {\r\n        [this.right, this.data] = this.right.popFirst();\r\n      } else {\r\n        return [null, true];\r\n      }\r\n      removed = true;\r\n    }\r\n\r\n    if (removed) {\r\n      this.weight -= 1;\r\n      this.max_depth = Math.max(this.left?.max_depth || 0, this.right?.max_depth || 0) + 1;\r\n      ret = this.balance();\r\n    }\r\n    return [ret, removed];\r\n  }\r\n\r\n  clear() {\r\n    if (this.left) {\r\n      this.left.clear();\r\n      this.left = null;\r\n    }\r\n    if (this.right) {\r\n      this.right.clear();\r\n      this.right = null;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default BinarySearchTreeNode;","import BinarySearchTreeNode from \"./BinarySearchTreeNode\";\r\n\r\ninterface Comparator<T> {\r\n    (a: T, b: T): number;\r\n}\r\n\r\ninterface IParams<T> {\r\n    cmp: Comparator<T>;\r\n}\r\n\r\nclass BinarySearchTree<T extends Object> {\r\n    private readonly cmp: Comparator<T>;\r\n    root: BinarySearchTreeNode<T> | null = null;\r\n\r\n    constructor(params: IParams<T>) {\r\n        this.cmp = params.cmp;\r\n    }\r\n\r\n    insert(t: T) {\r\n        if (!this.root) {\r\n            this.root = new BinarySearchTreeNode<T>({data: t})\r\n        } else {\r\n            [this.root, ] = this.root.insert(t, this.cmp);\r\n        }\r\n    }\r\n\r\n    remove(t: T): boolean {\r\n        if (!this.root) {\r\n            return false;\r\n        }\r\n\r\n        let ret;\r\n        [this.root, ret] = this.root.remove(t, this.cmp);\r\n        return ret;\r\n    }\r\n\r\n    /** Removes all elements **/\r\n    clear(): void {\r\n        if (!this.root) {\r\n            // console.log(\"No Root!\")\r\n            return;\r\n        }\r\n\r\n        // console.log(\"clearing root!\")\r\n        this.root.clear();\r\n        // console.log(\"Nulling root!\")\r\n        this.root = null;\r\n        // console.log(\"nulled root!\")\r\n    }\r\n\r\n    find(t: T, cmp: Comparator<T> | null = null): T | null {\r\n        cmp = cmp || this.cmp\r\n        if (!this.root) {\r\n            return null;\r\n        }\r\n\r\n        return this.root.find(t, cmp) || null;\r\n    }\r\n\r\n    first(): T | null {\r\n        if (!this.root) {\r\n            return null;\r\n        }\r\n\r\n        let node = this.root;\r\n        while(node.left) {\r\n            node = node.left;\r\n        }\r\n\r\n        return node.data;\r\n    }\r\n\r\n    popFirst(): T | null {\r\n        if (!this.root) {\r\n            return null;\r\n        }\r\n\r\n        let [node, val] = this.root.popFirst();\r\n        this.root = node;\r\n        return val;\r\n    }\r\n\r\n    size(): number {\r\n        return this.root?.weight || 0;\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        return inOrderIterator(this);\r\n    }\r\n}\r\n\r\n\r\nfunction* inOrderIterator<T>(bst: BinarySearchTree<T>): Generator<T> {\r\n    if (bst.root === null) {\r\n        return;\r\n    }\r\n\r\n    let stack = [];\r\n    let current: BinarySearchTreeNode<T> | null = bst.root;\r\n\r\n    while (current || stack.length) {\r\n        while (current) {\r\n            stack.push(current);\r\n            current = current.left;\r\n        }\r\n\r\n        // @ts-ignore\r\n        let ret: BinarySearchTreeNode<T> = stack.pop();\r\n        yield ret.data;\r\n        if (ret.right) {\r\n            current = ret.right;\r\n        }\r\n    }\r\n\r\n    return;\r\n}\r\n\r\nexport default BinarySearchTree;","import LogicPin from \"./LogicPin\";\r\nimport LogicState from \"./LogicState\";\r\n\r\ninterface IParams {\r\n  pin: LogicPin,\r\n  time: number,\r\n  state: LogicState,\r\n}\r\n\r\n/**\r\n * Class representing an update to a pin due to the operation of a LogicComponent\r\n *\r\n * For use in a priority queue to enable logic simulation\r\n * */\r\nclass LogicEvent {\r\n  pin: LogicPin;\r\n  time: number;\r\n  state: LogicState\r\n\r\n  constructor(params: IParams) {\r\n    this.pin = params.pin;\r\n    this.time = params.time;\r\n    this.state = params.state;\r\n  }\r\n\r\n  apply() {\r\n    this.pin.setLogicState(this.state);\r\n  }\r\n\r\n  cmp(other: LogicEvent): number {\r\n    if (this.time === other.time) {\r\n      return this.pin.uuid.localeCompare(other.pin.uuid);\r\n    } else {\r\n      return this.time - other.time;\r\n    }\r\n  }\r\n\r\n  // TODO: add comparators\r\n}\r\n\r\nexport default LogicEvent;","import React from \"react\";\r\n\r\nimport Board from \"../components/Board\";\r\nimport LogicComponent from \"./LogicComponent\";\r\nimport LogicConnection from \"./LogicConnection\";\r\nimport paper from \"paper/dist/paper-core\";\r\nimport {makeAndSetupScope} from \"../util/PaperHelp\";\r\nimport LogicState from \"./LogicState\";\r\nimport LogicPin from \"./LogicPin\";\r\nimport BinarySearchTree from \"../BinarySearchTree\";\r\nimport LogicEvent from \"./LogicEvent\";\r\nimport OperableSet from \"../util/OperableSet\";\r\nimport {ViewBox} from \"../util/Types\";\r\n\r\n/**\r\n *\r\n */\r\nclass LogicBoard {\r\n  private _viewBox: ViewBox = {\r\n    left: 0,\r\n    top: 0,\r\n    width: 800,\r\n    height: 600,\r\n  };\r\n\r\n  /** All components which should be rendered on screen */\r\n  components: Map<string, LogicComponent> = new Map();\r\n  /** All connections which may be rendered */\r\n  connections: Map<string, LogicConnection> = new Map();\r\n  /** All pins which may be rendered */\r\n  pins: Map<string, LogicPin> = new Map();\r\n\r\n  readonly selectedComponents: OperableSet<LogicComponent> = new OperableSet();\r\n  readonly selectedPins: OperableSet<LogicPin> = new OperableSet();\r\n\r\n  /** Paper scope for this board used to compute geometry, and intersections */\r\n  scope: paper.PaperScope = makeAndSetupScope();\r\n  /** All pending logical events on the board **/\r\n  simulation: BinarySearchTree<LogicEvent> = new BinarySearchTree<LogicEvent>({cmp: (a, b) => a.cmp(b)});\r\n  simulationTimerId: number = -1;\r\n  simulationCurrentTime: number = 0;\r\n  /** Controls how frequently the simulation is updated **/\r\n  simulationIntervalMs: number = 25;\r\n  /** Controls how many time units pass per simulation interval **/\r\n  simulationStepSize: number = 1;\r\n  updateApp: Function = () => {};\r\n  updateProperties: () => void = () => {};\r\n  update: () => void = () => {};\r\n\r\n  get viewBox(): ViewBox {\r\n    return this._viewBox!\r\n  }\r\n\r\n  set viewBox(viewbox: ViewBox) {\r\n    this._viewBox = viewbox;\r\n  }\r\n\r\n  render(): React.ReactElement {\r\n    return (\r\n        <Board board={this}/>\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Updates a pin at a simulated time in the future.\r\n   *\r\n   * @param state - The new logical state of the pin\r\n   * @param pin - The pin to be updated\r\n   * @param delay - The amount of time from the current time before the pin's state should be updated.\r\n   */\r\n  postEvent(state: LogicState, pin: LogicPin, delay: number) {\r\n    let event = new LogicEvent({\r\n      pin: pin,\r\n      time: this.simulationCurrentTime + delay,\r\n      state: state\r\n    });\r\n    // console.log(`Posting event at time (${this.simulationCurrentTime}) for target time (${event.time})`)\r\n    this.simulation.insert(event);\r\n  }\r\n\r\n  startSimulation() {\r\n    if (this.simulationTimerId === -1) {\r\n      // @ts-ignore: Not using NodeJs.setInterval.  This is actually a number\r\n      this.simulationTimerId = setInterval(this.advanceSimulation.bind(this), this.simulationIntervalMs);\r\n    }\r\n  }\r\n\r\n  stopSimulation() {\r\n    this.pauseSimulation();\r\n    this.simulation.clear();\r\n    // Important that the simulation time is set to 0 before components are reset\r\n    this.simulationCurrentTime = 0;\r\n    this.components.forEach(c => c.reset());\r\n    // console.log(this.simulation)\r\n  }\r\n\r\n  pauseSimulation() {\r\n    if (this.simulationTimerId !== -1) {\r\n      clearInterval(this.simulationTimerId);\r\n      this.simulationTimerId = -1;\r\n    }\r\n  }\r\n\r\n  advanceSimulation() {\r\n    let current = this.simulationCurrentTime;\r\n    let target = current + this.simulationStepSize;\r\n    // TODO(dpasillas): Modify Binary Tree to remove need to check first() on every loop.\r\n    while (this.simulation.size() && this.simulation.first()!.time <= target) {\r\n      let event = this.simulation.popFirst()!;\r\n      // Update the time so that operations triggered by this event use the correct reference time.\r\n      this.simulationCurrentTime = event.time;\r\n      event.apply();\r\n    }\r\n    this.simulationCurrentTime = target;\r\n    // TODO(dpasillas): Remove this call once we've identified where the simulation state may be referenced, and\r\n    //                  appropriate channels have been created to send the data where it's needed.\r\n    //\r\n    // This call re-renders the entire app, which may be needlessly expensive.\r\n    this.updateApp();\r\n  }\r\n\r\n  get simulationRunning() {\r\n    return this.simulationTimerId !== -1;\r\n  }\r\n\r\n  get simulationPaused() {\r\n    return !this.simulationRunning && this.simulationCurrentTime !== 0;\r\n  }\r\n\r\n  get simulationStopped() {\r\n    return !this.simulationRunning && this.simulationCurrentTime === 0;\r\n  }\r\n\r\n  /** Tracks a component to be rendered */\r\n  addComponent(component: LogicComponent) {\r\n    this.components.set(component.uuid, component)\r\n  }\r\n\r\n  /** Tracks a connection to be rendered */\r\n  addConnection(connection: LogicConnection) {\r\n    this.connections.set(connection.uuid, connection)\r\n  }\r\n\r\n  /** Tracks a pin to be rendered */\r\n  addPin(pin: LogicPin) {\r\n    this.pins.set(pin.uuid, pin);\r\n  }\r\n\r\n  /** Removes a component from being tracked and rendered */\r\n  removeComponent(uuid: string) {\r\n    this.components.delete(uuid);\r\n  }\r\n\r\n  /** Removes a connection from being tracked and rendered */\r\n  removeConnection(uuid: string) {\r\n    this.connections.delete(uuid);\r\n  }\r\n\r\n  /** Removes a connection from being tracked and rendered */\r\n  removePin(uuid: string) {\r\n    this.pins.delete(uuid);\r\n  }\r\n\r\n  clearSelection() {\r\n    for (let c of this.selectedComponents) {\r\n      c.selected = false;\r\n    }\r\n    this.selectedComponents.clear()\r\n\r\n    for (let p of this.selectedPins) {\r\n      p.selected = false;\r\n    }\r\n    this.selectedPins.clear()\r\n  }\r\n}\r\n\r\nexport default LogicBoard;","import {createTheme} from \"@mui/material\";\r\nimport grey from \"@mui/material/colors/grey\";\r\n\r\nexport const DarkTheme = createTheme({\r\n  palette: {\r\n    mode: 'dark',\r\n    background: {\r\n      default: grey[900],\r\n    }\r\n  },\r\n});\r\n\r\nexport const LightTheme = createTheme({\r\n  palette: {\r\n    mode: 'light',\r\n    background: {\r\n      default: grey[200],\r\n    }\r\n  },\r\n})","import React from \"react\";\r\nimport {LightTheme} from \"./Themes\";\r\nimport {Theme} from \"@mui/material\";\r\n\r\n// set the defaults\r\nconst ThemeContext = React.createContext({\r\n  theme: LightTheme,\r\n  setTheme: (theme: Theme) => {}\r\n});\r\n\r\nexport default ThemeContext;\r\n","import React from \"react\"\r\nimport ThemeContext from \"../ThemeContext\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport {DarkTheme, LightTheme} from \"../Themes\";\r\nimport Brightness4 from \"@mui/icons-material/Brightness4\";\r\nimport Brightness7 from \"@mui/icons-material/Brightness7\";\r\n\r\ninterface IProps{}\r\ninterface IState{}\r\n\r\nclass ToggleThemeButton extends React.Component<IProps, IState> {\r\n  render() {\r\n    return (\r\n    <ThemeContext.Consumer>\r\n      {({theme, setTheme}) => (\r\n          <IconButton onClick={() => setTheme(theme.palette.mode === 'dark' ? LightTheme : DarkTheme)}>\r\n            {theme.palette.mode === 'dark' ? <Brightness7/> : <Brightness4/>}\r\n          </IconButton>\r\n      )}\r\n    </ThemeContext.Consumer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ToggleThemeButton;","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPause, faStop, faPlay, faStepForward} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Box from \"@mui/material/Box\"\r\nimport Divider from \"@mui/material/Divider\"\r\nimport IconButton from \"@mui/material/IconButton\"\r\nimport Stack from \"@mui/material/Stack\"\r\n\r\n// import PlayArrow from \"@mui/icons-material/PlayArrow\";\r\n// import Pause from \"@mui/icons-material/Pause\";\r\n// import SkipNext from \"@mui/icons-material/SkipNext\";\r\n// import Stop from \"@mui/icons-material/Stop\";\r\n\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\nimport ToggleThemeButton from \"./ToggleThemeButton\";\r\nimport \"../css/Toolbar.css\";\r\n\r\ninterface IProps {\r\n  board: LogicBoard;\r\n}\r\n\r\ninterface IState {}\r\n\r\nclass Toolbar extends React.Component<IProps, IState> {\r\n  render() {\r\n    let running = this.props.board.simulationRunning;\r\n    let stopped = !running && this.props.board.simulationStopped;\r\n    return (\r\n        <Stack className=\"toolbar\"\r\n               sx={{\r\n                 backgroundColor: \"background.default\",\r\n                 border: (theme) => `1px solid ${theme.palette.divider}`\r\n               }}\r\n               spacing={1}\r\n               divider={<Divider orientation=\"vertical\" variant=\"middle\" flexItem/>}\r\n               direction=\"row\">\r\n          <Box flexDirection=\"row\">\r\n            <IconButton className={running ? \"pressed\" : \"\"} onClick={this.onPlay.bind(this)}>\r\n              {/*<PlayArrow className=\"default\" sx={{position:\"fixed\"}}/>*/}\r\n              {/*<Pause className=\"active\"/>*/}\r\n              <FontAwesomeIcon className=\"default\" size=\"xs\" icon={faPlay} style={{position: \"fixed\"}}/>\r\n              <FontAwesomeIcon className=\"active\" size=\"xs\" icon={faPause}/>\r\n            </IconButton>\r\n            <IconButton onClick={this.onStop.bind(this)} disabled={stopped}>\r\n              {/*<Stop/>*/}\r\n              <FontAwesomeIcon size=\"xs\" icon={faStop}/>\r\n            </IconButton>\r\n            <IconButton onClick={this.onStep.bind(this)} disabled={running}>\r\n              {/*<SkipNext/>*/}\r\n              <FontAwesomeIcon size=\"xs\" icon={faStepForward}/>\r\n            </IconButton>\r\n            {/*<span>*/}\r\n            {/*  {this.props.board.simulationCurrentTime}*/}\r\n            {/*</span>*/}\r\n          </Box>\r\n          <Box>\r\n            <ToggleThemeButton/>\r\n          </Box>\r\n        </Stack>\r\n    );\r\n  }\r\n\r\n  onPlay() {\r\n    let board = this.props.board;\r\n    if (board.simulationRunning) {\r\n      this.props.board.pauseSimulation();\r\n    } else {\r\n      this.props.board.startSimulation();\r\n    }\r\n    this.setState({})\r\n  }\r\n\r\n  onStop() {\r\n    this.props.board.stopSimulation();\r\n    this.setState({});\r\n  }\r\n\r\n  onStep() {\r\n    this.props.board.advanceSimulation()\r\n  }\r\n}\r\n\r\nexport default Toolbar;","import React from 'react';\r\nimport Box from \"@mui/material/Box\"\r\nimport {Theme, ThemeProvider} from \"@mui/material/styles\"\r\n\r\nimport Sidebar from \"./Sidebar\";\r\nimport Part from \"./Part\";\r\nimport PartType from \"../enums/PartType\";\r\nimport GateType from \"../enums/GateType\";\r\nimport LogicBoard from \"../logic/LogicBoard\";\r\nimport Toolbar from \"./Toolbar\";\r\nimport {LightTheme} from \"../Themes\";\r\nimport ThemeContext from \"../ThemeContext\";\r\nimport '../css/App.css';\r\n\r\ninterface IProps {}\r\ninterface IState {\r\n  theme: Theme,\r\n  setTheme: (theme: Theme) => void,\r\n}\r\n\r\n/**\r\n * Entry point to the app.\r\n */\r\nclass App extends React.Component<IProps , IState>{\r\n  private board: LogicBoard = new LogicBoard();\r\n  private parts: Map<string, Part[]> = new Map([\r\n      [\"Input\", [\r\n        new Part({type: PartType.INPUT, subtype: 0, label: \"Clock\"}),\r\n        new Part({type: PartType.INPUT, subtype: 1, label: \"Switch\"}),\r\n        new Part({type: PartType.INPUT, subtype: 2, label: \"Ground\"}),\r\n      ]],\r\n      [\"Output\", [\r\n        new Part({type: PartType.OUTPUT, subtype: 0, label:\"Bulb\"}),\r\n      ]],\r\n      [\"Gates\", [\r\n        new Part({type: PartType.GATE, subtype: GateType.AND, label:\"AND\"}),\r\n        new Part({type: PartType.GATE, subtype: GateType.NAND, label:\"NAND\"}),\r\n        new Part({type: PartType.GATE, subtype: GateType.OR, label:\"OR\"}),\r\n        new Part({type: PartType.GATE, subtype: GateType.NOR, label:\"NOR\"}),\r\n        new Part({type: PartType.GATE, subtype: GateType.XOR, label:\"XOR\"}),\r\n        new Part({type: PartType.GATE, subtype: GateType.XNOR, label:\"XNOR\"}),\r\n        new Part({type: PartType.GATE, subtype: GateType.BUF, label:\"BUF\"}),\r\n        new Part({type: PartType.GATE, subtype: GateType.NOT, label:\"NOT\"}),\r\n      ]],\r\n      [\"Other\", [\r\n        new Part({type: PartType.COMPOSITE_BUILT_IN, subtype: 0, label: \"Half-Adder\"}),\r\n        new Part({type: PartType.COMPOSITE_BUILT_IN, subtype: 1, label: \"Adder\"}),\r\n      ]]\r\n  ]);\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      theme: LightTheme,\r\n      setTheme: this.setTheme.bind(this),\r\n    }\r\n  }\r\n\r\n  setTheme(theme: Theme) {\r\n    console.log(`Setting theme (${theme.palette.mode})...`)\r\n    this.setState({theme: theme});\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.board.updateApp = () => this.setState({});\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.board.updateApp = () => {};\r\n  }\r\n\r\n  render()\r\n  {\r\n    return (\r\n        <ThemeContext.Provider value={this.state}>\r\n          <ThemeProvider theme={this.state.theme}>\r\n            <div style={{width: \"100%\", height: \"100%\"}}>\r\n              <div>\r\n                Menu\r\n                <Toolbar board={this.board}/>\r\n              </div>\r\n              <Box sx={{bgcolor: 'background.default', width: \"100%\", height: \"100%\", display: \"flex\"}}>\r\n                <Sidebar parts={this.parts}>\r\n                </Sidebar>\r\n                {this.board.render()}\r\n              </Box>\r\n            </div>\r\n          </ThemeProvider>\r\n        </ThemeContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport 'typeface-roboto';\r\nimport 'typeface-roboto-mono';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './components/App';\r\nimport {StyledEngineProvider} from \"@mui/styled-engine\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <StyledEngineProvider>\r\n        <App/>\r\n      </StyledEngineProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}